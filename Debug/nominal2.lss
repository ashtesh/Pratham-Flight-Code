
nominal2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000543a  000054ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000543a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000329  00800160  00800160  0000552e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000552e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c0  00000000  00000000  0000558a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005844  00000000  00000000  0000594a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000166b  00000000  00000000  0000b18e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000256c  00000000  00000000  0000c7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e88  00000000  00000000  0000ed68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a7c  00000000  00000000  0000fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004312  00000000  00000000  0001066c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  0001497e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	da c3       	rjmp	.+1972   	; 0x7b6 <__ctors_end>
       2:	00 00       	nop
       4:	f7 c3       	rjmp	.+2030   	; 0x7f4 <__bad_interrupt>
       6:	00 00       	nop
       8:	f5 c3       	rjmp	.+2026   	; 0x7f4 <__bad_interrupt>
       a:	00 00       	nop
       c:	f3 c3       	rjmp	.+2022   	; 0x7f4 <__bad_interrupt>
       e:	00 00       	nop
      10:	f1 c3       	rjmp	.+2018   	; 0x7f4 <__bad_interrupt>
      12:	00 00       	nop
      14:	ef c3       	rjmp	.+2014   	; 0x7f4 <__bad_interrupt>
      16:	00 00       	nop
      18:	ed c3       	rjmp	.+2010   	; 0x7f4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	eb c3       	rjmp	.+2006   	; 0x7f4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e9 c3       	rjmp	.+2002   	; 0x7f4 <__bad_interrupt>
      22:	00 00       	nop
      24:	e7 c3       	rjmp	.+1998   	; 0x7f4 <__bad_interrupt>
      26:	00 00       	nop
      28:	e5 c3       	rjmp	.+1994   	; 0x7f4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e3 c3       	rjmp	.+1990   	; 0x7f4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e1 c3       	rjmp	.+1986   	; 0x7f4 <__bad_interrupt>
      32:	00 00       	nop
      34:	df c3       	rjmp	.+1982   	; 0x7f4 <__bad_interrupt>
      36:	00 00       	nop
      38:	dd c3       	rjmp	.+1978   	; 0x7f4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	db c3       	rjmp	.+1974   	; 0x7f4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d9 c3       	rjmp	.+1970   	; 0x7f4 <__bad_interrupt>
      42:	00 00       	nop
      44:	d7 c3       	rjmp	.+1966   	; 0x7f4 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_18>
      4c:	d3 c3       	rjmp	.+1958   	; 0x7f4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d1 c3       	rjmp	.+1954   	; 0x7f4 <__bad_interrupt>
      52:	00 00       	nop
      54:	cf c3       	rjmp	.+1950   	; 0x7f4 <__bad_interrupt>
      56:	00 00       	nop
      58:	cd c3       	rjmp	.+1946   	; 0x7f4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cb c3       	rjmp	.+1942   	; 0x7f4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c9 c3       	rjmp	.+1938   	; 0x7f4 <__bad_interrupt>
      62:	00 00       	nop
      64:	c7 c3       	rjmp	.+1934   	; 0x7f4 <__bad_interrupt>
      66:	00 00       	nop
      68:	c5 c3       	rjmp	.+1930   	; 0x7f4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c3 c3       	rjmp	.+1926   	; 0x7f4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c1 c3       	rjmp	.+1922   	; 0x7f4 <__bad_interrupt>
      72:	00 00       	nop
      74:	bf c3       	rjmp	.+1918   	; 0x7f4 <__bad_interrupt>
      76:	00 00       	nop
      78:	bd c3       	rjmp	.+1914   	; 0x7f4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bb c3       	rjmp	.+1910   	; 0x7f4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b9 c3       	rjmp	.+1906   	; 0x7f4 <__bad_interrupt>
      82:	00 00       	nop
      84:	b7 c3       	rjmp	.+1902   	; 0x7f4 <__bad_interrupt>
      86:	00 00       	nop
      88:	b5 c3       	rjmp	.+1898   	; 0x7f4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	03 6e       	ori	r16, 0xE3	; 227
      8e:	db 36       	cpi	r29, 0x6B	; 107
      90:	3d 9a       	sbi	0x07, 5	; 7
      92:	99 99       	sbic	0x13, 1	; 19
      94:	99 3d       	cpi	r25, 0xD9	; 217
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	3e 00       	.word	0x003e	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	std	Y+51, r6	; 0x33
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 07       	cpc	r19, r31
      ce:	2c 7a       	andi	r18, 0xAC	; 172
      d0:	a5 ba       	out	0x15, r10	; 21
      d2:	6c c5       	rjmp	.+2776   	; 0xbac <control+0x15c>
      d4:	90 da       	rcall	.-2784   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
      d6:	3b 93       	.word	0x933b	; ????
      d8:	65 fc       	sbrc	r6, 5
      da:	8b bc       	out	0x2b, r8	; 43
      dc:	53 f8       	bld	r5, 3
      de:	10 fd       	sbrc	r17, 0
      e0:	3c 56       	subi	r19, 0x6C	; 108
      e2:	92 83       	std	Z+2, r25	; 0x02
      e4:	4d bd       	out	0x2d, r20	; 45
      e6:	87 9d       	mul	r24, r7
      e8:	3a b6       	in	r3, 0x3a	; 58
      ea:	3d cb       	rjmp	.-2438   	; 0xfffff766 <__eeprom_end+0xff7ef766>
      ec:	c9 bf       	out	0x39, r28	; 57
      ee:	5b be       	out	0x3b, r5	; 59
      f0:	73 da       	rcall	.-2842   	; 0xfffff5d8 <__eeprom_end+0xff7ef5d8>
      f2:	0f c9       	rjmp	.-3554   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      f4:	3f 05       	cpc	r19, r15
      f6:	a8 4c       	sbci	r26, 0xC8	; 200
      f8:	cd b2       	in	r12, 0x1d	; 29
      fa:	d4 4e       	sbci	r29, 0xE4	; 228
      fc:	b9 38       	cpi	r27, 0x89	; 137
      fe:	36 a9       	ldd	r19, Z+54	; 0x36
     100:	02 0c       	add	r0, r2
     102:	50 b9       	out	0x00, r21	; 0
     104:	91 86       	std	Z+9, r9	; 0x09
     106:	88 08       	sbc	r8, r8
     108:	3c a6       	std	Y+44, r3	; 0x2c
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	00 00       	nop
     110:	00 80       	ld	r0, Z
     112:	3f 07       	cpc	r19, r31
     114:	63 42       	sbci	r22, 0x23	; 35
     116:	36 b7       	in	r19, 0x36	; 54
     118:	9b d8       	rcall	.-3786   	; 0xfffff250 <__eeprom_end+0xff7ef250>
     11a:	a7 1a       	sub	r10, r23
     11c:	39 68       	ori	r19, 0x89	; 137
     11e:	56 18       	sub	r5, r6
     120:	ae ba       	out	0x1e, r10	; 30
     122:	ab 55       	subi	r26, 0x5B	; 91
     124:	8c 1d       	adc	r24, r12
     126:	3c b7       	in	r19, 0x3c	; 60
     128:	cc 57       	subi	r28, 0x7C	; 124
     12a:	63 bd       	out	0x23, r22	; 35
     12c:	6d ed       	ldi	r22, 0xDD	; 221
     12e:	fd 75       	andi	r31, 0x5D	; 93
     130:	3e f6       	brtc	.-114    	; 0xc0 <__SREG__+0x81>
     132:	17 72       	andi	r17, 0x27	; 39
     134:	31 bf       	out	0x31, r19	; 49
     136:	00 00       	nop
     138:	00 80       	ld	r0, Z
     13a:	3f 08       	sbc	r3, r15
     13c:	00 00       	nop
     13e:	00 be       	out	0x30, r0	; 48
     140:	92 24       	eor	r9, r2
     142:	49 12       	cpse	r4, r25
     144:	3e ab       	std	Y+54, r19	; 0x36
     146:	aa aa       	std	Y+50, r10	; 0x32
     148:	2a be       	out	0x3a, r2	; 58
     14a:	cd cc       	rjmp	.-1638   	; 0xfffffae6 <__eeprom_end+0xff7efae6>
     14c:	cc 4c       	sbci	r28, 0xCC	; 204
     14e:	3e 00       	.word	0x003e	; ????
     150:	00 00       	nop
     152:	80 be       	out	0x30, r8	; 48
     154:	ab aa       	std	Y+51, r10	; 0x33
     156:	aa aa       	std	Y+50, r10	; 0x32
     158:	3e 00       	.word	0x003e	; ????
     15a:	00 00       	nop
     15c:	00 bf       	out	0x30, r16	; 48
     15e:	00 00       	nop
     160:	00 80       	ld	r0, Z
     162:	3f 00       	.word	0x003f	; ????
     164:	00 00       	nop
     166:	00 00       	nop
     168:	08 41       	sbci	r16, 0x18	; 24
     16a:	78 d3       	rcall	.+1776   	; 0x85c <apply_torque+0x66>
     16c:	bb 43       	sbci	r27, 0x3B	; 59
     16e:	87 d1       	rcall	.+782    	; 0x47e <__trampolines_end+0x2e8>
     170:	13 3d       	cpi	r17, 0xD3	; 211
     172:	19 0e       	add	r1, r25
     174:	3c c3       	rjmp	.+1656   	; 0x7ee <.do_clear_bss_start+0x8>
     176:	bd 42       	sbci	r27, 0x2D	; 45
     178:	82 ad       	ldd	r24, Z+58	; 0x3a
     17a:	2b 3e       	cpi	r18, 0xEB	; 235
     17c:	68 ec       	ldi	r22, 0xC8	; 200
     17e:	82 76       	andi	r24, 0x62	; 98
     180:	be d9       	rcall	.-3204   	; 0xfffff4fe <__eeprom_end+0xff7ef4fe>
     182:	8f e1       	ldi	r24, 0x1F	; 31
     184:	a9 3e       	cpi	r26, 0xE9	; 233
     186:	4c 80       	ldd	r4, Y+4	; 0x04
     188:	ef ff       	.word	0xffef	; ????
     18a:	be 01       	movw	r22, r28
     18c:	c4 ff       	sbrs	r28, 4
     18e:	7f 3f       	cpi	r23, 0xFF	; 255
     190:	00 00       	nop
     192:	00 00       	nop
	...

00000196 <__trampolines_end>:
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	cd cc       	rjmp	.-1638   	; 0xfffffb36 <__eeprom_end+0xff7efb36>
     19c:	24 41       	sbci	r18, 0x14	; 20
     19e:	cd cc       	rjmp	.-1638   	; 0xfffffb3a <__eeprom_end+0xff7efb3a>
     1a0:	90 41       	sbci	r25, 0x10	; 16
     1a2:	cd cc       	rjmp	.-1638   	; 0xfffffb3e <__eeprom_end+0xff7efb3e>
     1a4:	d4 c1       	rjmp	.+936    	; 0x54e <agh+0xa8>
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	0b c1       	rjmp	.+534    	; 0x3c0 <__trampolines_end+0x22a>
     1aa:	33 33       	cpi	r19, 0x33	; 51
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__trampolines_end+0xbe>
     1ae:	33 33       	cpi	r19, 0x33	; 51
     1b0:	db c1       	rjmp	.+950    	; 0x568 <agh+0xc2>
     1b2:	66 66       	ori	r22, 0x66	; 102
     1b4:	06 40       	sbci	r16, 0x06	; 6
     1b6:	9a 99       	sbic	0x13, 2	; 19
     1b8:	61 c1       	rjmp	.+706    	; 0x47c <__trampolines_end+0x2e6>
     1ba:	9a 99       	sbic	0x13, 2	; 19
     1bc:	59 40       	sbci	r21, 0x09	; 9
     1be:	00 00       	nop
     1c0:	b0 c0       	rjmp	.+352    	; 0x322 <__trampolines_end+0x18c>
     1c2:	33 33       	cpi	r19, 0x33	; 51
     1c4:	03 41       	sbci	r16, 0x13	; 19
     1c6:	33 33       	cpi	r19, 0x33	; 51
     1c8:	33 bf       	out	0x33, r19	; 51
     1ca:	cd cc       	rjmp	.-1638   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     1cc:	cc be       	out	0x3c, r12	; 60
     1ce:	9a 99       	sbic	0x13, 2	; 19
     1d0:	21 c1       	rjmp	.+578    	; 0x414 <__trampolines_end+0x27e>
     1d2:	66 66       	ori	r22, 0x66	; 102
     1d4:	e6 3f       	cpi	r30, 0xF6	; 246
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 bf       	out	0x33, r19	; 51
     1da:	cd cc       	rjmp	.-1638   	; 0xfffffb76 <__eeprom_end+0xff7efb76>
     1dc:	4c 3e       	cpi	r20, 0xEC	; 236
     1de:	66 66       	ori	r22, 0x66	; 102
     1e0:	a6 bf       	out	0x36, r26	; 54
     1e2:	9a 99       	sbic	0x13, 2	; 19
     1e4:	11 c1       	rjmp	.+546    	; 0x408 <__trampolines_end+0x272>
     1e6:	9a 99       	sbic	0x13, 2	; 19
     1e8:	a9 40       	sbci	r26, 0x09	; 9
     1ea:	33 33       	cpi	r19, 0x33	; 51
     1ec:	83 40       	sbci	r24, 0x03	; 3
     1ee:	9a 99       	sbic	0x13, 2	; 19
     1f0:	39 40       	sbci	r19, 0x09	; 9
     1f2:	9a 99       	sbic	0x13, 2	; 19
     1f4:	89 c0       	rjmp	.+274    	; 0x308 <__trampolines_end+0x172>
     1f6:	66 66       	ori	r22, 0x66	; 102
     1f8:	a6 c0       	rjmp	.+332    	; 0x346 <__trampolines_end+0x1b0>
     1fa:	cd cc       	rjmp	.-1638   	; 0xfffffb96 <__eeprom_end+0xff7efb96>
     1fc:	4c be       	out	0x3c, r4	; 60
     1fe:	00 00       	nop
     200:	00 3f       	cpi	r16, 0xF0	; 240
     202:	9a 99       	sbic	0x13, 2	; 19
     204:	19 3f       	cpi	r17, 0xF9	; 249
     206:	66 66       	ori	r22, 0x66	; 102
     208:	a6 bf       	out	0x36, r26	; 54
     20a:	9a 99       	sbic	0x13, 2	; 19
     20c:	d9 3f       	cpi	r29, 0xF9	; 249
     20e:	cd cc       	rjmp	.-1638   	; 0xfffffbaa <__eeprom_end+0xff7efbaa>
     210:	cc bd       	out	0x2c, r28	; 44
     212:	9a 99       	sbic	0x13, 2	; 19
     214:	99 bf       	out	0x39, r25	; 57
     216:	33 33       	cpi	r19, 0x33	; 51
     218:	b3 3f       	cpi	r27, 0xF3	; 243
     21a:	9a 99       	sbic	0x13, 2	; 19
     21c:	59 40       	sbci	r21, 0x09	; 9
     21e:	9a 99       	sbic	0x13, 2	; 19
     220:	79 40       	sbci	r23, 0x09	; 9
     222:	00 00       	nop
     224:	00 00       	nop
     226:	9a 99       	sbic	0x13, 2	; 19
     228:	99 be       	out	0x39, r9	; 57
     22a:	cd cc       	rjmp	.-1638   	; 0xfffffbc6 <__eeprom_end+0xff7efbc6>
     22c:	cc bd       	out	0x2c, r28	; 44
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	33 33       	cpi	r19, 0x33	; 51
     234:	33 bf       	out	0x33, r19	; 51
     236:	66 66       	ori	r22, 0x66	; 102
     238:	06 c0       	rjmp	.+12     	; 0x246 <__trampolines_end+0xb0>
     23a:	66 66       	ori	r22, 0x66	; 102
     23c:	06 40       	sbci	r16, 0x06	; 6
     23e:	33 33       	cpi	r19, 0x33	; 51
     240:	33 bf       	out	0x33, r19	; 51
     242:	9a 99       	sbic	0x13, 2	; 19
     244:	99 bf       	out	0x39, r25	; 57
     246:	cd cc       	rjmp	.-1638   	; 0xfffffbe2 <__eeprom_end+0xff7efbe2>
     248:	4c 3e       	cpi	r20, 0xEC	; 236
     24a:	9a 99       	sbic	0x13, 2	; 19
     24c:	99 3e       	cpi	r25, 0xE9	; 233
     24e:	66 66       	ori	r22, 0x66	; 102
     250:	66 3f       	cpi	r22, 0xF6	; 246
     252:	cd cc       	rjmp	.-1638   	; 0xfffffbee <__eeprom_end+0xff7efbee>
     254:	cc 3f       	cpi	r28, 0xFC	; 252
     256:	00 00       	nop
     258:	80 3f       	cpi	r24, 0xF0	; 240
     25a:	9a 99       	sbic	0x13, 2	; 19
     25c:	99 3e       	cpi	r25, 0xE9	; 233
     25e:	cd cc       	rjmp	.-1638   	; 0xfffffbfa <__eeprom_end+0xff7efbfa>
     260:	4c be       	out	0x3c, r4	; 60
     262:	cd cc       	rjmp	.-1638   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
     264:	4c 3f       	cpi	r20, 0xFC	; 252
     266:	00 00       	nop
     268:	00 bf       	out	0x30, r16	; 48
     26a:	cd cc       	rjmp	.-1638   	; 0xfffffc06 <__eeprom_end+0xff7efc06>
     26c:	cc 3e       	cpi	r28, 0xEC	; 236
     26e:	66 66       	ori	r22, 0x66	; 102
     270:	a6 3f       	cpi	r26, 0xF6	; 246
     272:	cd cc       	rjmp	.-1638   	; 0xfffffc0e <__eeprom_end+0xff7efc0e>
     274:	4c be       	out	0x3c, r4	; 60
     276:	cd cc       	rjmp	.-1638   	; 0xfffffc12 <__eeprom_end+0xff7efc12>
     278:	cc 3d       	cpi	r28, 0xDC	; 220
     27a:	9a 99       	sbic	0x13, 2	; 19
     27c:	99 be       	out	0x39, r9	; 57
     27e:	9a 99       	sbic	0x13, 2	; 19
     280:	19 bf       	out	0x39, r17	; 57
     282:	9a 99       	sbic	0x13, 2	; 19
     284:	19 bf       	out	0x39, r17	; 57
     286:	cd cc       	rjmp	.-1638   	; 0xfffffc22 <__eeprom_end+0xff7efc22>
     288:	4c bf       	out	0x3c, r20	; 60
     28a:	cd cc       	rjmp	.-1638   	; 0xfffffc26 <__eeprom_end+0xff7efc26>
     28c:	cc 3d       	cpi	r28, 0xDC	; 220
     28e:	cd cc       	rjmp	.-1638   	; 0xfffffc2a <__eeprom_end+0xff7efc2a>
     290:	4c 3e       	cpi	r20, 0xEC	; 236
     292:	cd cc       	rjmp	.-1638   	; 0xfffffc2e <__eeprom_end+0xff7efc2e>
     294:	4c be       	out	0x3c, r4	; 60
     296:	cd cc       	rjmp	.-1638   	; 0xfffffc32 <__eeprom_end+0xff7efc32>
     298:	4c 3e       	cpi	r20, 0xEC	; 236
     29a:	00 00       	nop
     29c:	00 00       	nop
     29e:	9a 99       	sbic	0x13, 2	; 19
     2a0:	99 be       	out	0x39, r9	; 57
     2a2:	9a 99       	sbic	0x13, 2	; 19
     2a4:	19 bf       	out	0x39, r17	; 57
     2a6:	9a 99       	sbic	0x13, 2	; 19
     2a8:	99 3e       	cpi	r25, 0xE9	; 233
     2aa:	00 00       	nop
     2ac:	00 3f       	cpi	r16, 0xF0	; 240
     2ae:	cd cc       	rjmp	.-1638   	; 0xfffffc4a <__eeprom_end+0xff7efc4a>
     2b0:	cc 3d       	cpi	r28, 0xDC	; 220
     2b2:	cd cc       	rjmp	.-1638   	; 0xfffffc4e <__eeprom_end+0xff7efc4e>
     2b4:	4c be       	out	0x3c, r4	; 60
     2b6:	00 00       	nop
     2b8:	00 3f       	cpi	r16, 0xF0	; 240
     2ba:	cd cc       	rjmp	.-1638   	; 0xfffffc56 <__eeprom_end+0xff7efc56>
     2bc:	cc 3e       	cpi	r28, 0xEC	; 236
     2be:	cd cc       	rjmp	.-1638   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
     2c0:	4c be       	out	0x3c, r4	; 60
     2c2:	cd cc       	rjmp	.-1638   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
     2c4:	cc 3d       	cpi	r28, 0xDC	; 220
     2c6:	9a 99       	sbic	0x13, 2	; 19
     2c8:	99 be       	out	0x39, r9	; 57
     2ca:	cd cc       	rjmp	.-1638   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
     2cc:	cc be       	out	0x3c, r12	; 60
     2ce:	9a 99       	sbic	0x13, 2	; 19
     2d0:	99 3e       	cpi	r25, 0xE9	; 233
     2d2:	9a 99       	sbic	0x13, 2	; 19
     2d4:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004a6 <agh>:
     4a6:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4b6:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4c6:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4d6:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4e6:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     4f6:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     506:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     516:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     526:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     536:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     546:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     556:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     566:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     576:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     586:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     596:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5a6:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5b6:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5c6:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5d6:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5e6:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     5f6:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     606:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     616:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     626:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     636:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     646:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     656:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     666:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     676:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     686:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     696:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6a6:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6b6:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6c6:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6d6:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6e6:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     6f6:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     706:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     716:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     726:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     736:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     746:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     756:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     766:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     776:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     786:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     796:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7a6:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007b6 <__ctors_end>:
     7b6:	11 24       	eor	r1, r1
     7b8:	1f be       	out	0x3f, r1	; 63
     7ba:	cf ef       	ldi	r28, 0xFF	; 255
     7bc:	d0 e1       	ldi	r29, 0x10	; 16
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	cd bf       	out	0x3d, r28	; 61

000007c2 <__do_copy_data>:
     7c2:	11 e0       	ldi	r17, 0x01	; 1
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b1 e0       	ldi	r27, 0x01	; 1
     7c8:	ea e3       	ldi	r30, 0x3A	; 58
     7ca:	f4 e5       	ldi	r31, 0x54	; 84
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	0b bf       	out	0x3b, r16	; 59
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <__do_copy_data+0x14>
     7d2:	07 90       	elpm	r0, Z+
     7d4:	0d 92       	st	X+, r0
     7d6:	a0 36       	cpi	r26, 0x60	; 96
     7d8:	b1 07       	cpc	r27, r17
     7da:	d9 f7       	brne	.-10     	; 0x7d2 <__do_copy_data+0x10>

000007dc <__do_clear_bss>:
     7dc:	24 e0       	ldi	r18, 0x04	; 4
     7de:	a0 e6       	ldi	r26, 0x60	; 96
     7e0:	b1 e0       	ldi	r27, 0x01	; 1
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <.do_clear_bss_start>

000007e4 <.do_clear_bss_loop>:
     7e4:	1d 92       	st	X+, r1

000007e6 <.do_clear_bss_start>:
     7e6:	a9 38       	cpi	r26, 0x89	; 137
     7e8:	b2 07       	cpc	r27, r18
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <.do_clear_bss_loop>
     7ec:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <main>
     7f0:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <_exit>

000007f4 <__bad_interrupt>:
     7f4:	05 cc       	rjmp	.-2038   	; 0x0 <__vectors>

000007f6 <apply_torque>:
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
   
}

void apply_torque(vector v_m)
{
     7f6:	3f 92       	push	r3
     7f8:	4f 92       	push	r4
     7fa:	5f 92       	push	r5
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	8c 01       	movw	r16, r24
     81a:	ec 01       	movw	r28, r24
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     81c:	31 2c       	mov	r3, r1
	{
		if(fabs(v_m[i]) > M_MAX)
		{
			if (fabs(v_m[i])/v_m[i] == -1)
			v_m[i] = -1*M_MAX;
     81e:	23 e3       	ldi	r18, 0x33	; 51
     820:	42 2e       	mov	r4, r18
     822:	54 2c       	mov	r5, r4
     824:	23 e7       	ldi	r18, 0x73	; 115
     826:	62 2e       	mov	r6, r18
     828:	2f eb       	ldi	r18, 0xBF	; 191
     82a:	72 2e       	mov	r7, r18
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     82c:	88 80       	ld	r8, Y
     82e:	99 80       	ldd	r9, Y+1	; 0x01
     830:	aa 80       	ldd	r10, Y+2	; 0x02
     832:	bb 80       	ldd	r11, Y+3	; 0x03
     834:	75 01       	movw	r14, r10
     836:	64 01       	movw	r12, r8
     838:	e8 94       	clt
     83a:	f7 f8       	bld	r15, 7
     83c:	23 e3       	ldi	r18, 0x33	; 51
     83e:	33 e3       	ldi	r19, 0x33	; 51
     840:	43 e7       	ldi	r20, 0x73	; 115
     842:	5f e3       	ldi	r21, 0x3F	; 63
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
     84c:	18 16       	cp	r1, r24
     84e:	94 f4       	brge	.+36     	; 0x874 <apply_torque+0x7e>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     850:	a5 01       	movw	r20, r10
     852:	94 01       	movw	r18, r8
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e8       	ldi	r20, 0x80	; 128
     862:	5f eb       	ldi	r21, 0xBF	; 191
     864:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
     868:	81 11       	cpse	r24, r1
     86a:	c7 c0       	rjmp	.+398    	; 0x9fa <apply_torque+0x204>
			v_m[i] = -1*M_MAX;
     86c:	48 82       	st	Y, r4
     86e:	59 82       	std	Y+1, r5	; 0x01
     870:	6a 82       	std	Y+2, r6	; 0x02
     872:	7b 82       	std	Y+3, r7	; 0x03
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     874:	33 94       	inc	r3
     876:	24 96       	adiw	r28, 0x04	; 4
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	38 12       	cpse	r3, r24
     87c:	d7 cf       	rjmp	.-82     	; 0x82c <apply_torque+0x36>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));
     87e:	40 ed       	ldi	r20, 0xD0	; 208
     880:	59 ed       	ldi	r21, 0xD9	; 217
     882:	60 ec       	ldi	r22, 0xC0	; 192
     884:	7e e3       	ldi	r23, 0x3E	; 62
     886:	c8 01       	movw	r24, r16
     888:	0e 94 83 19 	call	0x3306	; 0x3306 <scalar_into_vector>
     88c:	e8 01       	movw	r28, r16
	
	
	for(i = 0; i < 3; i++)
     88e:	71 2c       	mov	r7, r1
	{
		if(fabs(v_m[i]) > I_MAX)
     890:	88 80       	ld	r8, Y
     892:	99 80       	ldd	r9, Y+1	; 0x01
     894:	aa 80       	ldd	r10, Y+2	; 0x02
     896:	bb 80       	ldd	r11, Y+3	; 0x03
     898:	75 01       	movw	r14, r10
     89a:	64 01       	movw	r12, r8
     89c:	e8 94       	clt
     89e:	f7 f8       	bld	r15, 7
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e8       	ldi	r20, 0x80	; 128
     8a6:	5f e3       	ldi	r21, 0x3F	; 63
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
     8b0:	18 16       	cp	r1, r24
     8b2:	b4 f4       	brge	.+44     	; 0x8e0 <apply_torque+0xea>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     8b4:	a5 01       	movw	r20, r10
     8b6:	94 01       	movw	r18, r8
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e8       	ldi	r20, 0x80	; 128
     8c6:	5f eb       	ldi	r21, 0xBF	; 191
     8c8:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
     8cc:	81 11       	cpse	r24, r1
     8ce:	8c c0       	rjmp	.+280    	; 0x9e8 <apply_torque+0x1f2>
			v_m[i] = -1*I_MAX;
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	a0 e8       	ldi	r26, 0x80	; 128
     8d6:	bf eb       	ldi	r27, 0xBF	; 191
     8d8:	88 83       	st	Y, r24
     8da:	99 83       	std	Y+1, r25	; 0x01
     8dc:	aa 83       	std	Y+2, r26	; 0x02
     8de:	bb 83       	std	Y+3, r27	; 0x03
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));
	
	
	for(i = 0; i < 3; i++)
     8e0:	73 94       	inc	r7
     8e2:	24 96       	adiw	r28, 0x04	; 4
     8e4:	e3 e0       	ldi	r30, 0x03	; 3
     8e6:	7e 12       	cpse	r7, r30
     8e8:	d3 cf       	rjmp	.-90     	; 0x890 <apply_torque+0x9a>

//Current_state.pwm.x = abs(v_m[0]*65535); //fabs((v_m_D[0] * PWM_RES) / I_MAX)+10000;
// int16_t x1 = Current_state.pwm.x/100;
// if (x1 == 0)
//     Current_state.pwm.x = Current_state.pwm.x + 100;
if(v_m[0]>=0)
     8ea:	f8 01       	movw	r30, r16
     8ec:	c0 80       	ld	r12, Z
     8ee:	d1 80       	ldd	r13, Z+1	; 0x01
     8f0:	e2 80       	ldd	r14, Z+2	; 0x02
     8f2:	f3 80       	ldd	r15, Z+3	; 0x03
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	a9 01       	movw	r20, r18
     8fa:	c7 01       	movw	r24, r14
     8fc:	b6 01       	movw	r22, r12
     8fe:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
Current_state.pwm.x=v_m[0]*65535;
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	3f ef       	ldi	r19, 0xFF	; 255
     906:	4f e7       	ldi	r20, 0x7F	; 127
     908:	57 e4       	ldi	r21, 0x47	; 71

//Current_state.pwm.x = abs(v_m[0]*65535); //fabs((v_m_D[0] * PWM_RES) / I_MAX)+10000;
// int16_t x1 = Current_state.pwm.x/100;
// if (x1 == 0)
//     Current_state.pwm.x = Current_state.pwm.x + 100;
if(v_m[0]>=0)
     90a:	87 fd       	sbrc	r24, 7
     90c:	7f c0       	rjmp	.+254    	; 0xa0c <apply_torque+0x216>
Current_state.pwm.x=v_m[0]*65535;
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
     916:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <__fixunssfsi>
     91a:	70 93 6c 04 	sts	0x046C, r23
     91e:	60 93 6b 04 	sts	0x046B, r22
	else
	sen= 0xf0;   //v_r_ecef[i]
	transmit_UART0(sen);
}*/

Current_state.pwm.y = abs(v_m[1]*65535); //fabs((v_m_D[1] * PWM_RES) / I_MAX)+10000;
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	3f ef       	ldi	r19, 0xFF	; 255
     926:	4f e7       	ldi	r20, 0x7F	; 127
     928:	57 e4       	ldi	r21, 0x47	; 71
     92a:	f8 01       	movw	r30, r16
     92c:	64 81       	ldd	r22, Z+4	; 0x04
     92e:	75 81       	ldd	r23, Z+5	; 0x05
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	97 81       	ldd	r25, Z+7	; 0x07
     934:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
     938:	0e 94 02 26 	call	0x4c04	; 0x4c04 <__fixsfsi>
     93c:	9b 01       	movw	r18, r22
     93e:	77 fd       	sbrc	r23, 7
     940:	7e c0       	rjmp	.+252    	; 0xa3e <apply_torque+0x248>
     942:	30 93 6e 04 	sts	0x046E, r19
     946:	20 93 6d 04 	sts	0x046D, r18
// x1 = Current_state.pwm.y/100;
// if (x1 == 0)
//     Current_state.pwm.y = Current_state.pwm.y + 100;

Current_state.pwm.z = abs(v_m[2]*65535); //fabs((v_m_D[2] * PWM_RES) / I_MAX)+10000;
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	4f e7       	ldi	r20, 0x7F	; 127
     950:	57 e4       	ldi	r21, 0x47	; 71
     952:	f8 01       	movw	r30, r16
     954:	60 85       	ldd	r22, Z+8	; 0x08
     956:	71 85       	ldd	r23, Z+9	; 0x09
     958:	82 85       	ldd	r24, Z+10	; 0x0a
     95a:	93 85       	ldd	r25, Z+11	; 0x0b
     95c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
     960:	0e 94 02 26 	call	0x4c04	; 0x4c04 <__fixsfsi>
     964:	9b 01       	movw	r18, r22
     966:	77 fd       	sbrc	r23, 7
     968:	65 c0       	rjmp	.+202    	; 0xa34 <apply_torque+0x23e>
     96a:	30 93 70 04 	sts	0x0470, r19
     96e:	20 93 6f 04 	sts	0x046F, r18
// x1 = Current_state.pwm.z/100;
// if (x1 == 0)
//     Current_state.pwm.z = Current_state.pwm.z + 100;

if(v_m[0] < 0)
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	a9 01       	movw	r20, r18
     978:	c7 01       	movw	r24, r14
     97a:	b6 01       	movw	r22, r12
     97c:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
     980:	87 fd       	sbrc	r24, 7
     982:	54 c0       	rjmp	.+168    	; 0xa2c <apply_torque+0x236>
Current_state.pwm.x_dir = 1;
else
Current_state.pwm.x_dir = 0;
     984:	10 92 71 04 	sts	0x0471, r1

if(v_m[1] < 0)
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	a9 01       	movw	r20, r18
     98e:	f8 01       	movw	r30, r16
     990:	64 81       	ldd	r22, Z+4	; 0x04
     992:	75 81       	ldd	r23, Z+5	; 0x05
     994:	86 81       	ldd	r24, Z+6	; 0x06
     996:	97 81       	ldd	r25, Z+7	; 0x07
     998:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
     99c:	87 fd       	sbrc	r24, 7
     99e:	42 c0       	rjmp	.+132    	; 0xa24 <apply_torque+0x22e>
Current_state.pwm.y_dir = 1;
else
Current_state.pwm.y_dir = 0;
     9a0:	10 92 72 04 	sts	0x0472, r1

if(v_m[2] < 0)
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	a9 01       	movw	r20, r18
     9aa:	f8 01       	movw	r30, r16
     9ac:	60 85       	ldd	r22, Z+8	; 0x08
     9ae:	71 85       	ldd	r23, Z+9	; 0x09
     9b0:	82 85       	ldd	r24, Z+10	; 0x0a
     9b2:	93 85       	ldd	r25, Z+11	; 0x0b
     9b4:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
     9b8:	87 fd       	sbrc	r24, 7
     9ba:	46 c0       	rjmp	.+140    	; 0xa48 <apply_torque+0x252>
Current_state.pwm.z_dir = 1;
else
Current_state.pwm.z_dir = 0;
     9bc:	10 92 73 04 	sts	0x0473, r1
PORTA=0xA0;
     9c0:	80 ea       	ldi	r24, 0xA0	; 160
     9c2:	8b bb       	out	0x1b, r24	; 27
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	9f 90       	pop	r9
     9da:	8f 90       	pop	r8
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	3f 90       	pop	r3
     9e6:	08 95       	ret
		if(fabs(v_m[i]) > I_MAX)
		{
			if (fabs(v_m[i])/v_m[i] == -1)
			v_m[i] = -1*I_MAX;
			else
			v_m[i] = I_MAX;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	a0 e8       	ldi	r26, 0x80	; 128
     9ee:	bf e3       	ldi	r27, 0x3F	; 63
     9f0:	88 83       	st	Y, r24
     9f2:	99 83       	std	Y+1, r25	; 0x01
     9f4:	aa 83       	std	Y+2, r26	; 0x02
     9f6:	bb 83       	std	Y+3, r27	; 0x03
     9f8:	73 cf       	rjmp	.-282    	; 0x8e0 <apply_torque+0xea>
		if(fabs(v_m[i]) > M_MAX)
		{
			if (fabs(v_m[i])/v_m[i] == -1)
			v_m[i] = -1*M_MAX;
			else
			v_m[i] = M_MAX;
     9fa:	83 e3       	ldi	r24, 0x33	; 51
     9fc:	93 e3       	ldi	r25, 0x33	; 51
     9fe:	a3 e7       	ldi	r26, 0x73	; 115
     a00:	bf e3       	ldi	r27, 0x3F	; 63
     a02:	88 83       	st	Y, r24
     a04:	99 83       	std	Y+1, r25	; 0x01
     a06:	aa 83       	std	Y+2, r26	; 0x02
     a08:	bb 83       	std	Y+3, r27	; 0x03
     a0a:	34 cf       	rjmp	.-408    	; 0x874 <apply_torque+0x7e>
// if (x1 == 0)
//     Current_state.pwm.x = Current_state.pwm.x + 100;
if(v_m[0]>=0)
Current_state.pwm.x=v_m[0]*65535;
else
Current_state.pwm.x=(-1)*v_m[0]*65535;
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	90 58       	subi	r25, 0x80	; 128
     a12:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
     a16:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <__fixunssfsi>
     a1a:	70 93 6c 04 	sts	0x046C, r23
     a1e:	60 93 6b 04 	sts	0x046B, r22
     a22:	7f cf       	rjmp	.-258    	; 0x922 <apply_torque+0x12c>
Current_state.pwm.x_dir = 1;
else
Current_state.pwm.x_dir = 0;

if(v_m[1] < 0)
Current_state.pwm.y_dir = 1;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 72 04 	sts	0x0472, r24
     a2a:	bc cf       	rjmp	.-136    	; 0x9a4 <apply_torque+0x1ae>
// x1 = Current_state.pwm.z/100;
// if (x1 == 0)
//     Current_state.pwm.z = Current_state.pwm.z + 100;

if(v_m[0] < 0)
Current_state.pwm.x_dir = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 71 04 	sts	0x0471, r24
     a32:	aa cf       	rjmp	.-172    	; 0x988 <apply_torque+0x192>
Current_state.pwm.y = abs(v_m[1]*65535); //fabs((v_m_D[1] * PWM_RES) / I_MAX)+10000;
// x1 = Current_state.pwm.y/100;
// if (x1 == 0)
//     Current_state.pwm.y = Current_state.pwm.y + 100;

Current_state.pwm.z = abs(v_m[2]*65535); //fabs((v_m_D[2] * PWM_RES) / I_MAX)+10000;
     a34:	22 27       	eor	r18, r18
     a36:	33 27       	eor	r19, r19
     a38:	26 1b       	sub	r18, r22
     a3a:	37 0b       	sbc	r19, r23
     a3c:	96 cf       	rjmp	.-212    	; 0x96a <apply_torque+0x174>
	else
	sen= 0xf0;   //v_r_ecef[i]
	transmit_UART0(sen);
}*/

Current_state.pwm.y = abs(v_m[1]*65535); //fabs((v_m_D[1] * PWM_RES) / I_MAX)+10000;
     a3e:	22 27       	eor	r18, r18
     a40:	33 27       	eor	r19, r19
     a42:	26 1b       	sub	r18, r22
     a44:	37 0b       	sbc	r19, r23
     a46:	7d cf       	rjmp	.-262    	; 0x942 <apply_torque+0x14c>
Current_state.pwm.y_dir = 1;
else
Current_state.pwm.y_dir = 0;

if(v_m[2] < 0)
Current_state.pwm.z_dir = 1;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	80 93 73 04 	sts	0x0473, r24
     a4e:	b8 cf       	rjmp	.-144    	; 0x9c0 <apply_torque+0x1ca>

00000a50 <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	a4 97       	sbiw	r28, 0x24	; 36
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
  /// Take B readings from Magnetometer, clear torquer first
  //reset_PWM();
  
  //_delay_us(100);
  
  read_MM();
     a68:	0e 94 38 1a 	call	0x3470	; 0x3470 <read_MM>
  
  ///Set the torquer values calculated in the last frame
  //set_PWM();
  uint8_t c1,c2,d;
  c1= (uint8_t)Current_state.pwm.x;
     a6c:	80 91 6b 04 	lds	r24, 0x046B
     a70:	90 91 6c 04 	lds	r25, 0x046C
  c2= (uint8_t)((Current_state.pwm.x)>>8);
     a74:	00 91 6b 04 	lds	r16, 0x046B
     a78:	10 91 6c 04 	lds	r17, 0x046C
  d= Current_state.pwm.x_dir;
     a7c:	00 91 71 04 	lds	r16, 0x0471
  transmit_UART0(c1);
     a80:	99 27       	eor	r25, r25
     a82:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  transmit_UART0(c2);
     a86:	81 2f       	mov	r24, r17
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  transmit_UART0(d);
     a8e:	80 2f       	mov	r24, r16
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  
  c1= (uint8_t)Current_state.pwm.y;
     a96:	80 91 6d 04 	lds	r24, 0x046D
     a9a:	90 91 6e 04 	lds	r25, 0x046E
  c2= (uint8_t)((Current_state.pwm.y)>>8);
     a9e:	00 91 6d 04 	lds	r16, 0x046D
     aa2:	10 91 6e 04 	lds	r17, 0x046E
  d= Current_state.pwm.y_dir;
     aa6:	00 91 72 04 	lds	r16, 0x0472
  transmit_UART0(c1);
     aaa:	99 27       	eor	r25, r25
     aac:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  transmit_UART0(c2);
     ab0:	81 2f       	mov	r24, r17
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  transmit_UART0(d);
     ab8:	80 2f       	mov	r24, r16
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  
  c1= (uint8_t)Current_state.pwm.z;
     ac0:	80 91 6f 04 	lds	r24, 0x046F
     ac4:	90 91 70 04 	lds	r25, 0x0470
  c2= (uint8_t)((Current_state.pwm.z)>>8);
     ac8:	00 91 6f 04 	lds	r16, 0x046F
     acc:	10 91 70 04 	lds	r17, 0x0470
  d= Current_state.pwm.z_dir;
     ad0:	00 91 73 04 	lds	r16, 0x0473
  transmit_UART0(c1);
     ad4:	99 27       	eor	r25, r25
     ad6:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  transmit_UART0(c2);
     ada:	81 2f       	mov	r24, r17
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  transmit_UART0(d);
     ae2:	80 2f       	mov	r24, r16
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
  
  v_B[0] = Current_state.mm.B_x;
     aea:	80 91 58 04 	lds	r24, 0x0458
     aee:	90 91 59 04 	lds	r25, 0x0459
     af2:	a0 91 5a 04 	lds	r26, 0x045A
     af6:	b0 91 5b 04 	lds	r27, 0x045B
     afa:	80 93 7d 01 	sts	0x017D, r24
     afe:	90 93 7e 01 	sts	0x017E, r25
     b02:	a0 93 7f 01 	sts	0x017F, r26
     b06:	b0 93 80 01 	sts	0x0180, r27
  v_B[1] = Current_state.mm.B_y;
     b0a:	80 91 5c 04 	lds	r24, 0x045C
     b0e:	90 91 5d 04 	lds	r25, 0x045D
     b12:	a0 91 5e 04 	lds	r26, 0x045E
     b16:	b0 91 5f 04 	lds	r27, 0x045F
     b1a:	80 93 81 01 	sts	0x0181, r24
     b1e:	90 93 82 01 	sts	0x0182, r25
     b22:	a0 93 83 01 	sts	0x0183, r26
     b26:	b0 93 84 01 	sts	0x0184, r27
  v_B[2] = Current_state.mm.B_z;
     b2a:	80 91 60 04 	lds	r24, 0x0460
     b2e:	90 91 61 04 	lds	r25, 0x0461
     b32:	a0 91 62 04 	lds	r26, 0x0462
     b36:	b0 91 63 04 	lds	r27, 0x0463
     b3a:	80 93 85 01 	sts	0x0185, r24
     b3e:	90 93 86 01 	sts	0x0186, r25
     b42:	a0 93 87 01 	sts	0x0187, r26
     b46:	b0 93 88 01 	sts	0x0188, r27
 // detumbling(v_m_D);
  
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
   uint8_t q= 90;
    transmit_UART0(q);
     b4a:	8a e5       	ldi	r24, 0x5A	; 90
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
    read_GPS();
     b52:	0e 94 34 1a 	call	0x3468	; 0x3468 <read_GPS>
    while(UCSR0B & _BV(RXCIE0));
     b56:	57 99       	sbic	0x0a, 7	; 10
     b58:	fe cf       	rjmp	.-4      	; 0xb56 <control+0x106>
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   
    if(GPS_done == 1)
     b5a:	80 91 06 01 	lds	r24, 0x0106
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	09 f4       	brne	.+2      	; 0xb64 <control+0x114>
     b62:	62 c0       	rjmp	.+196    	; 0xc28 <control+0x1d8>
      copy_gps_reading();  //check
	  
    uint8_t e=100;
    transmit_UART0(e);
     b64:	84 e6       	ldi	r24, 0x64	; 100
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
    read_SS();
     b6c:	0e 94 36 1a 	call	0x346c	; 0x346c <read_SS>
	}
	Current_state.pwm.x ^= 0xffff;
	Current_state.pwm.y ^= 0xffff;
	Current_state.pwm.z ^= 0xffff;*/
    ///////////////////////////////////////////////////////////////////////////////////
    sgp_orbit_propagator();
     b70:	0e 94 2d 1c 	call	0x385a	; 0x385a <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
     b74:	ce 01       	movw	r24, r28
     b76:	0d 96       	adiw	r24, 0x0d	; 13
     b78:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <magnetic_field_estimator>
    
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	31 e0       	ldi	r19, 0x01	; 1
     b88:	41 e6       	ldi	r20, 0x61	; 97
     b8a:	51 e0       	ldi	r21, 0x01	; 1
     b8c:	be 01       	movw	r22, r28
     b8e:	63 5f       	subi	r22, 0xF3	; 243
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	ce 01       	movw	r24, r28
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <quest>
     b9a:	80 93 60 01 	sts	0x0160, r24
    
    omega_estimation(q_o, v_w);
     b9e:	61 e7       	ldi	r22, 0x71	; 113
     ba0:	71 e0       	ldi	r23, 0x01	; 1
     ba2:	81 e6       	ldi	r24, 0x61	; 97
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 3d 21 	call	0x427a	; 0x427a <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
     baa:	60 91 60 01 	lds	r22, 0x0160
     bae:	80 91 00 01 	lds	r24, 0x0100
     bb2:	68 9f       	mul	r22, r24
     bb4:	b0 01       	movw	r22, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	88 27       	eor	r24, r24
     bba:	77 fd       	sbrc	r23, 7
     bbc:	80 95       	com	r24
     bbe:	98 2f       	mov	r25, r24
     bc0:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
     bc4:	ab 01       	movw	r20, r22
     bc6:	bc 01       	movw	r22, r24
     bc8:	81 e7       	ldi	r24, 0x71	; 113
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 83 19 	call	0x3306	; 0x3306 <scalar_into_vector>
 
     
    convert_unit_quaternion(q_o);
     bd0:	81 e6       	ldi	r24, 0x61	; 97
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 0e 1a 	call	0x341c	; 0x341c <convert_unit_quaternion>
     bd8:	01 e6       	ldi	r16, 0x61	; 97
     bda:	11 e0       	ldi	r17, 0x01	; 1
	int8_t sen;
	for (int i=0;i<4;i=i+1)
	{
		sen = ((uint8_t)(q_o[i]*100));
     bdc:	f8 01       	movw	r30, r16
     bde:	61 91       	ld	r22, Z+
     be0:	71 91       	ld	r23, Z+
     be2:	81 91       	ld	r24, Z+
     be4:	91 91       	ld	r25, Z+
     be6:	8f 01       	movw	r16, r30
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	48 ec       	ldi	r20, 0xC8	; 200
     bee:	52 e4       	ldi	r21, 0x42	; 66
     bf0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
     bf4:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <__fixunssfsi>
		transmit_UART0(sen);
     bf8:	86 2f       	mov	r24, r22
     bfa:	99 27       	eor	r25, r25
     bfc:	87 fd       	sbrc	r24, 7
     bfe:	90 95       	com	r25
     c00:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
 
     
    convert_unit_quaternion(q_o);
	int8_t sen;
	for (int i=0;i<4;i=i+1)
     c04:	f1 e0       	ldi	r31, 0x01	; 1
     c06:	01 37       	cpi	r16, 0x71	; 113
     c08:	1f 07       	cpc	r17, r31
     c0a:	41 f7       	brne	.-48     	; 0xbdc <control+0x18c>
  
  if(Mode == DETUMBLING)
    apply_torque(v_m_D);
  
  else if(Mode == NOMINAL)*/
    apply_torque(v_m_N);
     c0c:	ce 01       	movw	r24, r28
     c0e:	49 96       	adiw	r24, 0x19	; 25
     c10:	f2 dd       	rcall	.-1052   	; 0x7f6 <apply_torque>
    
}
     c12:	a4 96       	adiw	r28, 0x24	; 36
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   
    if(GPS_done == 1)
      copy_gps_reading();  //check
     c28:	0e 94 39 1a 	call	0x3472	; 0x3472 <copy_gps_reading>
     c2c:	9b cf       	rjmp	.-202    	; 0xb64 <control+0x114>

00000c2e <get_seconds_since_equinox>:
  now += (uint64_t)seconds;
  return now;
}

void get_seconds_since_equinox(void)
{
     c2e:	2f 92       	push	r2
     c30:	3f 92       	push	r3
     c32:	4f 92       	push	r4
     c34:	5f 92       	push	r5
     c36:	6f 92       	push	r6
     c38:	7f 92       	push	r7
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	29 97       	sbiw	r28, 0x09	; 9
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2015, 3, 20, 22, 45, 0);
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
     c62:	e0 91 2b 04 	lds	r30, 0x042B
     c66:	a0 91 2a 04 	lds	r26, 0x042A
     c6a:	ad 83       	std	Y+5, r26	; 0x05
     c6c:	b0 91 29 04 	lds	r27, 0x0429
     c70:	bf 83       	std	Y+7, r27	; 0x07
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
     c72:	20 90 2e 04 	lds	r2, 0x042E
     c76:	30 90 2f 04 	lds	r3, 0x042F
     c7a:	91 01       	movw	r18, r2
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	03 e0       	ldi	r16, 0x03	; 3
     c8a:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     c8e:	f2 2f       	mov	r31, r18
     c90:	3a 83       	std	Y+2, r19	; 0x02
     c92:	4b 83       	std	Y+3, r20	; 0x03
     c94:	59 87       	std	Y+9, r21	; 0x09
     c96:	6e 83       	std	Y+6, r22	; 0x06
     c98:	b7 2f       	mov	r27, r23
     c9a:	a8 2f       	mov	r26, r24
     c9c:	98 87       	std	Y+8, r25	; 0x08
     c9e:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     ca2:	59 01       	movw	r10, r18
     ca4:	6a 01       	movw	r12, r20
     ca6:	7b 01       	movw	r14, r22
     ca8:	8c 01       	movw	r16, r24
     caa:	2f 2f       	mov	r18, r31
     cac:	3a 81       	ldd	r19, Y+2	; 0x02
     cae:	4b 81       	ldd	r20, Y+3	; 0x03
     cb0:	59 85       	ldd	r21, Y+9	; 0x09
     cb2:	6e 81       	ldd	r22, Y+6	; 0x06
     cb4:	7b 2f       	mov	r23, r27
     cb6:	8a 2f       	mov	r24, r26
     cb8:	98 85       	ldd	r25, Y+8	; 0x08
     cba:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__adddi3>
     cbe:	51 01       	movw	r10, r2
     cc0:	c1 2c       	mov	r12, r1
     cc2:	d1 2c       	mov	r13, r1
     cc4:	e1 2c       	mov	r14, r1
     cc6:	f1 2c       	mov	r15, r1
     cc8:	00 e0       	ldi	r16, 0x00	; 0
     cca:	10 e0       	ldi	r17, 0x00	; 0
     ccc:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__adddi3>
     cd0:	59 01       	movw	r10, r18
     cd2:	6a 01       	movw	r12, r20
     cd4:	7b 01       	movw	r14, r22
     cd6:	f8 2f       	mov	r31, r24
     cd8:	19 2f       	mov	r17, r25
     cda:	04 e0       	ldi	r16, 0x04	; 4
     cdc:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     ce0:	0f 2f       	mov	r16, r31
     ce2:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     ce6:	59 01       	movw	r10, r18
     ce8:	6a 01       	movw	r12, r20
     cea:	7b 01       	movw	r14, r22
     cec:	f8 2f       	mov	r31, r24
     cee:	19 2f       	mov	r17, r25
     cf0:	04 e0       	ldi	r16, 0x04	; 4
     cf2:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     cf6:	0f 2f       	mov	r16, r31
     cf8:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     cfc:	59 01       	movw	r10, r18
     cfe:	6a 01       	movw	r12, r20
     d00:	7b 01       	movw	r14, r22
     d02:	f8 2f       	mov	r31, r24
     d04:	19 2f       	mov	r17, r25
     d06:	04 e0       	ldi	r16, 0x04	; 4
     d08:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     d0c:	0f 2f       	mov	r16, r31
     d0e:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     d12:	07 e0       	ldi	r16, 0x07	; 7
     d14:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     d18:	59 01       	movw	r10, r18
     d1a:	6a 01       	movw	r12, r20
     d1c:	7b 01       	movw	r14, r22
     d1e:	8c 01       	movw	r16, r24
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
     d20:	f0 91 2c 04 	lds	r31, 0x042C
     d24:	f8 87       	std	Y+8, r31	; 0x08
     d26:	a0 91 2d 04 	lds	r26, 0x042D
     d2a:	a2 50       	subi	r26, 0x02	; 2
     d2c:	ab 30       	cpi	r26, 0x0B	; 11
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <get_seconds_since_equinox+0x104>
     d30:	1b c1       	rjmp	.+566    	; 0xf68 <get_seconds_since_equinox+0x33a>
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	aa 0f       	add	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	aa 0f       	add	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	aa 0f       	add	r26, r26
     d3e:	bb 1f       	adc	r27, r27
     d40:	a8 5f       	subi	r26, 0xF8	; 248
     d42:	be 4f       	sbci	r27, 0xFE	; 254
     d44:	5c 90       	ld	r5, X
     d46:	11 96       	adiw	r26, 0x01	; 1
     d48:	4c 90       	ld	r4, X
     d4a:	11 97       	sbiw	r26, 0x01	; 1
     d4c:	12 96       	adiw	r26, 0x02	; 2
     d4e:	3c 90       	ld	r3, X
     d50:	12 97       	sbiw	r26, 0x02	; 2
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	2c 90       	ld	r2, X
     d56:	13 97       	sbiw	r26, 0x03	; 3
     d58:	14 96       	adiw	r26, 0x04	; 4
     d5a:	2c 91       	ld	r18, X
     d5c:	14 97       	sbiw	r26, 0x04	; 4
     d5e:	29 83       	std	Y+1, r18	; 0x01
     d60:	15 96       	adiw	r26, 0x05	; 5
     d62:	8c 91       	ld	r24, X
     d64:	15 97       	sbiw	r26, 0x05	; 5
     d66:	8a 83       	std	Y+2, r24	; 0x02
     d68:	16 96       	adiw	r26, 0x06	; 6
     d6a:	fc 91       	ld	r31, X
     d6c:	16 97       	sbiw	r26, 0x06	; 6
     d6e:	fb 83       	std	Y+3, r31	; 0x03
     d70:	17 96       	adiw	r26, 0x07	; 7
     d72:	2c 91       	ld	r18, X
     d74:	2e 83       	std	Y+6, r18	; 0x06
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
     d76:	2e 2f       	mov	r18, r30
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	20 58       	subi	r18, 0x80	; 128
     d88:	3c 45       	sbci	r19, 0x5C	; 92
     d8a:	44 49       	sbci	r20, 0x94	; 148
     d8c:	5b 4c       	sbci	r21, 0xCB	; 203
     d8e:	6e 40       	sbci	r22, 0x0E	; 14
     d90:	71 09       	sbc	r23, r1
     d92:	81 09       	sbc	r24, r1
     d94:	91 09       	sbc	r25, r1
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
     d96:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__adddi3>
     d9a:	39 01       	movw	r6, r18
     d9c:	4a 01       	movw	r8, r20
     d9e:	6c 83       	std	Y+4, r22	; 0x04
     da0:	b7 2f       	mov	r27, r23
     da2:	a8 2f       	mov	r26, r24
     da4:	f9 2f       	mov	r31, r25
  now += ((uint64_t)hours) * 60 * 60;
     da6:	2f 81       	ldd	r18, Y+7	; 0x07
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	04 e0       	ldi	r16, 0x04	; 4
     db8:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     dbc:	af 80       	ldd	r10, Y+7	; 0x07
     dbe:	b1 2c       	mov	r11, r1
     dc0:	c1 2c       	mov	r12, r1
     dc2:	d1 2c       	mov	r13, r1
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	00 e0       	ldi	r16, 0x00	; 0
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     dd0:	59 01       	movw	r10, r18
     dd2:	6a 01       	movw	r12, r20
     dd4:	7b 01       	movw	r14, r22
     dd6:	e8 2f       	mov	r30, r24
     dd8:	19 2f       	mov	r17, r25
     dda:	04 e0       	ldi	r16, 0x04	; 4
     ddc:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     de0:	0e 2f       	mov	r16, r30
     de2:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     de6:	04 e0       	ldi	r16, 0x04	; 4
     de8:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     dec:	59 01       	movw	r10, r18
     dee:	6a 01       	movw	r12, r20
     df0:	7b 01       	movw	r14, r22
     df2:	8c 01       	movw	r16, r24
     df4:	93 01       	movw	r18, r6
     df6:	a4 01       	movw	r20, r8
     df8:	6c 81       	ldd	r22, Y+4	; 0x04
     dfa:	7b 2f       	mov	r23, r27
     dfc:	8a 2f       	mov	r24, r26
     dfe:	9f 2f       	mov	r25, r31
     e00:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__adddi3>
     e04:	b2 2e       	mov	r11, r18
     e06:	c3 2e       	mov	r12, r19
     e08:	d4 2e       	mov	r13, r20
     e0a:	65 2e       	mov	r6, r21
     e0c:	76 2e       	mov	r7, r22
     e0e:	87 2e       	mov	r8, r23
     e10:	98 2e       	mov	r9, r24
     e12:	9c 83       	std	Y+4, r25	; 0x04
  now += ((uint64_t)minutes) * 60;
     e14:	ad 81       	ldd	r26, Y+5	; 0x05
     e16:	6a 2f       	mov	r22, r26
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	2c e3       	ldi	r18, 0x3C	; 60
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	0e 94 a6 29 	call	0x534c	; 0x534c <__umulsidi3>
     e2a:	a2 2e       	mov	r10, r18
     e2c:	a3 2f       	mov	r26, r19
     e2e:	f4 2f       	mov	r31, r20
     e30:	e5 2f       	mov	r30, r21
     e32:	7b 01       	movw	r14, r22
     e34:	8c 01       	movw	r16, r24
     e36:	2b 2d       	mov	r18, r11
     e38:	3c 2d       	mov	r19, r12
     e3a:	4d 2d       	mov	r20, r13
     e3c:	56 2d       	mov	r21, r6
     e3e:	67 2d       	mov	r22, r7
     e40:	78 2d       	mov	r23, r8
     e42:	89 2d       	mov	r24, r9
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	ba 2e       	mov	r11, r26
     e48:	cf 2e       	mov	r12, r31
     e4a:	de 2e       	mov	r13, r30
     e4c:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__adddi3>
     e50:	39 01       	movw	r6, r18
     e52:	4a 01       	movw	r8, r20
     e54:	b6 2f       	mov	r27, r22
     e56:	7c 83       	std	Y+4, r23	; 0x04
     e58:	f8 2f       	mov	r31, r24
     e5a:	e9 2f       	mov	r30, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
     e5c:	28 85       	ldd	r18, Y+8	; 0x08
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	af ef       	ldi	r26, 0xFF	; 255
     e6e:	0e 94 ef 29 	call	0x53de	; 0x53de <__adddi3_s8>
     e72:	a5 2c       	mov	r10, r5
     e74:	b4 2c       	mov	r11, r4
     e76:	c3 2c       	mov	r12, r3
     e78:	d2 2c       	mov	r13, r2
     e7a:	e9 80       	ldd	r14, Y+1	; 0x01
     e7c:	fa 80       	ldd	r15, Y+2	; 0x02
     e7e:	0b 81       	ldd	r16, Y+3	; 0x03
     e80:	1e 81       	ldd	r17, Y+6	; 0x06
     e82:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__adddi3>
     e86:	59 01       	movw	r10, r18
     e88:	6a 01       	movw	r12, r20
     e8a:	7b 01       	movw	r14, r22
     e8c:	a8 2f       	mov	r26, r24
     e8e:	19 2f       	mov	r17, r25
     e90:	02 e0       	ldi	r16, 0x02	; 2
     e92:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     e96:	0a 2f       	mov	r16, r26
     e98:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     e9c:	59 01       	movw	r10, r18
     e9e:	6a 01       	movw	r12, r20
     ea0:	7b 01       	movw	r14, r22
     ea2:	a8 2f       	mov	r26, r24
     ea4:	19 2f       	mov	r17, r25
     ea6:	04 e0       	ldi	r16, 0x04	; 4
     ea8:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     eac:	0a 2f       	mov	r16, r26
     eae:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     eb2:	59 01       	movw	r10, r18
     eb4:	6a 01       	movw	r12, r20
     eb6:	7b 01       	movw	r14, r22
     eb8:	a8 2f       	mov	r26, r24
     eba:	19 2f       	mov	r17, r25
     ebc:	04 e0       	ldi	r16, 0x04	; 4
     ebe:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     ec2:	0a 2f       	mov	r16, r26
     ec4:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__subdi3>
     ec8:	07 e0       	ldi	r16, 0x07	; 7
     eca:	0e 94 cd 29 	call	0x539a	; 0x539a <__ashldi3>
     ece:	59 01       	movw	r10, r18
     ed0:	6a 01       	movw	r12, r20
     ed2:	7b 01       	movw	r14, r22
     ed4:	8c 01       	movw	r16, r24
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
     ed6:	93 01       	movw	r18, r6
     ed8:	a4 01       	movw	r20, r8
     eda:	6b 2f       	mov	r22, r27
     edc:	7c 81       	ldd	r23, Y+4	; 0x04
     ede:	8f 2f       	mov	r24, r31
     ee0:	9e 2f       	mov	r25, r30
     ee2:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__adddi3>
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2015, 3, 20, 22, 45, 0);
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
     ee6:	20 93 f5 03 	sts	0x03F5, r18
     eea:	30 93 f6 03 	sts	0x03F6, r19
     eee:	40 93 f7 03 	sts	0x03F7, r20
     ef2:	50 93 f8 03 	sts	0x03F8, r21
     ef6:	60 93 f9 03 	sts	0x03F9, r22
     efa:	70 93 fa 03 	sts	0x03FA, r23
     efe:	80 93 fb 03 	sts	0x03FB, r24
     f02:	90 93 fc 03 	sts	0x03FC, r25
  
  seconds_since_equinox = seconds_since_pivot - equinox;
     f06:	2c 5e       	subi	r18, 0xEC	; 236
     f08:	34 41       	sbci	r19, 0x14	; 20
     f0a:	48 46       	sbci	r20, 0x68	; 104
     f0c:	51 09       	sbc	r21, r1
     f0e:	61 09       	sbc	r22, r1
     f10:	71 09       	sbc	r23, r1
     f12:	81 09       	sbc	r24, r1
     f14:	91 09       	sbc	r25, r1
     f16:	20 93 fd 03 	sts	0x03FD, r18
     f1a:	30 93 fe 03 	sts	0x03FE, r19
     f1e:	40 93 ff 03 	sts	0x03FF, r20
     f22:	50 93 00 04 	sts	0x0400, r21
     f26:	60 93 01 04 	sts	0x0401, r22
     f2a:	70 93 02 04 	sts	0x0402, r23
     f2e:	80 93 03 04 	sts	0x0403, r24
     f32:	90 93 04 04 	sts	0x0404, r25
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
     f36:	29 96       	adiw	r28, 0x09	; 9
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	7f 90       	pop	r7
     f5c:	6f 90       	pop	r6
     f5e:	5f 90       	pop	r5
     f60:	4f 90       	pop	r4
     f62:	3f 90       	pop	r3
     f64:	2f 90       	pop	r2
     f66:	08 95       	ret
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
     f68:	51 2c       	mov	r5, r1
     f6a:	41 2c       	mov	r4, r1
     f6c:	31 2c       	mov	r3, r1
     f6e:	21 2c       	mov	r2, r1
     f70:	19 82       	std	Y+1, r1	; 0x01
     f72:	1a 82       	std	Y+2, r1	; 0x02
     f74:	1b 82       	std	Y+3, r1	; 0x03
     f76:	1e 82       	std	Y+6, r1	; 0x06
     f78:	fe ce       	rjmp	.-516    	; 0xd76 <get_seconds_since_equinox+0x148>

00000f7a <ecef2eci>:
  }*/
  
}

void ecef2eci(vector v_ecef, vector v_eci)
{
     f7a:	4f 92       	push	r4
     f7c:	5f 92       	push	r5
     f7e:	6f 92       	push	r6
     f80:	7f 92       	push	r7
     f82:	af 92       	push	r10
     f84:	bf 92       	push	r11
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	a4 97       	sbiw	r28, 0x24	; 36
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	8c 01       	movw	r16, r24
     fa8:	5b 01       	movw	r10, r22
  float sidereal_time = STPERUT * seconds_since_equinox;
     faa:	20 91 fd 03 	lds	r18, 0x03FD
     fae:	30 91 fe 03 	lds	r19, 0x03FE
     fb2:	40 91 ff 03 	lds	r20, 0x03FF
     fb6:	50 91 00 04 	lds	r21, 0x0400
     fba:	60 91 01 04 	lds	r22, 0x0401
     fbe:	70 91 02 04 	lds	r23, 0x0402
     fc2:	80 91 03 04 	lds	r24, 0x0403
     fc6:	90 91 04 04 	lds	r25, 0x0404
     fca:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <__floatundisf>
     fce:	27 eb       	ldi	r18, 0xB7	; 183
     fd0:	39 e5       	ldi	r19, 0x59	; 89
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
  float phi = W_EARTH_ROT * sidereal_time;
     fda:	2e eb       	ldi	r18, 0xBE	; 190
     fdc:	37 ef       	ldi	r19, 0xF7	; 247
     fde:	48 e9       	ldi	r20, 0x98	; 152
     fe0:	58 e3       	ldi	r21, 0x38	; 56
     fe2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
     fe6:	2b 01       	movw	r4, r22
     fe8:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
     fea:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
     fee:	6b 01       	movw	r12, r22
     ff0:	7c 01       	movw	r14, r24
     ff2:	69 83       	std	Y+1, r22	; 0x01
     ff4:	7a 83       	std	Y+2, r23	; 0x02
     ff6:	8b 83       	std	Y+3, r24	; 0x03
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	c3 01       	movw	r24, r6
     ffc:	b2 01       	movw	r22, r4
     ffe:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    1002:	6d 83       	std	Y+5, r22	; 0x05
    1004:	7e 83       	std	Y+6, r23	; 0x06
    1006:	8f 83       	std	Y+7, r24	; 0x07
    1008:	98 87       	std	Y+8, r25	; 0x08
    100a:	19 86       	std	Y+9, r1	; 0x09
    100c:	1a 86       	std	Y+10, r1	; 0x0a
    100e:	1b 86       	std	Y+11, r1	; 0x0b
    1010:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	b0 58       	subi	r27, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  float sidereal_time = STPERUT * seconds_since_equinox;
  float phi = W_EARTH_ROT * sidereal_time;
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1018:	8d 87       	std	Y+13, r24	; 0x0d
    101a:	9e 87       	std	Y+14, r25	; 0x0e
    101c:	af 87       	std	Y+15, r26	; 0x0f
    101e:	b8 8b       	std	Y+16, r27	; 0x10
    1020:	c9 8a       	std	Y+17, r12	; 0x11
    1022:	da 8a       	std	Y+18, r13	; 0x12
    1024:	eb 8a       	std	Y+19, r14	; 0x13
    1026:	fc 8a       	std	Y+20, r15	; 0x14
    1028:	1d 8a       	std	Y+21, r1	; 0x15
    102a:	1e 8a       	std	Y+22, r1	; 0x16
    102c:	1f 8a       	std	Y+23, r1	; 0x17
    102e:	18 8e       	std	Y+24, r1	; 0x18
    1030:	19 8e       	std	Y+25, r1	; 0x19
    1032:	1a 8e       	std	Y+26, r1	; 0x1a
    1034:	1b 8e       	std	Y+27, r1	; 0x1b
    1036:	1c 8e       	std	Y+28, r1	; 0x1c
    1038:	1d 8e       	std	Y+29, r1	; 0x1d
    103a:	1e 8e       	std	Y+30, r1	; 0x1e
    103c:	1f 8e       	std	Y+31, r1	; 0x1f
    103e:	18 a2       	std	Y+32, r1	; 0x20
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e8       	ldi	r26, 0x80	; 128
    1046:	bf e3       	ldi	r27, 0x3F	; 63
    1048:	89 a3       	std	Y+33, r24	; 0x21
    104a:	9a a3       	std	Y+34, r25	; 0x22
    104c:	ab a3       	std	Y+35, r26	; 0x23
    104e:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1050:	a5 01       	movw	r20, r10
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	c8 01       	movw	r24, r16
    105a:	0e 94 a3 18 	call	0x3146	; 0x3146 <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    105e:	a4 96       	adiw	r28, 0x24	; 36
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	bf 90       	pop	r11
    107c:	af 90       	pop	r10
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	4f 90       	pop	r4
    1086:	08 95       	ret

00001088 <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1088:	4f 92       	push	r4
    108a:	5f 92       	push	r5
    108c:	6f 92       	push	r6
    108e:	7f 92       	push	r7
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	a4 97       	sbiw	r28, 0x24	; 36
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	8c 01       	movw	r16, r24
    10b6:	5b 01       	movw	r10, r22
  float sidereal_time = STPERUT * seconds_since_equinox;
    10b8:	20 91 fd 03 	lds	r18, 0x03FD
    10bc:	30 91 fe 03 	lds	r19, 0x03FE
    10c0:	40 91 ff 03 	lds	r20, 0x03FF
    10c4:	50 91 00 04 	lds	r21, 0x0400
    10c8:	60 91 01 04 	lds	r22, 0x0401
    10cc:	70 91 02 04 	lds	r23, 0x0402
    10d0:	80 91 03 04 	lds	r24, 0x0403
    10d4:	90 91 04 04 	lds	r25, 0x0404
    10d8:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <__floatundisf>
    10dc:	27 eb       	ldi	r18, 0xB7	; 183
    10de:	39 e5       	ldi	r19, 0x59	; 89
    10e0:	40 e8       	ldi	r20, 0x80	; 128
    10e2:	5f e3       	ldi	r21, 0x3F	; 63
    10e4:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
  float phi = W_EARTH_ROT * sidereal_time;
    10e8:	2e eb       	ldi	r18, 0xBE	; 190
    10ea:	37 ef       	ldi	r19, 0xF7	; 247
    10ec:	48 e9       	ldi	r20, 0x98	; 152
    10ee:	58 e3       	ldi	r21, 0x38	; 56
    10f0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    10f4:	2b 01       	movw	r4, r22
    10f6:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    10f8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	69 83       	std	Y+1, r22	; 0x01
    1102:	7a 83       	std	Y+2, r23	; 0x02
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	c3 01       	movw	r24, r6
    110a:	b2 01       	movw	r22, r4
    110c:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    1110:	2b 01       	movw	r4, r22
    1112:	3c 01       	movw	r6, r24
    1114:	77 fa       	bst	r7, 7
    1116:	70 94       	com	r7
    1118:	77 f8       	bld	r7, 7
    111a:	70 94       	com	r7
    111c:	4d 82       	std	Y+5, r4	; 0x05
    111e:	5e 82       	std	Y+6, r5	; 0x06
    1120:	6f 82       	std	Y+7, r6	; 0x07
    1122:	78 86       	std	Y+8, r7	; 0x08
    1124:	19 86       	std	Y+9, r1	; 0x09
    1126:	1a 86       	std	Y+10, r1	; 0x0a
    1128:	1b 86       	std	Y+11, r1	; 0x0b
    112a:	1c 86       	std	Y+12, r1	; 0x0c
    112c:	6d 87       	std	Y+13, r22	; 0x0d
    112e:	7e 87       	std	Y+14, r23	; 0x0e
    1130:	8f 87       	std	Y+15, r24	; 0x0f
    1132:	98 8b       	std	Y+16, r25	; 0x10
    1134:	c9 8a       	std	Y+17, r12	; 0x11
    1136:	da 8a       	std	Y+18, r13	; 0x12
    1138:	eb 8a       	std	Y+19, r14	; 0x13
    113a:	fc 8a       	std	Y+20, r15	; 0x14
    113c:	1d 8a       	std	Y+21, r1	; 0x15
    113e:	1e 8a       	std	Y+22, r1	; 0x16
    1140:	1f 8a       	std	Y+23, r1	; 0x17
    1142:	18 8e       	std	Y+24, r1	; 0x18
    1144:	19 8e       	std	Y+25, r1	; 0x19
    1146:	1a 8e       	std	Y+26, r1	; 0x1a
    1148:	1b 8e       	std	Y+27, r1	; 0x1b
    114a:	1c 8e       	std	Y+28, r1	; 0x1c
    114c:	1d 8e       	std	Y+29, r1	; 0x1d
    114e:	1e 8e       	std	Y+30, r1	; 0x1e
    1150:	1f 8e       	std	Y+31, r1	; 0x1f
    1152:	18 a2       	std	Y+32, r1	; 0x20
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a0 e8       	ldi	r26, 0x80	; 128
    115a:	bf e3       	ldi	r27, 0x3F	; 63
    115c:	89 a3       	std	Y+33, r24	; 0x21
    115e:	9a a3       	std	Y+34, r25	; 0x22
    1160:	ab a3       	std	Y+35, r26	; 0x23
    1162:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1164:	a5 01       	movw	r20, r10
    1166:	be 01       	movw	r22, r28
    1168:	6f 5f       	subi	r22, 0xFF	; 255
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	c8 01       	movw	r24, r16
    116e:	0e 94 a3 18 	call	0x3146	; 0x3146 <vector_into_matrix>
}
    1172:	a4 96       	adiw	r28, 0x24	; 36
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	af 90       	pop	r10
    1192:	7f 90       	pop	r7
    1194:	6f 90       	pop	r6
    1196:	5f 90       	pop	r5
    1198:	4f 90       	pop	r4
    119a:	08 95       	ret

0000119c <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	c8 54       	subi	r28, 0x48	; 72
    11b2:	d1 09       	sbc	r29, r1
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	8c 01       	movw	r16, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	7a 01       	movw	r14, r20
    11c4:	69 01       	movw	r12, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    11c6:	ae 01       	movw	r20, r28
    11c8:	4f 5c       	subi	r20, 0xCF	; 207
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	b8 01       	movw	r22, r16
    11ce:	0e 94 02 19 	call	0x3204	; 0x3204 <vector_cross_product>
  convert_unit_vector(v_o_y);
    11d2:	ce 01       	movw	r24, r28
    11d4:	c1 96       	adiw	r24, 0x31	; 49
    11d6:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    11da:	f8 01       	movw	r30, r16
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	a2 81       	ldd	r26, Z+2	; 0x02
    11e2:	b3 81       	ldd	r27, Z+3	; 0x03
    11e4:	b0 58       	subi	r27, 0x80	; 128
    11e6:	8d a3       	std	Y+37, r24	; 0x25
    11e8:	9e a3       	std	Y+38, r25	; 0x26
    11ea:	af a3       	std	Y+39, r26	; 0x27
    11ec:	b8 a7       	std	Y+40, r27	; 0x28
    11ee:	44 81       	ldd	r20, Z+4	; 0x04
    11f0:	55 81       	ldd	r21, Z+5	; 0x05
    11f2:	66 81       	ldd	r22, Z+6	; 0x06
    11f4:	77 81       	ldd	r23, Z+7	; 0x07
    11f6:	70 58       	subi	r23, 0x80	; 128
    11f8:	49 a7       	std	Y+41, r20	; 0x29
    11fa:	5a a7       	std	Y+42, r21	; 0x2a
    11fc:	6b a7       	std	Y+43, r22	; 0x2b
    11fe:	7c a7       	std	Y+44, r23	; 0x2c
    1200:	80 85       	ldd	r24, Z+8	; 0x08
    1202:	91 85       	ldd	r25, Z+9	; 0x09
    1204:	a2 85       	ldd	r26, Z+10	; 0x0a
    1206:	b3 85       	ldd	r27, Z+11	; 0x0b
    1208:	b0 58       	subi	r27, 0x80	; 128
    120a:	8d a7       	std	Y+45, r24	; 0x2d
    120c:	9e a7       	std	Y+46, r25	; 0x2e
    120e:	af a7       	std	Y+47, r26	; 0x2f
    1210:	b8 ab       	std	Y+48, r27	; 0x30
  convert_unit_vector(v_o_z);
    1212:	ce 01       	movw	r24, r28
    1214:	85 96       	adiw	r24, 0x25	; 37
    1216:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    121a:	ae 01       	movw	r20, r28
    121c:	43 5c       	subi	r20, 0xC3	; 195
    121e:	5f 4f       	sbci	r21, 0xFF	; 255
    1220:	be 01       	movw	r22, r28
    1222:	6b 5d       	subi	r22, 0xDB	; 219
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	ce 01       	movw	r24, r28
    1228:	c1 96       	adiw	r24, 0x31	; 49
    122a:	0e 94 02 19 	call	0x3204	; 0x3204 <vector_cross_product>
  convert_unit_vector(v_o_x);
    122e:	ce 01       	movw	r24, r28
    1230:	cd 96       	adiw	r24, 0x3d	; 61
    1232:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1236:	21 96       	adiw	r28, 0x01	; 1
    1238:	8c ad       	ldd	r24, Y+60	; 0x3c
    123a:	9d ad       	ldd	r25, Y+61	; 0x3d
    123c:	ae ad       	ldd	r26, Y+62	; 0x3e
    123e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1240:	21 97       	sbiw	r28, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	ab 83       	std	Y+3, r26	; 0x03
    1248:	bc 83       	std	Y+4, r27	; 0x04
    124a:	89 a9       	ldd	r24, Y+49	; 0x31
    124c:	9a a9       	ldd	r25, Y+50	; 0x32
    124e:	ab a9       	ldd	r26, Y+51	; 0x33
    1250:	bc a9       	ldd	r27, Y+52	; 0x34
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	af 83       	std	Y+7, r26	; 0x07
    1258:	b8 87       	std	Y+8, r27	; 0x08
    125a:	8d a1       	ldd	r24, Y+37	; 0x25
    125c:	9e a1       	ldd	r25, Y+38	; 0x26
    125e:	af a1       	ldd	r26, Y+39	; 0x27
    1260:	b8 a5       	ldd	r27, Y+40	; 0x28
    1262:	89 87       	std	Y+9, r24	; 0x09
    1264:	9a 87       	std	Y+10, r25	; 0x0a
    1266:	ab 87       	std	Y+11, r26	; 0x0b
    1268:	bc 87       	std	Y+12, r27	; 0x0c
    126a:	25 96       	adiw	r28, 0x05	; 5
    126c:	8c ad       	ldd	r24, Y+60	; 0x3c
    126e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1270:	ae ad       	ldd	r26, Y+62	; 0x3e
    1272:	bf ad       	ldd	r27, Y+63	; 0x3f
    1274:	25 97       	sbiw	r28, 0x05	; 5
    1276:	8d 87       	std	Y+13, r24	; 0x0d
    1278:	9e 87       	std	Y+14, r25	; 0x0e
    127a:	af 87       	std	Y+15, r26	; 0x0f
    127c:	b8 8b       	std	Y+16, r27	; 0x10
    127e:	8d a9       	ldd	r24, Y+53	; 0x35
    1280:	9e a9       	ldd	r25, Y+54	; 0x36
    1282:	af a9       	ldd	r26, Y+55	; 0x37
    1284:	b8 ad       	ldd	r27, Y+56	; 0x38
    1286:	89 8b       	std	Y+17, r24	; 0x11
    1288:	9a 8b       	std	Y+18, r25	; 0x12
    128a:	ab 8b       	std	Y+19, r26	; 0x13
    128c:	bc 8b       	std	Y+20, r27	; 0x14
    128e:	89 a5       	ldd	r24, Y+41	; 0x29
    1290:	9a a5       	ldd	r25, Y+42	; 0x2a
    1292:	ab a5       	ldd	r26, Y+43	; 0x2b
    1294:	bc a5       	ldd	r27, Y+44	; 0x2c
    1296:	8d 8b       	std	Y+21, r24	; 0x15
    1298:	9e 8b       	std	Y+22, r25	; 0x16
    129a:	af 8b       	std	Y+23, r26	; 0x17
    129c:	b8 8f       	std	Y+24, r27	; 0x18
    129e:	29 96       	adiw	r28, 0x09	; 9
    12a0:	8c ad       	ldd	r24, Y+60	; 0x3c
    12a2:	9d ad       	ldd	r25, Y+61	; 0x3d
    12a4:	ae ad       	ldd	r26, Y+62	; 0x3e
    12a6:	bf ad       	ldd	r27, Y+63	; 0x3f
    12a8:	29 97       	sbiw	r28, 0x09	; 9
    12aa:	89 8f       	std	Y+25, r24	; 0x19
    12ac:	9a 8f       	std	Y+26, r25	; 0x1a
    12ae:	ab 8f       	std	Y+27, r26	; 0x1b
    12b0:	bc 8f       	std	Y+28, r27	; 0x1c
    12b2:	89 ad       	ldd	r24, Y+57	; 0x39
    12b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    12b6:	ab ad       	ldd	r26, Y+59	; 0x3b
    12b8:	bc ad       	ldd	r27, Y+60	; 0x3c
    12ba:	8d 8f       	std	Y+29, r24	; 0x1d
    12bc:	9e 8f       	std	Y+30, r25	; 0x1e
    12be:	af 8f       	std	Y+31, r26	; 0x1f
    12c0:	b8 a3       	std	Y+32, r27	; 0x20
    12c2:	0d a5       	ldd	r16, Y+45	; 0x2d
    12c4:	1e a5       	ldd	r17, Y+46	; 0x2e
    12c6:	2f a5       	ldd	r18, Y+47	; 0x2f
    12c8:	38 a9       	ldd	r19, Y+48	; 0x30
    12ca:	09 a3       	std	Y+33, r16	; 0x21
    12cc:	1a a3       	std	Y+34, r17	; 0x22
    12ce:	2b a3       	std	Y+35, r18	; 0x23
    12d0:	3c a3       	std	Y+36, r19	; 0x24
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    12d2:	a6 01       	movw	r20, r12
    12d4:	be 01       	movw	r22, r28
    12d6:	6f 5f       	subi	r22, 0xFF	; 255
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	c7 01       	movw	r24, r14
    12dc:	0e 94 a3 18 	call	0x3146	; 0x3146 <vector_into_matrix>
}
    12e0:	c8 5b       	subi	r28, 0xB8	; 184
    12e2:	df 4f       	sbci	r29, 0xFF	; 255
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	08 95       	ret

00001300 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    1300:	2f 92       	push	r2
    1302:	3f 92       	push	r3
    1304:	4f 92       	push	r4
    1306:	5f 92       	push	r5
    1308:	6f 92       	push	r6
    130a:	7f 92       	push	r7
    130c:	8f 92       	push	r8
    130e:	9f 92       	push	r9
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	60 97       	sbiw	r28, 0x10	; 16
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	1b 01       	movw	r2, r22
  float x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];
    1334:	dc 01       	movw	r26, r24
    1336:	8d 90       	ld	r8, X+
    1338:	9d 90       	ld	r9, X+
    133a:	ad 90       	ld	r10, X+
    133c:	bc 90       	ld	r11, X
    133e:	13 97       	sbiw	r26, 0x03	; 3
    1340:	14 96       	adiw	r26, 0x04	; 4
    1342:	cd 90       	ld	r12, X+
    1344:	dd 90       	ld	r13, X+
    1346:	ed 90       	ld	r14, X+
    1348:	fc 90       	ld	r15, X
    134a:	17 97       	sbiw	r26, 0x07	; 7
    134c:	18 96       	adiw	r26, 0x08	; 8
    134e:	8d 91       	ld	r24, X+
    1350:	9d 91       	ld	r25, X+
    1352:	0d 90       	ld	r0, X+
    1354:	bc 91       	ld	r27, X
    1356:	a0 2d       	mov	r26, r0
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	af 83       	std	Y+7, r26	; 0x07
    135e:	b8 87       	std	Y+8, r27	; 0x08
  float lambda, phi, h, rho, beta, n, sinphi;
  uint8_t i;
  
  lambda = atan2(y, x);
    1360:	a5 01       	movw	r20, r10
    1362:	94 01       	movw	r18, r8
    1364:	c7 01       	movw	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	0e 94 40 25 	call	0x4a80	; 0x4a80 <atan2>
    136c:	6d 87       	std	Y+13, r22	; 0x0d
    136e:	7e 87       	std	Y+14, r23	; 0x0e
    1370:	8f 87       	std	Y+15, r24	; 0x0f
    1372:	98 8b       	std	Y+16, r25	; 0x10
  rho = sqrt(x * x + y * y);
    1374:	a5 01       	movw	r20, r10
    1376:	94 01       	movw	r18, r8
    1378:	c5 01       	movw	r24, r10
    137a:	b4 01       	movw	r22, r8
    137c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1380:	4b 01       	movw	r8, r22
    1382:	5c 01       	movw	r10, r24
    1384:	a7 01       	movw	r20, r14
    1386:	96 01       	movw	r18, r12
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	c5 01       	movw	r24, r10
    1396:	b4 01       	movw	r22, r8
    1398:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    139c:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    13a0:	69 87       	std	Y+9, r22	; 0x09
    13a2:	7a 87       	std	Y+10, r23	; 0x0a
    13a4:	8b 87       	std	Y+11, r24	; 0x0b
    13a6:	9c 87       	std	Y+12, r25	; 0x0c
  
  beta = atan2(z, (1 - F) * rho);
    13a8:	25 e4       	ldi	r18, 0x45	; 69
    13aa:	34 e2       	ldi	r19, 0x24	; 36
    13ac:	4f e7       	ldi	r20, 0x7F	; 127
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	6d 81       	ldd	r22, Y+5	; 0x05
    13ba:	7e 81       	ldd	r23, Y+6	; 0x06
    13bc:	8f 81       	ldd	r24, Y+7	; 0x07
    13be:	98 85       	ldd	r25, Y+8	; 0x08
    13c0:	0e 94 40 25 	call	0x4a80	; 0x4a80 <atan2>
    13c4:	4b 01       	movw	r8, r22
    13c6:	5c 01       	movw	r10, r24
    13c8:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    13ca:	c5 01       	movw	r24, r10
    13cc:	b4 01       	movw	r22, r8
    13ce:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e4       	ldi	r20, 0x40	; 64
    13d8:	50 e4       	ldi	r21, 0x40	; 64
    13da:	0e 94 1b 28 	call	0x5036	; 0x5036 <pow>
    13de:	6b 01       	movw	r12, r22
    13e0:	7c 01       	movw	r14, r24
    13e2:	c5 01       	movw	r24, r10
    13e4:	b4 01       	movw	r22, r8
    13e6:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e4       	ldi	r20, 0x40	; 64
    13f0:	50 e4       	ldi	r21, 0x40	; 64
    13f2:	0e 94 1b 28 	call	0x5036	; 0x5036 <pow>
    13f6:	4b 01       	movw	r8, r22
    13f8:	5c 01       	movw	r10, r24
    13fa:	2e ea       	ldi	r18, 0xAE	; 174
    13fc:	39 ec       	ldi	r19, 0xC9	; 201
    13fe:	46 e2       	ldi	r20, 0x26	; 38
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	c7 01       	movw	r24, r14
    1404:	b6 01       	movw	r22, r12
    1406:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	69 85       	ldd	r22, Y+9	; 0x09
    1410:	7a 85       	ldd	r23, Y+10	; 0x0a
    1412:	8b 85       	ldd	r24, Y+11	; 0x0b
    1414:	9c 85       	ldd	r25, Y+12	; 0x0c
    1416:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    141a:	6b 01       	movw	r12, r22
    141c:	7c 01       	movw	r14, r24
    141e:	22 e5       	ldi	r18, 0x52	; 82
    1420:	39 e5       	ldi	r19, 0x59	; 89
    1422:	47 e2       	ldi	r20, 0x27	; 39
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	c5 01       	movw	r24, r10
    1428:	b4 01       	movw	r22, r8
    142a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    142e:	2d 81       	ldd	r18, Y+5	; 0x05
    1430:	3e 81       	ldd	r19, Y+6	; 0x06
    1432:	4f 81       	ldd	r20, Y+7	; 0x07
    1434:	58 85       	ldd	r21, Y+8	; 0x08
    1436:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    143a:	a7 01       	movw	r20, r14
    143c:	96 01       	movw	r18, r12
    143e:	0e 94 40 25 	call	0x4a80	; 0x4a80 <atan2>
    1442:	6b 01       	movw	r12, r22
    1444:	7c 01       	movw	r14, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    1446:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    144a:	69 83       	std	Y+1, r22	; 0x01
    144c:	7a 83       	std	Y+2, r23	; 0x02
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	c7 01       	movw	r24, r14
    1454:	b6 01       	movw	r22, r12
    1456:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    145a:	2b 01       	movw	r4, r22
    145c:	3c 01       	movw	r6, r24
    145e:	25 e4       	ldi	r18, 0x45	; 69
    1460:	34 e2       	ldi	r19, 0x24	; 36
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    146a:	29 81       	ldd	r18, Y+1	; 0x01
    146c:	3a 81       	ldd	r19, Y+2	; 0x02
    146e:	4b 81       	ldd	r20, Y+3	; 0x03
    1470:	5c 81       	ldd	r21, Y+4	; 0x04
    1472:	0e 94 40 25 	call	0x4a80	; 0x4a80 <atan2>
    1476:	4b 01       	movw	r8, r22
    1478:	5c 01       	movw	r10, r24
    147a:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    147c:	09 f0       	breq	.+2      	; 0x1480 <ecef2lla+0x180>
    147e:	a5 cf       	rjmp	.-182    	; 0x13ca <ecef2lla+0xca>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    1480:	2a e8       	ldi	r18, 0x8A	; 138
    1482:	3c e5       	ldi	r19, 0x5C	; 92
    1484:	4b ed       	ldi	r20, 0xDB	; 219
    1486:	5b e3       	ldi	r21, 0x3B	; 59
    1488:	c3 01       	movw	r24, r6
    148a:	b2 01       	movw	r22, r4
    148c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1490:	a3 01       	movw	r20, r6
    1492:	92 01       	movw	r18, r4
    1494:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1498:	9b 01       	movw	r18, r22
    149a:	ac 01       	movw	r20, r24
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	80 e8       	ldi	r24, 0x80	; 128
    14a2:	9f e3       	ldi	r25, 0x3F	; 63
    14a4:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    14a8:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    14ac:	9b 01       	movw	r18, r22
    14ae:	ac 01       	movw	r20, r24
    14b0:	62 e3       	ldi	r22, 0x32	; 50
    14b2:	75 ea       	ldi	r23, 0xA5	; 165
    14b4:	82 ec       	ldi	r24, 0xC2	; 194
    14b6:	9a e4       	ldi	r25, 0x4A	; 74
    14b8:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    14bc:	4b 01       	movw	r8, r22
    14be:	5c 01       	movw	r10, r24
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
  
  v_lla[0] = phi;
    14c0:	f1 01       	movw	r30, r2
    14c2:	c0 82       	st	Z, r12
    14c4:	d1 82       	std	Z+1, r13	; 0x01
    14c6:	e2 82       	std	Z+2, r14	; 0x02
    14c8:	f3 82       	std	Z+3, r15	; 0x03
  v_lla[1] = lambda;
    14ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    14cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ce:	af 85       	ldd	r26, Y+15	; 0x0f
    14d0:	b8 89       	ldd	r27, Y+16	; 0x10
    14d2:	84 83       	std	Z+4, r24	; 0x04
    14d4:	95 83       	std	Z+5, r25	; 0x05
    14d6:	a6 83       	std	Z+6, r26	; 0x06
    14d8:	b7 83       	std	Z+7, r27	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    14da:	29 81       	ldd	r18, Y+1	; 0x01
    14dc:	3a 81       	ldd	r19, Y+2	; 0x02
    14de:	4b 81       	ldd	r20, Y+3	; 0x03
    14e0:	5c 81       	ldd	r21, Y+4	; 0x04
    14e2:	69 85       	ldd	r22, Y+9	; 0x09
    14e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    14e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ea:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    14ee:	6b 01       	movw	r12, r22
    14f0:	7c 01       	movw	r14, r24
    14f2:	2a e8       	ldi	r18, 0x8A	; 138
    14f4:	3c e5       	ldi	r19, 0x5C	; 92
    14f6:	4b ed       	ldi	r20, 0xDB	; 219
    14f8:	5b e3       	ldi	r21, 0x3B	; 59
    14fa:	c5 01       	movw	r24, r10
    14fc:	b4 01       	movw	r22, r8
    14fe:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1502:	a3 01       	movw	r20, r6
    1504:	92 01       	movw	r18, r4
    1506:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    150a:	2d 81       	ldd	r18, Y+5	; 0x05
    150c:	3e 81       	ldd	r19, Y+6	; 0x06
    150e:	4f 81       	ldd	r20, Y+7	; 0x07
    1510:	58 85       	ldd	r21, Y+8	; 0x08
    1512:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    1516:	a3 01       	movw	r20, r6
    1518:	92 01       	movw	r18, r4
    151a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	c7 01       	movw	r24, r14
    1524:	b6 01       	movw	r22, r12
    1526:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    152a:	a5 01       	movw	r20, r10
    152c:	94 01       	movw	r18, r8
    152e:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    1532:	d1 01       	movw	r26, r2
    1534:	18 96       	adiw	r26, 0x08	; 8
    1536:	6d 93       	st	X+, r22
    1538:	7d 93       	st	X+, r23
    153a:	8d 93       	st	X+, r24
    153c:	9c 93       	st	X, r25
    153e:	1b 97       	sbiw	r26, 0x0b	; 11
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    1540:	60 96       	adiw	r28, 0x10	; 16
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	df 90       	pop	r13
    1558:	cf 90       	pop	r12
    155a:	bf 90       	pop	r11
    155c:	af 90       	pop	r10
    155e:	9f 90       	pop	r9
    1560:	8f 90       	pop	r8
    1562:	7f 90       	pop	r7
    1564:	6f 90       	pop	r6
    1566:	5f 90       	pop	r5
    1568:	4f 90       	pop	r4
    156a:	3f 90       	pop	r3
    156c:	2f 90       	pop	r2
    156e:	08 95       	ret

00001570 <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    1570:	2f 92       	push	r2
    1572:	3f 92       	push	r3
    1574:	4f 92       	push	r4
    1576:	5f 92       	push	r5
    1578:	6f 92       	push	r6
    157a:	7f 92       	push	r7
    157c:	8f 92       	push	r8
    157e:	9f 92       	push	r9
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	ac 97       	sbiw	r28, 0x2c	; 44
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	1c 01       	movw	r2, r24
    15a6:	7b 01       	movw	r14, r22
    15a8:	8a 01       	movw	r16, r20
  float clat = cos(v_lla[0]), clon = cos(v_lla[1]);
    15aa:	db 01       	movw	r26, r22
    15ac:	4d 90       	ld	r4, X+
    15ae:	5d 90       	ld	r5, X+
    15b0:	6d 90       	ld	r6, X+
    15b2:	7c 90       	ld	r7, X
    15b4:	c3 01       	movw	r24, r6
    15b6:	b2 01       	movw	r22, r4
    15b8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    15bc:	6d a3       	std	Y+37, r22	; 0x25
    15be:	7e a3       	std	Y+38, r23	; 0x26
    15c0:	8f a3       	std	Y+39, r24	; 0x27
    15c2:	98 a7       	std	Y+40, r25	; 0x28
    15c4:	f7 01       	movw	r30, r14
    15c6:	c4 80       	ldd	r12, Z+4	; 0x04
    15c8:	d5 80       	ldd	r13, Z+5	; 0x05
    15ca:	e6 80       	ldd	r14, Z+6	; 0x06
    15cc:	f7 80       	ldd	r15, Z+7	; 0x07
    15ce:	c7 01       	movw	r24, r14
    15d0:	b6 01       	movw	r22, r12
    15d2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    15d6:	4b 01       	movw	r8, r22
    15d8:	5c 01       	movw	r10, r24
  float slat = sin(v_lla[0]), slon = sin(v_lla[1]);
    15da:	c3 01       	movw	r24, r6
    15dc:	b2 01       	movw	r22, r4
    15de:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    15e2:	2b 01       	movw	r4, r22
    15e4:	3c 01       	movw	r6, r24
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    15ee:	6b 01       	movw	r12, r22
    15f0:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    15f2:	77 fa       	bst	r7, 7
    15f4:	70 94       	com	r7
    15f6:	77 f8       	bld	r7, 7
    15f8:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    15fa:	8d a1       	ldd	r24, Y+37	; 0x25
    15fc:	9e a1       	ldd	r25, Y+38	; 0x26
    15fe:	af a1       	ldd	r26, Y+39	; 0x27
    1600:	b8 a5       	ldd	r27, Y+40	; 0x28
    1602:	b0 58       	subi	r27, 0x80	; 128
    1604:	89 a7       	std	Y+41, r24	; 0x29
    1606:	9a a7       	std	Y+42, r25	; 0x2a
    1608:	ab a7       	std	Y+43, r26	; 0x2b
    160a:	bc a7       	std	Y+44, r27	; 0x2c
{
  float clat = cos(v_lla[0]), clon = cos(v_lla[1]);
  float slat = sin(v_lla[0]), slon = sin(v_lla[1]);
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    160c:	a5 01       	movw	r20, r10
    160e:	94 01       	movw	r18, r8
    1610:	c3 01       	movw	r24, r6
    1612:	b2 01       	movw	r22, r4
    1614:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    1618:	69 83       	std	Y+1, r22	; 0x01
    161a:	7a 83       	std	Y+2, r23	; 0x02
    161c:	8b 83       	std	Y+3, r24	; 0x03
    161e:	9c 83       	std	Y+4, r25	; 0x04
  float clat = cos(v_lla[0]), clon = cos(v_lla[1]);
  float slat = sin(v_lla[0]), slon = sin(v_lla[1]);
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    1620:	a3 01       	movw	r20, r6
    1622:	92 01       	movw	r18, r4
    1624:	c7 01       	movw	r24, r14
    1626:	b6 01       	movw	r22, r12
    1628:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    162c:	6d 83       	std	Y+5, r22	; 0x05
    162e:	7e 83       	std	Y+6, r23	; 0x06
    1630:	8f 83       	std	Y+7, r24	; 0x07
    1632:	98 87       	std	Y+8, r25	; 0x08
    1634:	8d a1       	ldd	r24, Y+37	; 0x25
    1636:	9e a1       	ldd	r25, Y+38	; 0x26
    1638:	af a1       	ldd	r26, Y+39	; 0x27
    163a:	b8 a5       	ldd	r27, Y+40	; 0x28
    163c:	89 87       	std	Y+9, r24	; 0x09
    163e:	9a 87       	std	Y+10, r25	; 0x0a
    1640:	ab 87       	std	Y+11, r26	; 0x0b
    1642:	bc 87       	std	Y+12, r27	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    1644:	d7 01       	movw	r26, r14
    1646:	c6 01       	movw	r24, r12
    1648:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    164a:	8d 87       	std	Y+13, r24	; 0x0d
    164c:	9e 87       	std	Y+14, r25	; 0x0e
    164e:	af 87       	std	Y+15, r26	; 0x0f
    1650:	b8 8b       	std	Y+16, r27	; 0x10
    1652:	89 8a       	std	Y+17, r8	; 0x11
    1654:	9a 8a       	std	Y+18, r9	; 0x12
    1656:	ab 8a       	std	Y+19, r10	; 0x13
    1658:	bc 8a       	std	Y+20, r11	; 0x14
    165a:	1d 8a       	std	Y+21, r1	; 0x15
    165c:	1e 8a       	std	Y+22, r1	; 0x16
    165e:	1f 8a       	std	Y+23, r1	; 0x17
    1660:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    1662:	a5 01       	movw	r20, r10
    1664:	94 01       	movw	r18, r8
    1666:	69 a5       	ldd	r22, Y+41	; 0x29
    1668:	7a a5       	ldd	r23, Y+42	; 0x2a
    166a:	8b a5       	ldd	r24, Y+43	; 0x2b
    166c:	9c a5       	ldd	r25, Y+44	; 0x2c
    166e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    1672:	69 8f       	std	Y+25, r22	; 0x19
    1674:	7a 8f       	std	Y+26, r23	; 0x1a
    1676:	8b 8f       	std	Y+27, r24	; 0x1b
    1678:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    167a:	29 a5       	ldd	r18, Y+41	; 0x29
    167c:	3a a5       	ldd	r19, Y+42	; 0x2a
    167e:	4b a5       	ldd	r20, Y+43	; 0x2b
    1680:	5c a5       	ldd	r21, Y+44	; 0x2c
    1682:	c7 01       	movw	r24, r14
    1684:	b6 01       	movw	r22, r12
    1686:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    168a:	6d 8f       	std	Y+29, r22	; 0x1d
    168c:	7e 8f       	std	Y+30, r23	; 0x1e
    168e:	8f 8f       	std	Y+31, r24	; 0x1f
    1690:	98 a3       	std	Y+32, r25	; 0x20
    1692:	49 a2       	std	Y+33, r4	; 0x21
    1694:	5a a2       	std	Y+34, r5	; 0x22
    1696:	6b a2       	std	Y+35, r6	; 0x23
    1698:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    169a:	a8 01       	movw	r20, r16
    169c:	be 01       	movw	r22, r28
    169e:	6f 5f       	subi	r22, 0xFF	; 255
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	c1 01       	movw	r24, r2
    16a4:	0e 94 a3 18 	call	0x3146	; 0x3146 <vector_into_matrix>
}
    16a8:	ac 96       	adiw	r28, 0x2c	; 44
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	df 90       	pop	r13
    16c2:	cf 90       	pop	r12
    16c4:	bf 90       	pop	r11
    16c6:	af 90       	pop	r10
    16c8:	9f 90       	pop	r9
    16ca:	8f 90       	pop	r8
    16cc:	7f 90       	pop	r7
    16ce:	6f 90       	pop	r6
    16d0:	5f 90       	pop	r5
    16d2:	4f 90       	pop	r4
    16d4:	3f 90       	pop	r3
    16d6:	2f 90       	pop	r2
    16d8:	08 95       	ret

000016da <init_UART_GPS>:


void init_UART_GPS(void)
{

  UCSR0A = 0;
    16da:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
    16dc:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
    16de:	e5 e9       	ldi	r30, 0x95	; 149
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
    16e4:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    16e6:	8a b1       	in	r24, 0x0a	; 10
    16e8:	88 69       	ori	r24, 0x98	; 152
    16ea:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
    16ec:	80 81       	ld	r24, Z
    16ee:	8e 60       	ori	r24, 0x0E	; 14
    16f0:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
    16f2:	87 e6       	ldi	r24, 0x67	; 103
    16f4:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
    16f6:	10 92 90 00 	sts	0x0090, r1
    16fa:	08 95       	ret

000016fc <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	2f 93       	push	r18
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
  PORTA ^= 0xf0;
    1710:	8b b3       	in	r24, 0x1b	; 27
    1712:	90 ef       	ldi	r25, 0xF0	; 240
    1714:	89 27       	eor	r24, r25
    1716:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    1718:	8c b1       	in	r24, 0x0c	; 12
    171a:	80 93 8a 01 	sts	0x018A, r24
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    171e:	80 91 8b 01 	lds	r24, 0x018B
    1722:	90 91 8c 01 	lds	r25, 0x018C
    1726:	a0 91 8d 01 	lds	r26, 0x018D
    172a:	b0 91 8e 01 	lds	r27, 0x018E
    172e:	ba 2f       	mov	r27, r26
    1730:	a9 2f       	mov	r26, r25
    1732:	98 2f       	mov	r25, r24
    1734:	88 27       	eor	r24, r24
    1736:	80 93 8b 01 	sts	0x018B, r24
    173a:	90 93 8c 01 	sts	0x018C, r25
    173e:	a0 93 8d 01 	sts	0x018D, r26
    1742:	b0 93 8e 01 	sts	0x018E, r27
  buffer &= 0xFFFFFF00;
    1746:	80 91 8b 01 	lds	r24, 0x018B
    174a:	90 91 8c 01 	lds	r25, 0x018C
    174e:	a0 91 8d 01 	lds	r26, 0x018D
    1752:	b0 91 8e 01 	lds	r27, 0x018E
    1756:	88 27       	eor	r24, r24
    1758:	80 93 8b 01 	sts	0x018B, r24
    175c:	90 93 8c 01 	sts	0x018C, r25
    1760:	a0 93 8d 01 	sts	0x018D, r26
    1764:	b0 93 8e 01 	sts	0x018E, r27
  buffer |= (uint32_t) last_byte;
    1768:	20 91 8a 01 	lds	r18, 0x018A
    176c:	80 91 8b 01 	lds	r24, 0x018B
    1770:	90 91 8c 01 	lds	r25, 0x018C
    1774:	a0 91 8d 01 	lds	r26, 0x018D
    1778:	b0 91 8e 01 	lds	r27, 0x018E
    177c:	82 2b       	or	r24, r18
    177e:	80 93 8b 01 	sts	0x018B, r24
    1782:	90 93 8c 01 	sts	0x018C, r25
    1786:	a0 93 8d 01 	sts	0x018D, r26
    178a:	b0 93 8e 01 	sts	0x018E, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
    178e:	80 91 05 01 	lds	r24, 0x0105
    1792:	8c 30       	cpi	r24, 0x0C	; 12
    1794:	08 f0       	brcs	.+2      	; 0x1798 <__vector_18+0x9c>
    1796:	49 c0       	rjmp	.+146    	; 0x182a <__vector_18+0x12e>
  {
    
    if(pos<4)
    1798:	80 91 05 01 	lds	r24, 0x0105
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <__vector_18+0xa6>
    17a0:	d7 c1       	rjmp	.+942    	; 0x1b50 <__vector_18+0x454>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    17a2:	80 91 05 04 	lds	r24, 0x0405
    17a6:	90 91 06 04 	lds	r25, 0x0406
    17aa:	a0 91 07 04 	lds	r26, 0x0407
    17ae:	b0 91 08 04 	lds	r27, 0x0408
    17b2:	89 2f       	mov	r24, r25
    17b4:	9a 2f       	mov	r25, r26
    17b6:	ab 2f       	mov	r26, r27
    17b8:	bb 27       	eor	r27, r27
    17ba:	a7 fd       	sbrc	r26, 7
    17bc:	ba 95       	dec	r27
    17be:	80 93 05 04 	sts	0x0405, r24
    17c2:	90 93 06 04 	sts	0x0406, r25
    17c6:	a0 93 07 04 	sts	0x0407, r26
    17ca:	b0 93 08 04 	sts	0x0408, r27
		Current_state.gps.x &= 0x00FFFFFF;
    17ce:	80 91 05 04 	lds	r24, 0x0405
    17d2:	90 91 06 04 	lds	r25, 0x0406
    17d6:	a0 91 07 04 	lds	r26, 0x0407
    17da:	b0 91 08 04 	lds	r27, 0x0408
    17de:	bb 27       	eor	r27, r27
    17e0:	80 93 05 04 	sts	0x0405, r24
    17e4:	90 93 06 04 	sts	0x0406, r25
    17e8:	a0 93 07 04 	sts	0x0407, r26
    17ec:	b0 93 08 04 	sts	0x0408, r27
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    17f0:	80 91 05 04 	lds	r24, 0x0405
    17f4:	90 91 06 04 	lds	r25, 0x0406
    17f8:	a0 91 07 04 	lds	r26, 0x0407
    17fc:	b0 91 08 04 	lds	r27, 0x0408
    1800:	20 91 8a 01 	lds	r18, 0x018A
    1804:	b2 2b       	or	r27, r18
    1806:	80 93 05 04 	sts	0x0405, r24
    180a:	90 93 06 04 	sts	0x0406, r25
    180e:	a0 93 07 04 	sts	0x0407, r26
    1812:	b0 93 08 04 	sts	0x0408, r27
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    1816:	80 91 05 01 	lds	r24, 0x0105
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	80 93 05 01 	sts	0x0105, r24
    if(pos == 12)
    1820:	80 91 05 01 	lds	r24, 0x0105
    1824:	8c 30       	cpi	r24, 0x0C	; 12
    1826:	09 f4       	brne	.+2      	; 0x182a <__vector_18+0x12e>
    1828:	30 c2       	rjmp	.+1120   	; 0x1c8a <__vector_18+0x58e>
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    182a:	80 91 04 01 	lds	r24, 0x0104
    182e:	8c 30       	cpi	r24, 0x0C	; 12
    1830:	08 f0       	brcs	.+2      	; 0x1834 <__vector_18+0x138>
    1832:	49 c0       	rjmp	.+146    	; 0x18c6 <__vector_18+0x1ca>
  {
	  
    if(vel < 4)
    1834:	80 91 04 01 	lds	r24, 0x0104
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	08 f0       	brcs	.+2      	; 0x183e <__vector_18+0x142>
    183c:	44 c1       	rjmp	.+648    	; 0x1ac6 <__vector_18+0x3ca>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    183e:	80 91 11 04 	lds	r24, 0x0411
    1842:	90 91 12 04 	lds	r25, 0x0412
    1846:	a0 91 13 04 	lds	r26, 0x0413
    184a:	b0 91 14 04 	lds	r27, 0x0414
    184e:	89 2f       	mov	r24, r25
    1850:	9a 2f       	mov	r25, r26
    1852:	ab 2f       	mov	r26, r27
    1854:	bb 27       	eor	r27, r27
    1856:	a7 fd       	sbrc	r26, 7
    1858:	ba 95       	dec	r27
    185a:	80 93 11 04 	sts	0x0411, r24
    185e:	90 93 12 04 	sts	0x0412, r25
    1862:	a0 93 13 04 	sts	0x0413, r26
    1866:	b0 93 14 04 	sts	0x0414, r27
		Current_state.gps.v_x &= 0x00FFFFFF;
    186a:	80 91 11 04 	lds	r24, 0x0411
    186e:	90 91 12 04 	lds	r25, 0x0412
    1872:	a0 91 13 04 	lds	r26, 0x0413
    1876:	b0 91 14 04 	lds	r27, 0x0414
    187a:	bb 27       	eor	r27, r27
    187c:	80 93 11 04 	sts	0x0411, r24
    1880:	90 93 12 04 	sts	0x0412, r25
    1884:	a0 93 13 04 	sts	0x0413, r26
    1888:	b0 93 14 04 	sts	0x0414, r27
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    188c:	80 91 11 04 	lds	r24, 0x0411
    1890:	90 91 12 04 	lds	r25, 0x0412
    1894:	a0 91 13 04 	lds	r26, 0x0413
    1898:	b0 91 14 04 	lds	r27, 0x0414
    189c:	20 91 8a 01 	lds	r18, 0x018A
    18a0:	b2 2b       	or	r27, r18
    18a2:	80 93 11 04 	sts	0x0411, r24
    18a6:	90 93 12 04 	sts	0x0412, r25
    18aa:	a0 93 13 04 	sts	0x0413, r26
    18ae:	b0 93 14 04 	sts	0x0414, r27
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
		Current_state.gps.v_z &= 0x00FFFFFF;
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    18b2:	80 91 04 01 	lds	r24, 0x0104
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	80 93 04 01 	sts	0x0104, r24
    if(vel == 12)
    18bc:	80 91 04 01 	lds	r24, 0x0104
    18c0:	8c 30       	cpi	r24, 0x0C	; 12
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <__vector_18+0x1ca>
    18c4:	e6 c1       	rjmp	.+972    	; 0x1c92 <__vector_18+0x596>

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    18c6:	80 91 03 01 	lds	r24, 0x0103
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	60 f5       	brcc	.+88     	; 0x1926 <__vector_18+0x22a>
  {
    if(dop >= 2)
    18ce:	80 91 03 01 	lds	r24, 0x0103
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	f0 f0       	brcs	.+60     	; 0x1912 <__vector_18+0x216>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    18d6:	80 91 30 04 	lds	r24, 0x0430
    18da:	90 91 31 04 	lds	r25, 0x0431
    18de:	89 2f       	mov	r24, r25
    18e0:	99 27       	eor	r25, r25
    18e2:	90 93 31 04 	sts	0x0431, r25
    18e6:	80 93 30 04 	sts	0x0430, r24
		 Current_state.gps.pdop &= 0x00FF;
    18ea:	80 91 30 04 	lds	r24, 0x0430
    18ee:	90 91 31 04 	lds	r25, 0x0431
    18f2:	99 27       	eor	r25, r25
    18f4:	90 93 31 04 	sts	0x0431, r25
    18f8:	80 93 30 04 	sts	0x0430, r24
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    18fc:	80 91 30 04 	lds	r24, 0x0430
    1900:	90 91 31 04 	lds	r25, 0x0431
    1904:	20 91 8a 01 	lds	r18, 0x018A
    1908:	92 2b       	or	r25, r18
    190a:	90 93 31 04 	sts	0x0431, r25
    190e:	80 93 30 04 	sts	0x0430, r24
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    1912:	80 91 03 01 	lds	r24, 0x0103
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	80 93 03 01 	sts	0x0103, r24
    if(dop == 4)
    191c:	80 91 03 01 	lds	r24, 0x0103
    1920:	84 30       	cpi	r24, 0x04	; 4
    1922:	09 f4       	brne	.+2      	; 0x1926 <__vector_18+0x22a>
    1924:	ae c1       	rjmp	.+860    	; 0x1c82 <__vector_18+0x586>
      dop = 0xFF;
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    1926:	80 91 02 01 	lds	r24, 0x0102
    192a:	80 31       	cpi	r24, 0x10	; 16
    192c:	78 f4       	brcc	.+30     	; 0x194c <__vector_18+0x250>
  {
	if(geo < 4);  
    192e:	80 91 02 01 	lds	r24, 0x0102
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	08 f0       	brcs	.+2      	; 0x1938 <__vector_18+0x23c>
    1936:	51 c1       	rjmp	.+674    	; 0x1bda <__vector_18+0x4de>
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    1938:	80 91 02 01 	lds	r24, 0x0102
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 02 01 	sts	0x0102, r24
    if(geo == 16)
    1942:	80 91 02 01 	lds	r24, 0x0102
    1946:	80 31       	cpi	r24, 0x10	; 16
    1948:	09 f4       	brne	.+2      	; 0x194c <__vector_18+0x250>
    194a:	97 c1       	rjmp	.+814    	; 0x1c7a <__vector_18+0x57e>

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    194c:	80 91 01 01 	lds	r24, 0x0101
    1950:	87 30       	cpi	r24, 0x07	; 7
    1952:	90 f4       	brcc	.+36     	; 0x1978 <__vector_18+0x27c>
  {
	  
	  if(time == 0)
    1954:	80 91 01 01 	lds	r24, 0x0101
    1958:	81 11       	cpse	r24, r1
    195a:	7d c0       	rjmp	.+250    	; 0x1a56 <__vector_18+0x35a>
	  {
		  Current_state.gps.hours = last_byte;
    195c:	80 91 8a 01 	lds	r24, 0x018A
    1960:	80 93 29 04 	sts	0x0429, r24
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    1964:	80 91 01 01 	lds	r24, 0x0101
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	80 93 01 01 	sts	0x0101, r24
    if(time == 7)
    196e:	80 91 01 01 	lds	r24, 0x0101
    1972:	87 30       	cpi	r24, 0x07	; 7
    1974:	09 f4       	brne	.+2      	; 0x1978 <__vector_18+0x27c>
    1976:	91 c1       	rjmp	.+802    	; 0x1c9a <__vector_18+0x59e>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    1978:	80 91 8b 01 	lds	r24, 0x018B
    197c:	90 91 8c 01 	lds	r25, 0x018C
    1980:	a0 91 8d 01 	lds	r26, 0x018D
    1984:	b0 91 8e 01 	lds	r27, 0x018E
    1988:	8c 3a       	cpi	r24, 0xAC	; 172
    198a:	94 40       	sbci	r25, 0x04	; 4
    198c:	af 43       	sbci	r26, 0x3F	; 63
    198e:	bf 43       	sbci	r27, 0x3F	; 63
    1990:	09 f4       	brne	.+2      	; 0x1994 <__vector_18+0x298>
    1992:	68 c1       	rjmp	.+720    	; 0x1c64 <__vector_18+0x568>
  {
    message_end = 0;
    pos = 0;
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    1994:	80 91 8b 01 	lds	r24, 0x018B
    1998:	90 91 8c 01 	lds	r25, 0x018C
    199c:	a0 91 8d 01 	lds	r26, 0x018D
    19a0:	b0 91 8e 01 	lds	r27, 0x018E
    19a4:	8c 3a       	cpi	r24, 0xAC	; 172
    19a6:	95 40       	sbci	r25, 0x05	; 5
    19a8:	af 43       	sbci	r26, 0x3F	; 63
    19aa:	bf 43       	sbci	r27, 0x3F	; 63
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <__vector_18+0x2b4>
    19ae:	5f c1       	rjmp	.+702    	; 0x1c6e <__vector_18+0x572>
    vel = 0;
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    19b0:	80 91 8b 01 	lds	r24, 0x018B
    19b4:	90 91 8c 01 	lds	r25, 0x018C
    19b8:	a0 91 8d 01 	lds	r26, 0x018D
    19bc:	b0 91 8e 01 	lds	r27, 0x018E
    19c0:	8c 3a       	cpi	r24, 0xAC	; 172
    19c2:	9b 40       	sbci	r25, 0x0B	; 11
    19c4:	af 43       	sbci	r26, 0x3F	; 63
    19c6:	bf 43       	sbci	r27, 0x3F	; 63
    19c8:	09 f4       	brne	.+2      	; 0x19cc <__vector_18+0x2d0>
    19ca:	54 c1       	rjmp	.+680    	; 0x1c74 <__vector_18+0x578>
    dop = 0;
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    19cc:	80 91 8b 01 	lds	r24, 0x018B
    19d0:	90 91 8c 01 	lds	r25, 0x018C
    19d4:	a0 91 8d 01 	lds	r26, 0x018D
    19d8:	b0 91 8e 01 	lds	r27, 0x018E
    19dc:	8c 3a       	cpi	r24, 0xAC	; 172
    19de:	9e 40       	sbci	r25, 0x0E	; 14
    19e0:	af 43       	sbci	r26, 0x3F	; 63
    19e2:	bf 43       	sbci	r27, 0x3F	; 63
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <__vector_18+0x2ec>
    19e6:	19 c2       	rjmp	.+1074   	; 0x1e1a <__vector_18+0x71e>
    geo = 0;
  ///Time
  else if(buffer == 0x3F3F0FAC)
    19e8:	80 91 8b 01 	lds	r24, 0x018B
    19ec:	90 91 8c 01 	lds	r25, 0x018C
    19f0:	a0 91 8d 01 	lds	r26, 0x018D
    19f4:	b0 91 8e 01 	lds	r27, 0x018E
    19f8:	8c 3a       	cpi	r24, 0xAC	; 172
    19fa:	9f 40       	sbci	r25, 0x0F	; 15
    19fc:	af 43       	sbci	r26, 0x3F	; 63
    19fe:	bf 43       	sbci	r27, 0x3F	; 63
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <__vector_18+0x308>
    1a02:	03 c2       	rjmp	.+1030   	; 0x1e0a <__vector_18+0x70e>
    time = 0;
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 500)  && message_end)//&& ( Current_state.gps.pdop!=0)
    1a04:	80 91 30 04 	lds	r24, 0x0430
    1a08:	90 91 31 04 	lds	r25, 0x0431
    1a0c:	84 3f       	cpi	r24, 0xF4	; 244
    1a0e:	91 40       	sbci	r25, 0x01	; 1
    1a10:	c0 f4       	brcc	.+48     	; 0x1a42 <__vector_18+0x346>
    1a12:	80 91 89 01 	lds	r24, 0x0189
    1a16:	88 23       	and	r24, r24
    1a18:	a1 f0       	breq	.+40     	; 0x1a42 <__vector_18+0x346>
  {
    GPS_done = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	80 93 06 01 	sts	0x0106, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    1a20:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	9f ef       	ldi	r25, 0xFF	; 255
    1a26:	90 93 31 04 	sts	0x0431, r25
    1a2a:	80 93 30 04 	sts	0x0430, r24
    message_end = 0;
    1a2e:	10 92 89 01 	sts	0x0189, r1
    buffer = 0;
    1a32:	10 92 8b 01 	sts	0x018B, r1
    1a36:	10 92 8c 01 	sts	0x018C, r1
    1a3a:	10 92 8d 01 	sts	0x018D, r1
    1a3e:	10 92 8e 01 	sts	0x018E, r1
  }
}
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti
	  
	  if(time == 0)
	  {
		  Current_state.gps.hours = last_byte;
	  }
	  else if(time == 1)
    1a56:	80 91 01 01 	lds	r24, 0x0101
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <__vector_18+0x364>
    1a5e:	d8 c1       	rjmp	.+944    	; 0x1e10 <__vector_18+0x714>
	  {
		  Current_state.gps.minutes = last_byte;
	  }
	  else if(time == 2)
    1a60:	80 91 01 01 	lds	r24, 0x0101
    1a64:	82 30       	cpi	r24, 0x02	; 2
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <__vector_18+0x36e>
    1a68:	1b c2       	rjmp	.+1078   	; 0x1ea0 <__vector_18+0x7a4>
	  {
		  Current_state.gps.seconds = last_byte;
	  }
	  else if(time == 3)
    1a6a:	80 91 01 01 	lds	r24, 0x0101
    1a6e:	83 30       	cpi	r24, 0x03	; 3
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <__vector_18+0x378>
    1a72:	1b c2       	rjmp	.+1078   	; 0x1eaa <__vector_18+0x7ae>
	  {
		  Current_state.gps.date = last_byte;
	  }else if(time == 4)
    1a74:	80 91 01 01 	lds	r24, 0x0101
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <__vector_18+0x382>
    1a7c:	1b c2       	rjmp	.+1078   	; 0x1eb4 <__vector_18+0x7b8>
	  {
		  Current_state.gps.month = last_byte;
	  }else if(time > 4)
    1a7e:	80 91 01 01 	lds	r24, 0x0101
    1a82:	85 30       	cpi	r24, 0x05	; 5
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <__vector_18+0x38c>
    1a86:	6e cf       	rjmp	.-292    	; 0x1964 <__vector_18+0x268>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    1a88:	80 91 2e 04 	lds	r24, 0x042E
    1a8c:	90 91 2f 04 	lds	r25, 0x042F
    1a90:	89 2f       	mov	r24, r25
    1a92:	99 27       	eor	r25, r25
    1a94:	90 93 2f 04 	sts	0x042F, r25
    1a98:	80 93 2e 04 	sts	0x042E, r24
		  Current_state.gps.year &= 0x00FF;
    1a9c:	80 91 2e 04 	lds	r24, 0x042E
    1aa0:	90 91 2f 04 	lds	r25, 0x042F
    1aa4:	99 27       	eor	r25, r25
    1aa6:	90 93 2f 04 	sts	0x042F, r25
    1aaa:	80 93 2e 04 	sts	0x042E, r24
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    1aae:	80 91 2e 04 	lds	r24, 0x042E
    1ab2:	90 91 2f 04 	lds	r25, 0x042F
    1ab6:	20 91 8a 01 	lds	r18, 0x018A
    1aba:	92 2b       	or	r25, r18
    1abc:	90 93 2f 04 	sts	0x042F, r25
    1ac0:	80 93 2e 04 	sts	0x042E, r24
    1ac4:	4f cf       	rjmp	.-354    	; 0x1964 <__vector_18+0x268>
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
		Current_state.gps.v_x &= 0x00FFFFFF;
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
		
	}
	else if(vel < 8)
    1ac6:	80 91 04 01 	lds	r24, 0x0104
    1aca:	88 30       	cpi	r24, 0x08	; 8
    1acc:	08 f4       	brcc	.+2      	; 0x1ad0 <__vector_18+0x3d4>
    1ace:	ec c0       	rjmp	.+472    	; 0x1ca8 <__vector_18+0x5ac>
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
		Current_state.gps.v_y &= 0x00FFFFFF;
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
	}
	else if(vel < 12)
    1ad0:	80 91 04 01 	lds	r24, 0x0104
    1ad4:	8c 30       	cpi	r24, 0x0C	; 12
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <__vector_18+0x3de>
    1ad8:	ec ce       	rjmp	.-552    	; 0x18b2 <__vector_18+0x1b6>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    1ada:	80 91 19 04 	lds	r24, 0x0419
    1ade:	90 91 1a 04 	lds	r25, 0x041A
    1ae2:	a0 91 1b 04 	lds	r26, 0x041B
    1ae6:	b0 91 1c 04 	lds	r27, 0x041C
    1aea:	89 2f       	mov	r24, r25
    1aec:	9a 2f       	mov	r25, r26
    1aee:	ab 2f       	mov	r26, r27
    1af0:	bb 27       	eor	r27, r27
    1af2:	a7 fd       	sbrc	r26, 7
    1af4:	ba 95       	dec	r27
    1af6:	80 93 19 04 	sts	0x0419, r24
    1afa:	90 93 1a 04 	sts	0x041A, r25
    1afe:	a0 93 1b 04 	sts	0x041B, r26
    1b02:	b0 93 1c 04 	sts	0x041C, r27
		Current_state.gps.v_z &= 0x00FFFFFF;
    1b06:	80 91 19 04 	lds	r24, 0x0419
    1b0a:	90 91 1a 04 	lds	r25, 0x041A
    1b0e:	a0 91 1b 04 	lds	r26, 0x041B
    1b12:	b0 91 1c 04 	lds	r27, 0x041C
    1b16:	bb 27       	eor	r27, r27
    1b18:	80 93 19 04 	sts	0x0419, r24
    1b1c:	90 93 1a 04 	sts	0x041A, r25
    1b20:	a0 93 1b 04 	sts	0x041B, r26
    1b24:	b0 93 1c 04 	sts	0x041C, r27
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    1b28:	80 91 19 04 	lds	r24, 0x0419
    1b2c:	90 91 1a 04 	lds	r25, 0x041A
    1b30:	a0 91 1b 04 	lds	r26, 0x041B
    1b34:	b0 91 1c 04 	lds	r27, 0x041C
    1b38:	20 91 8a 01 	lds	r18, 0x018A
    1b3c:	b2 2b       	or	r27, r18
    1b3e:	80 93 19 04 	sts	0x0419, r24
    1b42:	90 93 1a 04 	sts	0x041A, r25
    1b46:	a0 93 1b 04 	sts	0x041B, r26
    1b4a:	b0 93 1c 04 	sts	0x041C, r27
    1b4e:	b1 ce       	rjmp	.-670    	; 0x18b2 <__vector_18+0x1b6>
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    1b50:	80 91 05 01 	lds	r24, 0x0105
    1b54:	88 30       	cpi	r24, 0x08	; 8
    1b56:	08 f4       	brcc	.+2      	; 0x1b5a <__vector_18+0x45e>
    1b58:	1d c1       	rjmp	.+570    	; 0x1d94 <__vector_18+0x698>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    1b5a:	80 91 05 01 	lds	r24, 0x0105
    1b5e:	8c 30       	cpi	r24, 0x0C	; 12
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <__vector_18+0x468>
    1b62:	59 ce       	rjmp	.-846    	; 0x1816 <__vector_18+0x11a>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    1b64:	80 91 0d 04 	lds	r24, 0x040D
    1b68:	90 91 0e 04 	lds	r25, 0x040E
    1b6c:	a0 91 0f 04 	lds	r26, 0x040F
    1b70:	b0 91 10 04 	lds	r27, 0x0410
    1b74:	89 2f       	mov	r24, r25
    1b76:	9a 2f       	mov	r25, r26
    1b78:	ab 2f       	mov	r26, r27
    1b7a:	bb 27       	eor	r27, r27
    1b7c:	a7 fd       	sbrc	r26, 7
    1b7e:	ba 95       	dec	r27
    1b80:	80 93 0d 04 	sts	0x040D, r24
    1b84:	90 93 0e 04 	sts	0x040E, r25
    1b88:	a0 93 0f 04 	sts	0x040F, r26
    1b8c:	b0 93 10 04 	sts	0x0410, r27
		Current_state.gps.z &= 0x00FFFFFF;
    1b90:	80 91 0d 04 	lds	r24, 0x040D
    1b94:	90 91 0e 04 	lds	r25, 0x040E
    1b98:	a0 91 0f 04 	lds	r26, 0x040F
    1b9c:	b0 91 10 04 	lds	r27, 0x0410
    1ba0:	bb 27       	eor	r27, r27
    1ba2:	80 93 0d 04 	sts	0x040D, r24
    1ba6:	90 93 0e 04 	sts	0x040E, r25
    1baa:	a0 93 0f 04 	sts	0x040F, r26
    1bae:	b0 93 10 04 	sts	0x0410, r27
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    1bb2:	80 91 0d 04 	lds	r24, 0x040D
    1bb6:	90 91 0e 04 	lds	r25, 0x040E
    1bba:	a0 91 0f 04 	lds	r26, 0x040F
    1bbe:	b0 91 10 04 	lds	r27, 0x0410
    1bc2:	20 91 8a 01 	lds	r18, 0x018A
    1bc6:	b2 2b       	or	r27, r18
    1bc8:	80 93 0d 04 	sts	0x040D, r24
    1bcc:	90 93 0e 04 	sts	0x040E, r25
    1bd0:	a0 93 0f 04 	sts	0x040F, r26
    1bd4:	b0 93 10 04 	sts	0x0410, r27
    1bd8:	1e ce       	rjmp	.-964    	; 0x1816 <__vector_18+0x11a>
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
  {
	if(geo < 4);  
    else if(geo < 8)
    1bda:	80 91 02 01 	lds	r24, 0x0102
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <__vector_18+0x4e8>
    1be2:	9d c0       	rjmp	.+314    	; 0x1d1e <__vector_18+0x622>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
		Current_state.gps.lat &= 0x00FFFFFF;
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
	}
	else if(geo < 12)
    1be4:	80 91 02 01 	lds	r24, 0x0102
    1be8:	8c 30       	cpi	r24, 0x0C	; 12
    1bea:	08 f0       	brcs	.+2      	; 0x1bee <__vector_18+0x4f2>
    1bec:	19 c1       	rjmp	.+562    	; 0x1e20 <__vector_18+0x724>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    1bee:	80 91 21 04 	lds	r24, 0x0421
    1bf2:	90 91 22 04 	lds	r25, 0x0422
    1bf6:	a0 91 23 04 	lds	r26, 0x0423
    1bfa:	b0 91 24 04 	lds	r27, 0x0424
    1bfe:	89 2f       	mov	r24, r25
    1c00:	9a 2f       	mov	r25, r26
    1c02:	ab 2f       	mov	r26, r27
    1c04:	bb 27       	eor	r27, r27
    1c06:	a7 fd       	sbrc	r26, 7
    1c08:	ba 95       	dec	r27
    1c0a:	80 93 21 04 	sts	0x0421, r24
    1c0e:	90 93 22 04 	sts	0x0422, r25
    1c12:	a0 93 23 04 	sts	0x0423, r26
    1c16:	b0 93 24 04 	sts	0x0424, r27
		Current_state.gps.lon &= 0x00FFFFFF;
    1c1a:	80 91 21 04 	lds	r24, 0x0421
    1c1e:	90 91 22 04 	lds	r25, 0x0422
    1c22:	a0 91 23 04 	lds	r26, 0x0423
    1c26:	b0 91 24 04 	lds	r27, 0x0424
    1c2a:	bb 27       	eor	r27, r27
    1c2c:	80 93 21 04 	sts	0x0421, r24
    1c30:	90 93 22 04 	sts	0x0422, r25
    1c34:	a0 93 23 04 	sts	0x0423, r26
    1c38:	b0 93 24 04 	sts	0x0424, r27
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    1c3c:	80 91 21 04 	lds	r24, 0x0421
    1c40:	90 91 22 04 	lds	r25, 0x0422
    1c44:	a0 91 23 04 	lds	r26, 0x0423
    1c48:	b0 91 24 04 	lds	r27, 0x0424
    1c4c:	20 91 8a 01 	lds	r18, 0x018A
    1c50:	b2 2b       	or	r27, r18
    1c52:	80 93 21 04 	sts	0x0421, r24
    1c56:	90 93 22 04 	sts	0x0422, r25
    1c5a:	a0 93 23 04 	sts	0x0423, r26
    1c5e:	b0 93 24 04 	sts	0x0424, r27
    1c62:	6a ce       	rjmp	.-812    	; 0x1938 <__vector_18+0x23c>
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
  {
    message_end = 0;
    1c64:	10 92 89 01 	sts	0x0189, r1
    pos = 0;
    1c68:	10 92 05 01 	sts	0x0105, r1
    1c6c:	cb ce       	rjmp	.-618    	; 0x1a04 <__vector_18+0x308>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    vel = 0;
    1c6e:	10 92 04 01 	sts	0x0104, r1
    1c72:	c8 ce       	rjmp	.-624    	; 0x1a04 <__vector_18+0x308>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    dop = 0;
    1c74:	10 92 03 01 	sts	0x0103, r1
    1c78:	c5 ce       	rjmp	.-630    	; 0x1a04 <__vector_18+0x308>
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    if(geo == 16)
	{
      geo = 0xFF;
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	80 93 02 01 	sts	0x0102, r24
    1c80:	65 ce       	rjmp	.-822    	; 0x194c <__vector_18+0x250>
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    if(dop == 4)
      dop = 0xFF;
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	80 93 03 01 	sts	0x0103, r24
    1c88:	4e ce       	rjmp	.-868    	; 0x1926 <__vector_18+0x22a>
	}
    ///* Increment position and terminate it if full
    pos++;
    if(pos == 12)
	{
      pos = 0xFF;
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	80 93 05 01 	sts	0x0105, r24
    1c90:	cc cd       	rjmp	.-1128   	; 0x182a <__vector_18+0x12e>
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    if(vel == 12)
     {
		  vel = 0xFF;
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	80 93 04 01 	sts	0x0104, r24
    1c98:	16 ce       	rjmp	.-980    	; 0x18c6 <__vector_18+0x1ca>
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    if(time == 7)
    {
      time = 0xFF;
    1c9a:	8f ef       	ldi	r24, 0xFF	; 255
    1c9c:	80 93 01 01 	sts	0x0101, r24
      ///* * The Entire message has been read
      message_end = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	80 93 89 01 	sts	0x0189, r24
    1ca6:	68 ce       	rjmp	.-816    	; 0x1978 <__vector_18+0x27c>
		
	}
	else if(vel < 8)
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    1ca8:	80 91 15 04 	lds	r24, 0x0415
    1cac:	90 91 16 04 	lds	r25, 0x0416
    1cb0:	a0 91 17 04 	lds	r26, 0x0417
    1cb4:	b0 91 18 04 	lds	r27, 0x0418
    1cb8:	89 2f       	mov	r24, r25
    1cba:	9a 2f       	mov	r25, r26
    1cbc:	ab 2f       	mov	r26, r27
    1cbe:	bb 27       	eor	r27, r27
    1cc0:	a7 fd       	sbrc	r26, 7
    1cc2:	ba 95       	dec	r27
    1cc4:	80 93 15 04 	sts	0x0415, r24
    1cc8:	90 93 16 04 	sts	0x0416, r25
    1ccc:	a0 93 17 04 	sts	0x0417, r26
    1cd0:	b0 93 18 04 	sts	0x0418, r27
		Current_state.gps.v_y &= 0x00FFFFFF;
    1cd4:	80 91 15 04 	lds	r24, 0x0415
    1cd8:	90 91 16 04 	lds	r25, 0x0416
    1cdc:	a0 91 17 04 	lds	r26, 0x0417
    1ce0:	b0 91 18 04 	lds	r27, 0x0418
    1ce4:	bb 27       	eor	r27, r27
    1ce6:	80 93 15 04 	sts	0x0415, r24
    1cea:	90 93 16 04 	sts	0x0416, r25
    1cee:	a0 93 17 04 	sts	0x0417, r26
    1cf2:	b0 93 18 04 	sts	0x0418, r27
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    1cf6:	80 91 15 04 	lds	r24, 0x0415
    1cfa:	90 91 16 04 	lds	r25, 0x0416
    1cfe:	a0 91 17 04 	lds	r26, 0x0417
    1d02:	b0 91 18 04 	lds	r27, 0x0418
    1d06:	20 91 8a 01 	lds	r18, 0x018A
    1d0a:	b2 2b       	or	r27, r18
    1d0c:	80 93 15 04 	sts	0x0415, r24
    1d10:	90 93 16 04 	sts	0x0416, r25
    1d14:	a0 93 17 04 	sts	0x0417, r26
    1d18:	b0 93 18 04 	sts	0x0418, r27
    1d1c:	ca cd       	rjmp	.-1132   	; 0x18b2 <__vector_18+0x1b6>
  if(geo < 16)
  {
	if(geo < 4);  
    else if(geo < 8)
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    1d1e:	80 91 1d 04 	lds	r24, 0x041D
    1d22:	90 91 1e 04 	lds	r25, 0x041E
    1d26:	a0 91 1f 04 	lds	r26, 0x041F
    1d2a:	b0 91 20 04 	lds	r27, 0x0420
    1d2e:	89 2f       	mov	r24, r25
    1d30:	9a 2f       	mov	r25, r26
    1d32:	ab 2f       	mov	r26, r27
    1d34:	bb 27       	eor	r27, r27
    1d36:	a7 fd       	sbrc	r26, 7
    1d38:	ba 95       	dec	r27
    1d3a:	80 93 1d 04 	sts	0x041D, r24
    1d3e:	90 93 1e 04 	sts	0x041E, r25
    1d42:	a0 93 1f 04 	sts	0x041F, r26
    1d46:	b0 93 20 04 	sts	0x0420, r27
		Current_state.gps.lat &= 0x00FFFFFF;
    1d4a:	80 91 1d 04 	lds	r24, 0x041D
    1d4e:	90 91 1e 04 	lds	r25, 0x041E
    1d52:	a0 91 1f 04 	lds	r26, 0x041F
    1d56:	b0 91 20 04 	lds	r27, 0x0420
    1d5a:	bb 27       	eor	r27, r27
    1d5c:	80 93 1d 04 	sts	0x041D, r24
    1d60:	90 93 1e 04 	sts	0x041E, r25
    1d64:	a0 93 1f 04 	sts	0x041F, r26
    1d68:	b0 93 20 04 	sts	0x0420, r27
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    1d6c:	80 91 1d 04 	lds	r24, 0x041D
    1d70:	90 91 1e 04 	lds	r25, 0x041E
    1d74:	a0 91 1f 04 	lds	r26, 0x041F
    1d78:	b0 91 20 04 	lds	r27, 0x0420
    1d7c:	20 91 8a 01 	lds	r18, 0x018A
    1d80:	b2 2b       	or	r27, r18
    1d82:	80 93 1d 04 	sts	0x041D, r24
    1d86:	90 93 1e 04 	sts	0x041E, r25
    1d8a:	a0 93 1f 04 	sts	0x041F, r26
    1d8e:	b0 93 20 04 	sts	0x0420, r27
    1d92:	d2 cd       	rjmp	.-1116   	; 0x1938 <__vector_18+0x23c>
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    1d94:	80 91 09 04 	lds	r24, 0x0409
    1d98:	90 91 0a 04 	lds	r25, 0x040A
    1d9c:	a0 91 0b 04 	lds	r26, 0x040B
    1da0:	b0 91 0c 04 	lds	r27, 0x040C
    1da4:	89 2f       	mov	r24, r25
    1da6:	9a 2f       	mov	r25, r26
    1da8:	ab 2f       	mov	r26, r27
    1daa:	bb 27       	eor	r27, r27
    1dac:	a7 fd       	sbrc	r26, 7
    1dae:	ba 95       	dec	r27
    1db0:	80 93 09 04 	sts	0x0409, r24
    1db4:	90 93 0a 04 	sts	0x040A, r25
    1db8:	a0 93 0b 04 	sts	0x040B, r26
    1dbc:	b0 93 0c 04 	sts	0x040C, r27
		Current_state.gps.y &= 0x00FFFFFF;
    1dc0:	80 91 09 04 	lds	r24, 0x0409
    1dc4:	90 91 0a 04 	lds	r25, 0x040A
    1dc8:	a0 91 0b 04 	lds	r26, 0x040B
    1dcc:	b0 91 0c 04 	lds	r27, 0x040C
    1dd0:	bb 27       	eor	r27, r27
    1dd2:	80 93 09 04 	sts	0x0409, r24
    1dd6:	90 93 0a 04 	sts	0x040A, r25
    1dda:	a0 93 0b 04 	sts	0x040B, r26
    1dde:	b0 93 0c 04 	sts	0x040C, r27
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    1de2:	80 91 09 04 	lds	r24, 0x0409
    1de6:	90 91 0a 04 	lds	r25, 0x040A
    1dea:	a0 91 0b 04 	lds	r26, 0x040B
    1dee:	b0 91 0c 04 	lds	r27, 0x040C
    1df2:	20 91 8a 01 	lds	r18, 0x018A
    1df6:	b2 2b       	or	r27, r18
    1df8:	80 93 09 04 	sts	0x0409, r24
    1dfc:	90 93 0a 04 	sts	0x040A, r25
    1e00:	a0 93 0b 04 	sts	0x040B, r26
    1e04:	b0 93 0c 04 	sts	0x040C, r27
    1e08:	06 cd       	rjmp	.-1524   	; 0x1816 <__vector_18+0x11a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    geo = 0;
  ///Time
  else if(buffer == 0x3F3F0FAC)
    time = 0;
    1e0a:	10 92 01 01 	sts	0x0101, r1
    1e0e:	fa cd       	rjmp	.-1036   	; 0x1a04 <__vector_18+0x308>
	  {
		  Current_state.gps.hours = last_byte;
	  }
	  else if(time == 1)
	  {
		  Current_state.gps.minutes = last_byte;
    1e10:	80 91 8a 01 	lds	r24, 0x018A
    1e14:	80 93 2a 04 	sts	0x042A, r24
    1e18:	a5 cd       	rjmp	.-1206   	; 0x1964 <__vector_18+0x268>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    dop = 0;
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    geo = 0;
    1e1a:	10 92 02 01 	sts	0x0102, r1
    1e1e:	f2 cd       	rjmp	.-1052   	; 0x1a04 <__vector_18+0x308>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
		Current_state.gps.lon &= 0x00FFFFFF;
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
	}
	else if(geo < 16 )
    1e20:	80 91 02 01 	lds	r24, 0x0102
    1e24:	80 31       	cpi	r24, 0x10	; 16
    1e26:	08 f0       	brcs	.+2      	; 0x1e2a <__vector_18+0x72e>
    1e28:	87 cd       	rjmp	.-1266   	; 0x1938 <__vector_18+0x23c>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    1e2a:	80 91 25 04 	lds	r24, 0x0425
    1e2e:	90 91 26 04 	lds	r25, 0x0426
    1e32:	a0 91 27 04 	lds	r26, 0x0427
    1e36:	b0 91 28 04 	lds	r27, 0x0428
    1e3a:	89 2f       	mov	r24, r25
    1e3c:	9a 2f       	mov	r25, r26
    1e3e:	ab 2f       	mov	r26, r27
    1e40:	bb 27       	eor	r27, r27
    1e42:	a7 fd       	sbrc	r26, 7
    1e44:	ba 95       	dec	r27
    1e46:	80 93 25 04 	sts	0x0425, r24
    1e4a:	90 93 26 04 	sts	0x0426, r25
    1e4e:	a0 93 27 04 	sts	0x0427, r26
    1e52:	b0 93 28 04 	sts	0x0428, r27
		Current_state.gps.alt &= 0x00FFFFFF;
    1e56:	80 91 25 04 	lds	r24, 0x0425
    1e5a:	90 91 26 04 	lds	r25, 0x0426
    1e5e:	a0 91 27 04 	lds	r26, 0x0427
    1e62:	b0 91 28 04 	lds	r27, 0x0428
    1e66:	bb 27       	eor	r27, r27
    1e68:	80 93 25 04 	sts	0x0425, r24
    1e6c:	90 93 26 04 	sts	0x0426, r25
    1e70:	a0 93 27 04 	sts	0x0427, r26
    1e74:	b0 93 28 04 	sts	0x0428, r27
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    1e78:	80 91 25 04 	lds	r24, 0x0425
    1e7c:	90 91 26 04 	lds	r25, 0x0426
    1e80:	a0 91 27 04 	lds	r26, 0x0427
    1e84:	b0 91 28 04 	lds	r27, 0x0428
    1e88:	20 91 8a 01 	lds	r18, 0x018A
    1e8c:	b2 2b       	or	r27, r18
    1e8e:	80 93 25 04 	sts	0x0425, r24
    1e92:	90 93 26 04 	sts	0x0426, r25
    1e96:	a0 93 27 04 	sts	0x0427, r26
    1e9a:	b0 93 28 04 	sts	0x0428, r27
    1e9e:	4c cd       	rjmp	.-1384   	; 0x1938 <__vector_18+0x23c>
	  {
		  Current_state.gps.minutes = last_byte;
	  }
	  else if(time == 2)
	  {
		  Current_state.gps.seconds = last_byte;
    1ea0:	80 91 8a 01 	lds	r24, 0x018A
    1ea4:	80 93 2b 04 	sts	0x042B, r24
    1ea8:	5d cd       	rjmp	.-1350   	; 0x1964 <__vector_18+0x268>
	  }
	  else if(time == 3)
	  {
		  Current_state.gps.date = last_byte;
    1eaa:	80 91 8a 01 	lds	r24, 0x018A
    1eae:	80 93 2c 04 	sts	0x042C, r24
    1eb2:	58 cd       	rjmp	.-1360   	; 0x1964 <__vector_18+0x268>
	  }else if(time == 4)
	  {
		  Current_state.gps.month = last_byte;
    1eb4:	80 91 8a 01 	lds	r24, 0x018A
    1eb8:	80 93 2d 04 	sts	0x042D, r24
    1ebc:	53 cd       	rjmp	.-1370   	; 0x1964 <__vector_18+0x268>

00001ebe <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    1ebe:	2f 92       	push	r2
    1ec0:	3f 92       	push	r3
    1ec2:	4f 92       	push	r4
    1ec4:	5f 92       	push	r5
    1ec6:	6f 92       	push	r6
    1ec8:	7f 92       	push	r7
    1eca:	8f 92       	push	r8
    1ecc:	9f 92       	push	r9
    1ece:	af 92       	push	r10
    1ed0:	bf 92       	push	r11
    1ed2:	cf 92       	push	r12
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	c7 55       	subi	r28, 0x57	; 87
    1ee8:	d1 09       	sbc	r29, r1
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	49 87       	std	Y+9, r20	; 0x09
    1ef8:	5a 87       	std	Y+10, r21	; 0x0a
    1efa:	6b 87       	std	Y+11, r22	; 0x0b
    1efc:	7c 87       	std	Y+12, r23	; 0x0c
    1efe:	32 2e       	mov	r3, r18
    1f00:	66 96       	adiw	r28, 0x16	; 22
    1f02:	1f af       	std	Y+63, r17	; 0x3f
    1f04:	0e af       	std	Y+62, r16	; 0x3e
    1f06:	66 97       	sbiw	r28, 0x16	; 22
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
    1f08:	80 80       	ld	r8, Z
    1f0a:	91 80       	ldd	r9, Z+1	; 0x01
    1f0c:	a2 80       	ldd	r10, Z+2	; 0x02
    1f0e:	b3 80       	ldd	r11, Z+3	; 0x03
    1f10:	c4 80       	ldd	r12, Z+4	; 0x04
    1f12:	d5 80       	ldd	r13, Z+5	; 0x05
    1f14:	e6 80       	ldd	r14, Z+6	; 0x06
    1f16:	f7 80       	ldd	r15, Z+7	; 0x07
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	54 e4       	ldi	r21, 0x44	; 68
    1f20:	60 85       	ldd	r22, Z+8	; 0x08
    1f22:	71 85       	ldd	r23, Z+9	; 0x09
    1f24:	82 85       	ldd	r24, Z+10	; 0x0a
    1f26:	93 85       	ldd	r25, Z+11	; 0x0b
    1f28:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    1f2c:	6d 87       	std	Y+13, r22	; 0x0d
    1f2e:	7e 87       	std	Y+14, r23	; 0x0e
    1f30:	8f 87       	std	Y+15, r24	; 0x0f
    1f32:	98 8b       	std	Y+16, r25	; 0x10
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
    1f34:	c5 01       	movw	r24, r10
    1f36:	b4 01       	movw	r22, r8
    1f38:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    1f3c:	2b 01       	movw	r4, r22
    1f3e:	3c 01       	movw	r6, r24
    1f40:	c5 01       	movw	r24, r10
    1f42:	b4 01       	movw	r22, r8
    1f44:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    1f48:	6d 83       	std	Y+5, r22	; 0x05
    1f4a:	7e 83       	std	Y+6, r23	; 0x06
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    1f4e:	98 87       	std	Y+8, r25	; 0x08
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 ee       	ldi	r19, 0xE0	; 224
    1f54:	4b ef       	ldi	r20, 0xFB	; 251
    1f56:	54 e4       	ldi	r21, 0x44	; 68
    1f58:	69 85       	ldd	r22, Y+9	; 0x09
    1f5a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f60:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    1f64:	23 96       	adiw	r28, 0x03	; 3
    1f66:	6c af       	std	Y+60, r22	; 0x3c
    1f68:	7d af       	std	Y+61, r23	; 0x3d
    1f6a:	8e af       	std	Y+62, r24	; 0x3e
    1f6c:	9f af       	std	Y+63, r25	; 0x3f
    1f6e:	23 97       	sbiw	r28, 0x03	; 3
  float agh_p, dgh_p;
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    1f70:	c7 01       	movw	r24, r14
    1f72:	b6 01       	movw	r22, r12
    1f74:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    1f78:	60 93 cf 01 	sts	0x01CF, r22
    1f7c:	70 93 d0 01 	sts	0x01D0, r23
    1f80:	80 93 d1 01 	sts	0x01D1, r24
    1f84:	90 93 d2 01 	sts	0x01D2, r25
  sl[1] = sin(lon);
    1f88:	c7 01       	movw	r24, r14
    1f8a:	b6 01       	movw	r22, r12
    1f8c:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    1f90:	60 93 93 01 	sts	0x0193, r22
    1f94:	70 93 94 01 	sts	0x0194, r23
    1f98:	80 93 95 01 	sts	0x0195, r24
    1f9c:	90 93 96 01 	sts	0x0196, r25
  one = A2 * clat * clat;
    1fa0:	2e e2       	ldi	r18, 0x2E	; 46
    1fa2:	3f e2       	ldi	r19, 0x2F	; 47
    1fa4:	4b e1       	ldi	r20, 0x1B	; 27
    1fa6:	5c e4       	ldi	r21, 0x4C	; 76
    1fa8:	6d 81       	ldd	r22, Y+5	; 0x05
    1faa:	7e 81       	ldd	r23, Y+6	; 0x06
    1fac:	8f 81       	ldd	r24, Y+7	; 0x07
    1fae:	98 85       	ldd	r25, Y+8	; 0x08
    1fb0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1fb4:	2d 81       	ldd	r18, Y+5	; 0x05
    1fb6:	3e 81       	ldd	r19, Y+6	; 0x06
    1fb8:	4f 81       	ldd	r20, Y+7	; 0x07
    1fba:	58 85       	ldd	r21, Y+8	; 0x08
    1fbc:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1fc0:	4b 01       	movw	r8, r22
    1fc2:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    1fc4:	2b e3       	ldi	r18, 0x3B	; 59
    1fc6:	35 e2       	ldi	r19, 0x25	; 37
    1fc8:	4a e1       	ldi	r20, 0x1A	; 26
    1fca:	5c e4       	ldi	r21, 0x4C	; 76
    1fcc:	c3 01       	movw	r24, r6
    1fce:	b2 01       	movw	r22, r4
    1fd0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1fd4:	a3 01       	movw	r20, r6
    1fd6:	92 01       	movw	r18, r4
    1fd8:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    1fdc:	6b 01       	movw	r12, r22
    1fde:	7c 01       	movw	r14, r24
  three = one + two;
    1fe0:	9b 01       	movw	r18, r22
    1fe2:	ac 01       	movw	r20, r24
    1fe4:	c5 01       	movw	r24, r10
    1fe6:	b4 01       	movw	r22, r8
    1fe8:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    1fec:	69 8f       	std	Y+25, r22	; 0x19
    1fee:	7a 8f       	std	Y+26, r23	; 0x1a
    1ff0:	8b 8f       	std	Y+27, r24	; 0x1b
    1ff2:	9c 8f       	std	Y+28, r25	; 0x1c
  four = sqrt(three);
    1ff4:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    1ff8:	69 87       	std	Y+9, r22	; 0x09
    1ffa:	7a 87       	std	Y+10, r23	; 0x0a
    1ffc:	8b 87       	std	Y+11, r24	; 0x0b
    1ffe:	9c 87       	std	Y+12, r25	; 0x0c
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24
    2004:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2008:	2d 85       	ldd	r18, Y+13	; 0x0d
    200a:	3e 85       	ldd	r19, Y+14	; 0x0e
    200c:	4f 85       	ldd	r20, Y+15	; 0x0f
    200e:	58 89       	ldd	r21, Y+16	; 0x10
    2010:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2014:	2d 85       	ldd	r18, Y+13	; 0x0d
    2016:	3e 85       	ldd	r19, Y+14	; 0x0e
    2018:	4f 85       	ldd	r20, Y+15	; 0x0f
    201a:	58 89       	ldd	r21, Y+16	; 0x10
    201c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2020:	6d 8f       	std	Y+29, r22	; 0x1d
    2022:	7e 8f       	std	Y+30, r23	; 0x1e
    2024:	8f 8f       	std	Y+31, r24	; 0x1f
    2026:	98 a3       	std	Y+32, r25	; 0x20
    2028:	2e e2       	ldi	r18, 0x2E	; 46
    202a:	3f e2       	ldi	r19, 0x2F	; 47
    202c:	4b e1       	ldi	r20, 0x1B	; 27
    202e:	5c e4       	ldi	r21, 0x4C	; 76
    2030:	c5 01       	movw	r24, r10
    2032:	b4 01       	movw	r22, r8
    2034:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2038:	4b 01       	movw	r8, r22
    203a:	5c 01       	movw	r10, r24
    203c:	2b e3       	ldi	r18, 0x3B	; 59
    203e:	35 e2       	ldi	r19, 0x25	; 37
    2040:	4a e1       	ldi	r20, 0x1A	; 26
    2042:	5c e4       	ldi	r21, 0x4C	; 76
    2044:	c7 01       	movw	r24, r14
    2046:	b6 01       	movw	r22, r12
    2048:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	c5 01       	movw	r24, r10
    2052:	b4 01       	movw	r22, r8
    2054:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2058:	29 8d       	ldd	r18, Y+25	; 0x19
    205a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    205c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    205e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2060:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2064:	9b 01       	movw	r18, r22
    2066:	ac 01       	movw	r20, r24
    2068:	6d 8d       	ldd	r22, Y+29	; 0x1d
    206a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    206c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    206e:	98 a1       	ldd	r25, Y+32	; 0x20
    2070:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2074:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    2078:	4b 01       	movw	r8, r22
    207a:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    207c:	29 85       	ldd	r18, Y+9	; 0x09
    207e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2080:	4b 85       	ldd	r20, Y+11	; 0x0b
    2082:	5c 85       	ldd	r21, Y+12	; 0x0c
    2084:	6d 85       	ldd	r22, Y+13	; 0x0d
    2086:	7e 85       	ldd	r23, Y+14	; 0x0e
    2088:	8f 85       	ldd	r24, Y+15	; 0x0f
    208a:	98 89       	ldd	r25, Y+16	; 0x10
    208c:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2090:	a5 01       	movw	r20, r10
    2092:	94 01       	movw	r18, r8
    2094:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2098:	60 96       	adiw	r28, 0x10	; 16
    209a:	6c af       	std	Y+60, r22	; 0x3c
    209c:	7d af       	std	Y+61, r23	; 0x3d
    209e:	8e af       	std	Y+62, r24	; 0x3e
    20a0:	9f af       	std	Y+63, r25	; 0x3f
    20a2:	60 97       	sbiw	r28, 0x10	; 16
  sd = ((A2 - B2) * slat * clat) / (four * r);
    20a4:	20 e8       	ldi	r18, 0x80	; 128
    20a6:	39 ef       	ldi	r19, 0xF9	; 249
    20a8:	44 e8       	ldi	r20, 0x84	; 132
    20aa:	58 e4       	ldi	r21, 0x48	; 72
    20ac:	c3 01       	movw	r24, r6
    20ae:	b2 01       	movw	r22, r4
    20b0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    20b4:	2d 81       	ldd	r18, Y+5	; 0x05
    20b6:	3e 81       	ldd	r19, Y+6	; 0x06
    20b8:	4f 81       	ldd	r20, Y+7	; 0x07
    20ba:	58 85       	ldd	r21, Y+8	; 0x08
    20bc:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    20c0:	6b 01       	movw	r12, r22
    20c2:	7c 01       	movw	r14, r24
    20c4:	a5 01       	movw	r20, r10
    20c6:	94 01       	movw	r18, r8
    20c8:	69 85       	ldd	r22, Y+9	; 0x09
    20ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    20cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    20d0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    20d4:	9b 01       	movw	r18, r22
    20d6:	ac 01       	movw	r20, r24
    20d8:	c7 01       	movw	r24, r14
    20da:	b6 01       	movw	r22, r12
    20dc:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    20e0:	64 96       	adiw	r28, 0x14	; 20
    20e2:	6c af       	std	Y+60, r22	; 0x3c
    20e4:	7d af       	std	Y+61, r23	; 0x3d
    20e6:	8e af       	std	Y+62, r24	; 0x3e
    20e8:	9f af       	std	Y+63, r25	; 0x3f
    20ea:	64 97       	sbiw	r28, 0x14	; 20
  slat = slat * cd - clat * sd;
    20ec:	60 96       	adiw	r28, 0x10	; 16
    20ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    20f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    20f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    20f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    20f6:	60 97       	sbiw	r28, 0x10	; 16
    20f8:	c3 01       	movw	r24, r6
    20fa:	b2 01       	movw	r22, r4
    20fc:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2100:	6b 01       	movw	r12, r22
    2102:	7c 01       	movw	r14, r24
    2104:	64 96       	adiw	r28, 0x14	; 20
    2106:	2c ad       	ldd	r18, Y+60	; 0x3c
    2108:	3d ad       	ldd	r19, Y+61	; 0x3d
    210a:	4e ad       	ldd	r20, Y+62	; 0x3e
    210c:	5f ad       	ldd	r21, Y+63	; 0x3f
    210e:	64 97       	sbiw	r28, 0x14	; 20
    2110:	6d 81       	ldd	r22, Y+5	; 0x05
    2112:	7e 81       	ldd	r23, Y+6	; 0x06
    2114:	8f 81       	ldd	r24, Y+7	; 0x07
    2116:	98 85       	ldd	r25, Y+8	; 0x08
    2118:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    211c:	9b 01       	movw	r18, r22
    211e:	ac 01       	movw	r20, r24
    2120:	c7 01       	movw	r24, r14
    2122:	b6 01       	movw	r22, r12
    2124:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    2128:	6a a7       	std	Y+42, r22	; 0x2a
    212a:	7b a7       	std	Y+43, r23	; 0x2b
    212c:	8c a7       	std	Y+44, r24	; 0x2c
    212e:	9d a7       	std	Y+45, r25	; 0x2d
  clat = clat * cd + one * sd;
    2130:	60 96       	adiw	r28, 0x10	; 16
    2132:	2c ad       	ldd	r18, Y+60	; 0x3c
    2134:	3d ad       	ldd	r19, Y+61	; 0x3d
    2136:	4e ad       	ldd	r20, Y+62	; 0x3e
    2138:	5f ad       	ldd	r21, Y+63	; 0x3f
    213a:	60 97       	sbiw	r28, 0x10	; 16
    213c:	6d 81       	ldd	r22, Y+5	; 0x05
    213e:	7e 81       	ldd	r23, Y+6	; 0x06
    2140:	8f 81       	ldd	r24, Y+7	; 0x07
    2142:	98 85       	ldd	r25, Y+8	; 0x08
    2144:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2148:	6b 01       	movw	r12, r22
    214a:	7c 01       	movw	r14, r24
    214c:	64 96       	adiw	r28, 0x14	; 20
    214e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2150:	3d ad       	ldd	r19, Y+61	; 0x3d
    2152:	4e ad       	ldd	r20, Y+62	; 0x3e
    2154:	5f ad       	ldd	r21, Y+63	; 0x3f
    2156:	64 97       	sbiw	r28, 0x14	; 20
    2158:	c3 01       	movw	r24, r6
    215a:	b2 01       	movw	r22, r4
    215c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2160:	9b 01       	movw	r18, r22
    2162:	ac 01       	movw	r20, r24
    2164:	c7 01       	movw	r24, r14
    2166:	b6 01       	movw	r22, r12
    2168:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    216c:	6e a3       	std	Y+38, r22	; 0x26
    216e:	7f a3       	std	Y+39, r23	; 0x27
    2170:	88 a7       	std	Y+40, r24	; 0x28
    2172:	99 a7       	std	Y+41, r25	; 0x29
  
  p[1] = 2.0 * slat;
    2174:	2a a5       	ldd	r18, Y+42	; 0x2a
    2176:	3b a5       	ldd	r19, Y+43	; 0x2b
    2178:	4c a5       	ldd	r20, Y+44	; 0x2c
    217a:	5d a5       	ldd	r21, Y+45	; 0x2d
    217c:	ca 01       	movw	r24, r20
    217e:	b9 01       	movw	r22, r18
    2180:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2184:	60 93 d3 02 	sts	0x02D3, r22
    2188:	70 93 d4 02 	sts	0x02D4, r23
    218c:	80 93 d5 02 	sts	0x02D5, r24
    2190:	90 93 d6 02 	sts	0x02D6, r25
  p[2] = 2.0 * clat;
    2194:	2e a1       	ldd	r18, Y+38	; 0x26
    2196:	3f a1       	ldd	r19, Y+39	; 0x27
    2198:	48 a5       	ldd	r20, Y+40	; 0x28
    219a:	59 a5       	ldd	r21, Y+41	; 0x29
    219c:	ca 01       	movw	r24, r20
    219e:	b9 01       	movw	r22, r18
    21a0:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    21a4:	60 93 d7 02 	sts	0x02D7, r22
    21a8:	70 93 d8 02 	sts	0x02D8, r23
    21ac:	80 93 d9 02 	sts	0x02D9, r24
    21b0:	90 93 da 02 	sts	0x02DA, r25
  p[3] = 4.5 * slat * slat - 1.5;
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e9       	ldi	r20, 0x90	; 144
    21ba:	50 e4       	ldi	r21, 0x40	; 64
    21bc:	6a a5       	ldd	r22, Y+42	; 0x2a
    21be:	7b a5       	ldd	r23, Y+43	; 0x2b
    21c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    21c2:	9d a5       	ldd	r25, Y+45	; 0x2d
    21c4:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    21c8:	2a a5       	ldd	r18, Y+42	; 0x2a
    21ca:	3b a5       	ldd	r19, Y+43	; 0x2b
    21cc:	4c a5       	ldd	r20, Y+44	; 0x2c
    21ce:	5d a5       	ldd	r21, Y+45	; 0x2d
    21d0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 ec       	ldi	r20, 0xC0	; 192
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    21e0:	60 93 db 02 	sts	0x02DB, r22
    21e4:	70 93 dc 02 	sts	0x02DC, r23
    21e8:	80 93 dd 02 	sts	0x02DD, r24
    21ec:	90 93 de 02 	sts	0x02DE, r25
  p[4] = sqrt(27) * clat * slat;
    21f0:	21 ee       	ldi	r18, 0xE1	; 225
    21f2:	36 e4       	ldi	r19, 0x46	; 70
    21f4:	46 ea       	ldi	r20, 0xA6	; 166
    21f6:	50 e4       	ldi	r21, 0x40	; 64
    21f8:	6e a1       	ldd	r22, Y+38	; 0x26
    21fa:	7f a1       	ldd	r23, Y+39	; 0x27
    21fc:	88 a5       	ldd	r24, Y+40	; 0x28
    21fe:	99 a5       	ldd	r25, Y+41	; 0x29
    2200:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2204:	2a a5       	ldd	r18, Y+42	; 0x2a
    2206:	3b a5       	ldd	r19, Y+43	; 0x2b
    2208:	4c a5       	ldd	r20, Y+44	; 0x2c
    220a:	5d a5       	ldd	r21, Y+45	; 0x2d
    220c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2210:	60 93 df 02 	sts	0x02DF, r22
    2214:	70 93 e0 02 	sts	0x02E0, r23
    2218:	80 93 e1 02 	sts	0x02E1, r24
    221c:	90 93 e2 02 	sts	0x02E2, r25
  q[1] = -1 * clat;
    2220:	8e a1       	ldd	r24, Y+38	; 0x26
    2222:	9f a1       	ldd	r25, Y+39	; 0x27
    2224:	a8 a5       	ldd	r26, Y+40	; 0x28
    2226:	b9 a5       	ldd	r27, Y+41	; 0x29
    2228:	b0 58       	subi	r27, 0x80	; 128
    222a:	80 93 0b 02 	sts	0x020B, r24
    222e:	90 93 0c 02 	sts	0x020C, r25
    2232:	a0 93 0d 02 	sts	0x020D, r26
    2236:	b0 93 0e 02 	sts	0x020E, r27
  q[2] = slat;
    223a:	2a a5       	ldd	r18, Y+42	; 0x2a
    223c:	3b a5       	ldd	r19, Y+43	; 0x2b
    223e:	4c a5       	ldd	r20, Y+44	; 0x2c
    2240:	5d a5       	ldd	r21, Y+45	; 0x2d
    2242:	20 93 0f 02 	sts	0x020F, r18
    2246:	30 93 10 02 	sts	0x0210, r19
    224a:	40 93 11 02 	sts	0x0211, r20
    224e:	50 93 12 02 	sts	0x0212, r21
  q[3] = -3.0 * clat * slat;
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e4       	ldi	r20, 0x40	; 64
    2258:	50 ec       	ldi	r21, 0xC0	; 192
    225a:	6e a1       	ldd	r22, Y+38	; 0x26
    225c:	7f a1       	ldd	r23, Y+39	; 0x27
    225e:	88 a5       	ldd	r24, Y+40	; 0x28
    2260:	99 a5       	ldd	r25, Y+41	; 0x29
    2262:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2266:	2a a5       	ldd	r18, Y+42	; 0x2a
    2268:	3b a5       	ldd	r19, Y+43	; 0x2b
    226a:	4c a5       	ldd	r20, Y+44	; 0x2c
    226c:	5d a5       	ldd	r21, Y+45	; 0x2d
    226e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2272:	60 93 13 02 	sts	0x0213, r22
    2276:	70 93 14 02 	sts	0x0214, r23
    227a:	80 93 15 02 	sts	0x0215, r24
    227e:	90 93 16 02 	sts	0x0216, r25
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2282:	2a a5       	ldd	r18, Y+42	; 0x2a
    2284:	3b a5       	ldd	r19, Y+43	; 0x2b
    2286:	4c a5       	ldd	r20, Y+44	; 0x2c
    2288:	5d a5       	ldd	r21, Y+45	; 0x2d
    228a:	ca 01       	movw	r24, r20
    228c:	b9 01       	movw	r22, r18
    228e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2292:	6b 01       	movw	r12, r22
    2294:	7c 01       	movw	r14, r24
    2296:	2e a1       	ldd	r18, Y+38	; 0x26
    2298:	3f a1       	ldd	r19, Y+39	; 0x27
    229a:	48 a5       	ldd	r20, Y+40	; 0x28
    229c:	59 a5       	ldd	r21, Y+41	; 0x29
    229e:	ca 01       	movw	r24, r20
    22a0:	b9 01       	movw	r22, r18
    22a2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    22a6:	9b 01       	movw	r18, r22
    22a8:	ac 01       	movw	r20, r24
    22aa:	c7 01       	movw	r24, r14
    22ac:	b6 01       	movw	r22, r12
    22ae:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    22b2:	27 ed       	ldi	r18, 0xD7	; 215
    22b4:	33 eb       	ldi	r19, 0xB3	; 179
    22b6:	4d ed       	ldi	r20, 0xDD	; 221
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    22be:	60 93 17 02 	sts	0x0217, r22
    22c2:	70 93 18 02 	sts	0x0218, r23
    22c6:	80 93 19 02 	sts	0x0219, r24
    22ca:	90 93 1a 02 	sts	0x021A, r25
  
  ratio = RE / r;
    22ce:	a5 01       	movw	r20, r10
    22d0:	94 01       	movw	r18, r8
    22d2:	6a e9       	ldi	r22, 0x9A	; 154
    22d4:	79 e1       	ldi	r23, 0x19	; 25
    22d6:	87 ec       	ldi	r24, 0xC7	; 199
    22d8:	95 e4       	ldi	r25, 0x45	; 69
    22da:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    22de:	2c 96       	adiw	r28, 0x0c	; 12
    22e0:	6c af       	std	Y+60, r22	; 0x3c
    22e2:	7d af       	std	Y+61, r23	; 0x3d
    22e4:	8e af       	std	Y+62, r24	; 0x3e
    22e6:	9f af       	std	Y+63, r25	; 0x3f
    22e8:	2c 97       	sbiw	r28, 0x0c	; 12
  
  max = (order * (order + 3)) / 2;
    22ea:	43 2d       	mov	r20, r3
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	9a 01       	movw	r18, r20
    22f0:	2d 5f       	subi	r18, 0xFD	; 253
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
    22f4:	42 9f       	mul	r20, r18
    22f6:	c0 01       	movw	r24, r0
    22f8:	43 9f       	mul	r20, r19
    22fa:	90 0d       	add	r25, r0
    22fc:	52 9f       	mul	r21, r18
    22fe:	90 0d       	add	r25, r0
    2300:	11 24       	eor	r1, r1
    2302:	95 95       	asr	r25
    2304:	87 95       	ror	r24
    2306:	24 96       	adiw	r28, 0x04	; 4
    2308:	8f af       	std	Y+63, r24	; 0x3f
    230a:	24 97       	sbiw	r28, 0x04	; 4
  for(k = 1; k <= max; k++)
    230c:	88 23       	and	r24, r24
    230e:	09 f4       	brne	.+2      	; 0x2312 <igrf+0x454>
    2310:	95 c4       	rjmp	.+2346   	; 0x2c3c <igrf+0xd7e>
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
  float agh_p, dgh_p;
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2312:	19 8e       	std	Y+25, r1	; 0x19
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    2314:	31 e0       	ldi	r19, 0x01	; 1
    2316:	39 87       	std	Y+9, r19	; 0x09
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
  float agh_p, dgh_p;
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2318:	1d 86       	std	Y+13, r1	; 0x0d
    231a:	41 e0       	ldi	r20, 0x01	; 1
    231c:	49 a3       	std	Y+33, r20	; 0x21
    231e:	51 e0       	ldi	r21, 0x01	; 1
    2320:	5d 8f       	std	Y+29, r21	; 0x1d
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
    2322:	1b ae       	std	Y+59, r1	; 0x3b
    2324:	1c ae       	std	Y+60, r1	; 0x3c
    2326:	1d ae       	std	Y+61, r1	; 0x3d
    2328:	1e ae       	std	Y+62, r1	; 0x3e
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
    232a:	1e aa       	std	Y+54, r1	; 0x36
    232c:	1f aa       	std	Y+55, r1	; 0x37
    232e:	18 ae       	std	Y+56, r1	; 0x38
    2330:	19 ae       	std	Y+57, r1	; 0x39
    2332:	28 96       	adiw	r28, 0x08	; 8
    2334:	1c ae       	std	Y+60, r1	; 0x3c
    2336:	1d ae       	std	Y+61, r1	; 0x3d
    2338:	1e ae       	std	Y+62, r1	; 0x3e
    233a:	1f ae       	std	Y+63, r1	; 0x3f
    233c:	28 97       	sbiw	r28, 0x08	; 8
    233e:	1a aa       	std	Y+50, r1	; 0x32
    2340:	1b aa       	std	Y+51, r1	; 0x33
    2342:	1c aa       	std	Y+52, r1	; 0x34
    2344:	1d aa       	std	Y+53, r1	; 0x35
    2346:	93 c1       	rjmp	.+806    	; 0x266e <igrf+0x7b0>
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	a8 2f       	mov	r26, r24
    234c:	af 5f       	subi	r26, 0xFF	; 255
    234e:	a9 a3       	std	Y+33, r26	; 0x21
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2350:	29 85       	ldd	r18, Y+9	; 0x09
    2352:	25 30       	cpi	r18, 0x05	; 5
    2354:	08 f4       	brcc	.+2      	; 0x2358 <igrf+0x49a>
    2356:	81 c4       	rjmp	.+2306   	; 0x2c5a <igrf+0xd9c>
    {
      if(m == n)
    2358:	3d 81       	ldd	r19, Y+5	; 0x05
    235a:	4d 85       	ldd	r20, Y+13	; 0x0d
    235c:	34 17       	cp	r19, r20
    235e:	09 f4       	brne	.+2      	; 0x2362 <igrf+0x4a4>
    2360:	29 c3       	rjmp	.+1618   	; 0x29b4 <igrf+0xaf6>
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    2362:	fd 81       	ldd	r31, Y+5	; 0x05
    2364:	ff 9f       	mul	r31, r31
    2366:	80 01       	movw	r16, r0
    2368:	11 24       	eor	r1, r1
    236a:	29 8d       	ldd	r18, Y+25	; 0x19
    236c:	22 9f       	mul	r18, r18
    236e:	b0 01       	movw	r22, r0
    2370:	11 24       	eor	r1, r1
    2372:	60 1b       	sub	r22, r16
    2374:	71 0b       	sbc	r23, r17
    2376:	88 27       	eor	r24, r24
    2378:	77 fd       	sbrc	r23, 7
    237a:	80 95       	com	r24
    237c:	98 2f       	mov	r25, r24
    237e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    2382:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    2386:	4b 01       	movw	r8, r22
    2388:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    238a:	39 8d       	ldd	r19, Y+25	; 0x19
    238c:	63 2f       	mov	r22, r19
    238e:	70 e0       	ldi	r23, 0x00	; 0
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    2398:	2b 01       	movw	r4, r22
    239a:	3c 01       	movw	r6, r24
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    23a8:	69 83       	std	Y+1, r22	; 0x01
    23aa:	7a 83       	std	Y+2, r23	; 0x02
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	9b 01       	movw	r18, r22
    23b2:	ac 01       	movw	r20, r24
    23b4:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    23b8:	6b 01       	movw	r12, r22
    23ba:	7c 01       	movw	r14, r24
    23bc:	b8 01       	movw	r22, r16
    23be:	88 27       	eor	r24, r24
    23c0:	77 fd       	sbrc	r23, 7
    23c2:	80 95       	com	r24
    23c4:	98 2f       	mov	r25, r24
    23c6:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    23ca:	9b 01       	movw	r18, r22
    23cc:	ac 01       	movw	r20, r24
    23ce:	c7 01       	movw	r24, r14
    23d0:	b6 01       	movw	r22, r12
    23d2:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    23d6:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    23da:	a5 01       	movw	r20, r10
    23dc:	94 01       	movw	r18, r8
    23de:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    23e2:	6b 01       	movw	r12, r22
    23e4:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    23e6:	a3 01       	movw	r20, r6
    23e8:	92 01       	movw	r18, r4
    23ea:	c3 01       	movw	r24, r6
    23ec:	b2 01       	movw	r22, r4
    23ee:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    23fe:	a5 01       	movw	r20, r10
    2400:	94 01       	movw	r18, r8
    2402:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2406:	6a a3       	std	Y+34, r22	; 0x22
    2408:	7b a3       	std	Y+35, r23	; 0x23
    240a:	8c a3       	std	Y+36, r24	; 0x24
    240c:	9d a3       	std	Y+37, r25	; 0x25
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    240e:	49 85       	ldd	r20, Y+9	; 0x09
    2410:	24 2f       	mov	r18, r20
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	5d 85       	ldd	r21, Y+13	; 0x0d
    2416:	85 2f       	mov	r24, r21
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	3a 8b       	std	Y+18, r19	; 0x12
    241c:	29 8b       	std	Y+17, r18	; 0x11
    241e:	19 01       	movw	r2, r18
    2420:	28 1a       	sub	r2, r24
    2422:	39 0a       	sbc	r3, r25
    2424:	d1 01       	movw	r26, r2
    2426:	a8 1b       	sub	r26, r24
    2428:	b9 0b       	sbc	r27, r25
    242a:	11 96       	adiw	r26, 0x01	; 1
    242c:	68 96       	adiw	r28, 0x18	; 24
    242e:	bf af       	std	Y+63, r27	; 0x3f
    2430:	ae af       	std	Y+62, r26	; 0x3e
    2432:	68 97       	sbiw	r28, 0x18	; 24
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	c3 01       	movw	r24, r6
    243e:	b2 01       	movw	r22, r4
    2440:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2444:	4b 01       	movw	r8, r22
    2446:	5c 01       	movw	r10, r24
    2448:	2a a5       	ldd	r18, Y+42	; 0x2a
    244a:	3b a5       	ldd	r19, Y+43	; 0x2b
    244c:	4c a5       	ldd	r20, Y+44	; 0x2c
    244e:	5d a5       	ldd	r21, Y+45	; 0x2d
    2450:	6a a1       	ldd	r22, Y+34	; 0x22
    2452:	7b a1       	ldd	r23, Y+35	; 0x23
    2454:	8c a1       	ldd	r24, Y+36	; 0x24
    2456:	9d a1       	ldd	r25, Y+37	; 0x25
    2458:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    245c:	22 0c       	add	r2, r2
    245e:	33 1c       	adc	r3, r3
    2460:	22 0c       	add	r2, r2
    2462:	33 1c       	adc	r3, r3
    2464:	f1 01       	movw	r30, r2
    2466:	e1 53       	subi	r30, 0x31	; 49
    2468:	fd 4f       	sbci	r31, 0xFD	; 253
    246a:	ff a7       	std	Y+47, r31	; 0x2f
    246c:	ee a7       	std	Y+46, r30	; 0x2e
    246e:	20 81       	ld	r18, Z
    2470:	31 81       	ldd	r19, Z+1	; 0x01
    2472:	42 81       	ldd	r20, Z+2	; 0x02
    2474:	53 81       	ldd	r21, Z+3	; 0x03
    2476:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    247a:	a3 01       	movw	r20, r6
    247c:	92 01       	movw	r18, r4
    247e:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2482:	6d 8b       	std	Y+21, r22	; 0x15
    2484:	7e 8b       	std	Y+22, r23	; 0x16
    2486:	8f 8b       	std	Y+23, r24	; 0x17
    2488:	98 8f       	std	Y+24, r25	; 0x18
    248a:	68 96       	adiw	r28, 0x18	; 24
    248c:	2e ad       	ldd	r18, Y+62	; 0x3e
    248e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2490:	68 97       	sbiw	r28, 0x18	; 24
    2492:	22 0f       	add	r18, r18
    2494:	33 1f       	adc	r19, r19
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	68 96       	adiw	r28, 0x18	; 24
    249c:	3f af       	std	Y+63, r19	; 0x3f
    249e:	2e af       	std	Y+62, r18	; 0x3e
    24a0:	68 97       	sbiw	r28, 0x18	; 24
    24a2:	f9 01       	movw	r30, r18
    24a4:	e1 53       	subi	r30, 0x31	; 49
    24a6:	fd 4f       	sbci	r31, 0xFD	; 253
    24a8:	20 81       	ld	r18, Z
    24aa:	31 81       	ldd	r19, Z+1	; 0x01
    24ac:	42 81       	ldd	r20, Z+2	; 0x02
    24ae:	53 81       	ldd	r21, Z+3	; 0x03
    24b0:	c7 01       	movw	r24, r14
    24b2:	b6 01       	movw	r22, r12
    24b4:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    24b8:	29 81       	ldd	r18, Y+1	; 0x01
    24ba:	3a 81       	ldd	r19, Y+2	; 0x02
    24bc:	4b 81       	ldd	r20, Y+3	; 0x03
    24be:	5c 81       	ldd	r21, Y+4	; 0x04
    24c0:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    24c4:	9b 01       	movw	r18, r22
    24c6:	ac 01       	movw	r20, r24
    24c8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ca:	7e 89       	ldd	r23, Y+22	; 0x16
    24cc:	8f 89       	ldd	r24, Y+23	; 0x17
    24ce:	98 8d       	ldd	r25, Y+24	; 0x18
    24d0:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    24d4:	9b 01       	movw	r18, r22
    24d6:	ac 01       	movw	r20, r24
    24d8:	c5 01       	movw	r24, r10
    24da:	b4 01       	movw	r22, r8
    24dc:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    24e0:	16 2f       	mov	r17, r22
    24e2:	7d 8b       	std	Y+21, r23	; 0x15
    24e4:	8a af       	std	Y+58, r24	; 0x3a
    24e6:	09 2f       	mov	r16, r25
    24e8:	49 89       	ldd	r20, Y+17	; 0x11
    24ea:	5a 89       	ldd	r21, Y+18	; 0x12
    24ec:	44 0f       	add	r20, r20
    24ee:	55 1f       	adc	r21, r21
    24f0:	44 0f       	add	r20, r20
    24f2:	55 1f       	adc	r21, r21
    24f4:	5a 83       	std	Y+2, r21	; 0x02
    24f6:	49 83       	std	Y+1, r20	; 0x01
    24f8:	9a 01       	movw	r18, r20
    24fa:	21 53       	subi	r18, 0x31	; 49
    24fc:	3d 4f       	sbci	r19, 0xFD	; 253
    24fe:	86 2f       	mov	r24, r22
    2500:	97 2f       	mov	r25, r23
    2502:	aa ad       	ldd	r26, Y+58	; 0x3a
    2504:	b0 2f       	mov	r27, r16
    2506:	f9 01       	movw	r30, r18
    2508:	80 83       	st	Z, r24
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	a2 83       	std	Z+2, r26	; 0x02
    250e:	b3 83       	std	Z+3, r27	; 0x03
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    2510:	f1 01       	movw	r30, r2
    2512:	e9 5f       	subi	r30, 0xF9	; 249
    2514:	fd 4f       	sbci	r31, 0xFD	; 253
    2516:	20 81       	ld	r18, Z
    2518:	31 81       	ldd	r19, Z+1	; 0x01
    251a:	42 81       	ldd	r20, Z+2	; 0x02
    251c:	53 81       	ldd	r21, Z+3	; 0x03
    251e:	6a a5       	ldd	r22, Y+42	; 0x2a
    2520:	7b a5       	ldd	r23, Y+43	; 0x2b
    2522:	8c a5       	ldd	r24, Y+44	; 0x2c
    2524:	9d a5       	ldd	r25, Y+45	; 0x2d
    2526:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    252a:	4b 01       	movw	r8, r22
    252c:	5c 01       	movw	r10, r24
    252e:	ae a5       	ldd	r26, Y+46	; 0x2e
    2530:	bf a5       	ldd	r27, Y+47	; 0x2f
    2532:	2d 91       	ld	r18, X+
    2534:	3d 91       	ld	r19, X+
    2536:	4d 91       	ld	r20, X+
    2538:	5c 91       	ld	r21, X
    253a:	6e a1       	ldd	r22, Y+38	; 0x26
    253c:	7f a1       	ldd	r23, Y+39	; 0x27
    253e:	88 a5       	ldd	r24, Y+40	; 0x28
    2540:	99 a5       	ldd	r25, Y+41	; 0x29
    2542:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2546:	a3 01       	movw	r20, r6
    2548:	92 01       	movw	r18, r4
    254a:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    254e:	9b 01       	movw	r18, r22
    2550:	ac 01       	movw	r20, r24
    2552:	c5 01       	movw	r24, r10
    2554:	b4 01       	movw	r22, r8
    2556:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    255a:	2a a1       	ldd	r18, Y+34	; 0x22
    255c:	3b a1       	ldd	r19, Y+35	; 0x23
    255e:	4c a1       	ldd	r20, Y+36	; 0x24
    2560:	5d a1       	ldd	r21, Y+37	; 0x25
    2562:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2566:	4b 01       	movw	r8, r22
    2568:	5c 01       	movw	r10, r24
    256a:	68 96       	adiw	r28, 0x18	; 24
    256c:	ee ad       	ldd	r30, Y+62	; 0x3e
    256e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2570:	68 97       	sbiw	r28, 0x18	; 24
    2572:	e9 5f       	subi	r30, 0xF9	; 249
    2574:	fd 4f       	sbci	r31, 0xFD	; 253
    2576:	20 81       	ld	r18, Z
    2578:	31 81       	ldd	r19, Z+1	; 0x01
    257a:	42 81       	ldd	r20, Z+2	; 0x02
    257c:	53 81       	ldd	r21, Z+3	; 0x03
    257e:	c7 01       	movw	r24, r14
    2580:	b6 01       	movw	r22, r12
    2582:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2586:	9b 01       	movw	r18, r22
    2588:	ac 01       	movw	r20, r24
    258a:	c5 01       	movw	r24, r10
    258c:	b4 01       	movw	r22, r8
    258e:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    2592:	2b 01       	movw	r4, r22
    2594:	3c 01       	movw	r6, r24
    2596:	e9 81       	ldd	r30, Y+1	; 0x01
    2598:	fa 81       	ldd	r31, Y+2	; 0x02
    259a:	e9 5f       	subi	r30, 0xF9	; 249
    259c:	fd 4f       	sbci	r31, 0xFD	; 253
    259e:	60 83       	st	Z, r22
    25a0:	71 83       	std	Z+1, r23	; 0x01
    25a2:	82 83       	std	Z+2, r24	; 0x02
    25a4:	93 83       	std	Z+3, r25	; 0x03
    25a6:	2d 88       	ldd	r2, Y+21	; 0x15
    25a8:	3a ac       	ldd	r3, Y+58	; 0x3a
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    25aa:	bd 8d       	ldd	r27, Y+29	; 0x1d
    25ac:	ab 2e       	mov	r10, r27
    25ae:	b1 2c       	mov	r11, r1
    25b0:	f5 01       	movw	r30, r10
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	ea 55       	subi	r30, 0x5A	; 90
    25bc:	fb 4f       	sbci	r31, 0xFB	; 251
    25be:	c5 90       	lpm	r12, Z+
    25c0:	d5 90       	lpm	r13, Z+
    25c2:	e5 90       	lpm	r14, Z+
    25c4:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    25c6:	f5 01       	movw	r30, r10
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	ea 56       	subi	r30, 0x6A	; 106
    25d2:	fe 4f       	sbci	r31, 0xFE	; 254
    25d4:	25 91       	lpm	r18, Z+
    25d6:	35 91       	lpm	r19, Z+
    25d8:	45 91       	lpm	r20, Z+
    25da:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    25dc:	23 96       	adiw	r28, 0x03	; 3
    25de:	6c ad       	ldd	r22, Y+60	; 0x3c
    25e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    25e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    25e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    25e6:	23 97       	sbiw	r28, 0x03	; 3
    25e8:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	c7 01       	movw	r24, r14
    25f2:	b6 01       	movw	r22, r12
    25f4:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    25f8:	2b ad       	ldd	r18, Y+59	; 0x3b
    25fa:	3c ad       	ldd	r19, Y+60	; 0x3c
    25fc:	4d ad       	ldd	r20, Y+61	; 0x3d
    25fe:	5e ad       	ldd	r21, Y+62	; 0x3e
    2600:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2604:	6b 01       	movw	r12, r22
    2606:	7c 01       	movw	r14, r24
    
    
    if(m == 0)
    2608:	ed 81       	ldd	r30, Y+5	; 0x05
    260a:	e1 11       	cpse	r30, r1
    260c:	56 c0       	rjmp	.+172    	; 0x26ba <igrf+0x7fc>
    {
      x += one * q[k];
    260e:	a3 01       	movw	r20, r6
    2610:	92 01       	movw	r18, r4
    2612:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2616:	9b 01       	movw	r18, r22
    2618:	ac 01       	movw	r20, r24
    261a:	6a a9       	ldd	r22, Y+50	; 0x32
    261c:	7b a9       	ldd	r23, Y+51	; 0x33
    261e:	8c a9       	ldd	r24, Y+52	; 0x34
    2620:	9d a9       	ldd	r25, Y+53	; 0x35
    2622:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2626:	6a ab       	std	Y+50, r22	; 0x32
    2628:	7b ab       	std	Y+51, r23	; 0x33
    262a:	8c ab       	std	Y+52, r24	; 0x34
    262c:	9d ab       	std	Y+53, r25	; 0x35
      z -= one * p[k];
    262e:	21 2f       	mov	r18, r17
    2630:	32 2d       	mov	r19, r2
    2632:	43 2d       	mov	r20, r3
    2634:	50 2f       	mov	r21, r16
    2636:	c7 01       	movw	r24, r14
    2638:	b6 01       	movw	r22, r12
    263a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    263e:	9b 01       	movw	r18, r22
    2640:	ac 01       	movw	r20, r24
    2642:	6e a9       	ldd	r22, Y+54	; 0x36
    2644:	7f a9       	ldd	r23, Y+55	; 0x37
    2646:	88 ad       	ldd	r24, Y+56	; 0x38
    2648:	99 ad       	ldd	r25, Y+57	; 0x39
    264a:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    264e:	6e ab       	std	Y+54, r22	; 0x36
    2650:	7f ab       	std	Y+55, r23	; 0x37
    2652:	88 af       	std	Y+56, r24	; 0x38
    2654:	99 af       	std	Y+57, r25	; 0x39
      l++;
    2656:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2658:	ff 5f       	subi	r31, 0xFF	; 255
    265a:	fd 8f       	std	Y+29, r31	; 0x1d
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    265c:	39 85       	ldd	r19, Y+9	; 0x09
    265e:	3f 5f       	subi	r19, 0xFF	; 255
    2660:	39 87       	std	Y+9, r19	; 0x09
    2662:	24 96       	adiw	r28, 0x04	; 4
    2664:	4f ad       	ldd	r20, Y+63	; 0x3f
    2666:	24 97       	sbiw	r28, 0x04	; 4
    2668:	43 17       	cp	r20, r19
    266a:	08 f4       	brcc	.+2      	; 0x266e <igrf+0x7b0>
    266c:	2c c1       	rjmp	.+600    	; 0x28c6 <igrf+0xa08>
  {
    if(n < m)
    266e:	89 a1       	ldd	r24, Y+33	; 0x21
    2670:	9d 85       	ldd	r25, Y+13	; 0x0d
    2672:	98 17       	cp	r25, r24
    2674:	08 f0       	brcs	.+2      	; 0x2678 <igrf+0x7ba>
    2676:	68 ce       	rjmp	.-816    	; 0x2348 <igrf+0x48a>
    {
      m = 0;
      n++;
    2678:	bd 85       	ldd	r27, Y+13	; 0x0d
    267a:	bf 5f       	subi	r27, 0xFF	; 255
    267c:	bd 87       	std	Y+13, r27	; 0x0d
      rr = pow(ratio, n + 2);
    267e:	6b 2f       	mov	r22, r27
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	6e 5f       	subi	r22, 0xFE	; 254
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	88 27       	eor	r24, r24
    2688:	77 fd       	sbrc	r23, 7
    268a:	80 95       	com	r24
    268c:	98 2f       	mov	r25, r24
    268e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    2692:	9b 01       	movw	r18, r22
    2694:	ac 01       	movw	r20, r24
    2696:	2c 96       	adiw	r28, 0x0c	; 12
    2698:	6c ad       	ldd	r22, Y+60	; 0x3c
    269a:	7d ad       	ldd	r23, Y+61	; 0x3d
    269c:	8e ad       	ldd	r24, Y+62	; 0x3e
    269e:	9f ad       	ldd	r25, Y+63	; 0x3f
    26a0:	2c 97       	sbiw	r28, 0x0c	; 12
    26a2:	0e 94 1b 28 	call	0x5036	; 0x5036 <pow>
    26a6:	6b af       	std	Y+59, r22	; 0x3b
    26a8:	7c af       	std	Y+60, r23	; 0x3c
    26aa:	8d af       	std	Y+61, r24	; 0x3d
    26ac:	9e af       	std	Y+62, r25	; 0x3e
      fn = n;
    26ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    26b0:	e9 8f       	std	Y+25, r30	; 0x19
  {
    if(n < m)
    {
      m = 0;
      n++;
      rr = pow(ratio, n + 2);
    26b2:	f1 e0       	ldi	r31, 0x01	; 1
    26b4:	f9 a3       	std	Y+33, r31	; 0x21
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    26b6:	1d 82       	std	Y+5, r1	; 0x05
    26b8:	4b ce       	rjmp	.-874    	; 0x2350 <igrf+0x492>
      z -= one * p[k];
      l++;
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    26ba:	c5 01       	movw	r24, r10
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	fc 01       	movw	r30, r24
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ea 55       	subi	r30, 0x5A	; 90
    26ca:	fb 4f       	sbci	r31, 0xFB	; 251
    26cc:	85 90       	lpm	r8, Z+
    26ce:	95 90       	lpm	r9, Z+
    26d0:	a5 90       	lpm	r10, Z+
    26d2:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    26d4:	fc 01       	movw	r30, r24
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	ea 56       	subi	r30, 0x6A	; 106
    26e0:	fe 4f       	sbci	r31, 0xFE	; 254
    26e2:	25 91       	lpm	r18, Z+
    26e4:	35 91       	lpm	r19, Z+
    26e6:	45 91       	lpm	r20, Z+
    26e8:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    26ea:	23 96       	adiw	r28, 0x03	; 3
    26ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    26ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    26f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    26f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    26f4:	23 97       	sbiw	r28, 0x03	; 3
    26f6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    26fa:	9b 01       	movw	r18, r22
    26fc:	ac 01       	movw	r20, r24
    26fe:	c5 01       	movw	r24, r10
    2700:	b4 01       	movw	r22, r8
    2702:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2706:	2b ad       	ldd	r18, Y+59	; 0x3b
    2708:	3c ad       	ldd	r19, Y+60	; 0x3c
    270a:	4d ad       	ldd	r20, Y+61	; 0x3d
    270c:	5e ad       	ldd	r21, Y+62	; 0x3e
    270e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2712:	69 8b       	std	Y+17, r22	; 0x11
    2714:	7a 8b       	std	Y+18, r23	; 0x12
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	9c 8b       	std	Y+20, r25	; 0x14
      three = one * cl[m] + two * sl[m];
    271a:	3d 81       	ldd	r19, Y+5	; 0x05
    271c:	23 2f       	mov	r18, r19
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	3e 8b       	std	Y+22, r19	; 0x16
    2722:	2d 8b       	std	Y+21, r18	; 0x15
    2724:	c9 01       	movw	r24, r18
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	fc 01       	movw	r30, r24
    2730:	e5 53       	subi	r30, 0x35	; 53
    2732:	fe 4f       	sbci	r31, 0xFE	; 254
    2734:	20 81       	ld	r18, Z
    2736:	31 81       	ldd	r19, Z+1	; 0x01
    2738:	42 81       	ldd	r20, Z+2	; 0x02
    273a:	53 81       	ldd	r21, Z+3	; 0x03
    273c:	2d 83       	std	Y+5, r18	; 0x05
    273e:	3e 83       	std	Y+6, r19	; 0x06
    2740:	4f 83       	std	Y+7, r20	; 0x07
    2742:	58 87       	std	Y+8, r21	; 0x08
    2744:	9c 01       	movw	r18, r24
    2746:	21 57       	subi	r18, 0x71	; 113
    2748:	3e 4f       	sbci	r19, 0xFE	; 254
    274a:	d9 01       	movw	r26, r18
    274c:	8d 91       	ld	r24, X+
    274e:	9d 91       	ld	r25, X+
    2750:	0d 90       	ld	r0, X+
    2752:	bc 91       	ld	r27, X
    2754:	a0 2d       	mov	r26, r0
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	ab 83       	std	Y+3, r26	; 0x03
    275c:	bc 83       	std	Y+4, r27	; 0x04
    275e:	a7 01       	movw	r20, r14
    2760:	96 01       	movw	r18, r12
    2762:	6d 81       	ldd	r22, Y+5	; 0x05
    2764:	7e 81       	ldd	r23, Y+6	; 0x06
    2766:	8f 81       	ldd	r24, Y+7	; 0x07
    2768:	98 85       	ldd	r25, Y+8	; 0x08
    276a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    276e:	4b 01       	movw	r8, r22
    2770:	5c 01       	movw	r10, r24
    2772:	29 89       	ldd	r18, Y+17	; 0x11
    2774:	3a 89       	ldd	r19, Y+18	; 0x12
    2776:	4b 89       	ldd	r20, Y+19	; 0x13
    2778:	5c 89       	ldd	r21, Y+20	; 0x14
    277a:	69 81       	ldd	r22, Y+1	; 0x01
    277c:	7a 81       	ldd	r23, Y+2	; 0x02
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2786:	9b 01       	movw	r18, r22
    2788:	ac 01       	movw	r20, r24
    278a:	c5 01       	movw	r24, r10
    278c:	b4 01       	movw	r22, r8
    278e:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2792:	4b 01       	movw	r8, r22
    2794:	5c 01       	movw	r10, r24
      x += three * q[k];
    2796:	a3 01       	movw	r20, r6
    2798:	92 01       	movw	r18, r4
    279a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    279e:	9b 01       	movw	r18, r22
    27a0:	ac 01       	movw	r20, r24
    27a2:	6a a9       	ldd	r22, Y+50	; 0x32
    27a4:	7b a9       	ldd	r23, Y+51	; 0x33
    27a6:	8c a9       	ldd	r24, Y+52	; 0x34
    27a8:	9d a9       	ldd	r25, Y+53	; 0x35
    27aa:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    27ae:	6a ab       	std	Y+50, r22	; 0x32
    27b0:	7b ab       	std	Y+51, r23	; 0x33
    27b2:	8c ab       	std	Y+52, r24	; 0x34
    27b4:	9d ab       	std	Y+53, r25	; 0x35
      z -= three * p[k];
    27b6:	21 2f       	mov	r18, r17
    27b8:	32 2d       	mov	r19, r2
    27ba:	43 2d       	mov	r20, r3
    27bc:	50 2f       	mov	r21, r16
    27be:	c5 01       	movw	r24, r10
    27c0:	b4 01       	movw	r22, r8
    27c2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    27c6:	9b 01       	movw	r18, r22
    27c8:	ac 01       	movw	r20, r24
    27ca:	6e a9       	ldd	r22, Y+54	; 0x36
    27cc:	7f a9       	ldd	r23, Y+55	; 0x37
    27ce:	88 ad       	ldd	r24, Y+56	; 0x38
    27d0:	99 ad       	ldd	r25, Y+57	; 0x39
    27d2:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    27d6:	6e ab       	std	Y+54, r22	; 0x36
    27d8:	7f ab       	std	Y+55, r23	; 0x37
    27da:	88 af       	std	Y+56, r24	; 0x38
    27dc:	99 af       	std	Y+57, r25	; 0x39
      
      if(clat > 0)
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	a9 01       	movw	r20, r18
    27e4:	6e a1       	ldd	r22, Y+38	; 0x26
    27e6:	7f a1       	ldd	r23, Y+39	; 0x27
    27e8:	88 a5       	ldd	r24, Y+40	; 0x28
    27ea:	99 a5       	ldd	r25, Y+41	; 0x29
    27ec:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    27f0:	29 81       	ldd	r18, Y+1	; 0x01
    27f2:	3a 81       	ldd	r19, Y+2	; 0x02
    27f4:	4b 81       	ldd	r20, Y+3	; 0x03
    27f6:	5c 81       	ldd	r21, Y+4	; 0x04
      two = (agh_p + dgh_p * t) * rr;
      three = one * cl[m] + two * sl[m];
      x += three * q[k];
      z -= three * p[k];
      
      if(clat > 0)
    27f8:	18 16       	cp	r1, r24
    27fa:	0c f0       	brlt	.+2      	; 0x27fe <igrf+0x940>
    27fc:	ee c1       	rjmp	.+988    	; 0x2bda <igrf+0xd1c>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    27fe:	c7 01       	movw	r24, r14
    2800:	b6 01       	movw	r22, r12
    2802:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2806:	6b 01       	movw	r12, r22
    2808:	7c 01       	movw	r14, r24
    280a:	2d 81       	ldd	r18, Y+5	; 0x05
    280c:	3e 81       	ldd	r19, Y+6	; 0x06
    280e:	4f 81       	ldd	r20, Y+7	; 0x07
    2810:	58 85       	ldd	r21, Y+8	; 0x08
    2812:	69 89       	ldd	r22, Y+17	; 0x11
    2814:	7a 89       	ldd	r23, Y+18	; 0x12
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    281e:	9b 01       	movw	r18, r22
    2820:	ac 01       	movw	r20, r24
    2822:	c7 01       	movw	r24, r14
    2824:	b6 01       	movw	r22, r12
    2826:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    282a:	6b 01       	movw	r12, r22
    282c:	7c 01       	movw	r14, r24
    282e:	ed 89       	ldd	r30, Y+21	; 0x15
    2830:	fe 89       	ldd	r31, Y+22	; 0x16
    2832:	bf 01       	movw	r22, r30
    2834:	88 27       	eor	r24, r24
    2836:	77 fd       	sbrc	r23, 7
    2838:	80 95       	com	r24
    283a:	98 2f       	mov	r25, r24
    283c:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    2840:	9b 01       	movw	r18, r22
    2842:	ac 01       	movw	r20, r24
    2844:	c7 01       	movw	r24, r14
    2846:	b6 01       	movw	r22, r12
    2848:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    284c:	21 2f       	mov	r18, r17
    284e:	32 2d       	mov	r19, r2
    2850:	43 2d       	mov	r20, r3
    2852:	50 2f       	mov	r21, r16
    2854:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2858:	6b 01       	movw	r12, r22
    285a:	7c 01       	movw	r14, r24
    285c:	f9 8d       	ldd	r31, Y+25	; 0x19
    285e:	6f 2f       	mov	r22, r31
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2876:	2e a1       	ldd	r18, Y+38	; 0x26
    2878:	3f a1       	ldd	r19, Y+39	; 0x27
    287a:	48 a5       	ldd	r20, Y+40	; 0x28
    287c:	59 a5       	ldd	r21, Y+41	; 0x29
    287e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2882:	9b 01       	movw	r18, r22
    2884:	ac 01       	movw	r20, r24
    2886:	c7 01       	movw	r24, r14
    2888:	b6 01       	movw	r22, r12
    288a:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    288e:	9b 01       	movw	r18, r22
    2890:	ac 01       	movw	r20, r24
    2892:	28 96       	adiw	r28, 0x08	; 8
    2894:	6c ad       	ldd	r22, Y+60	; 0x3c
    2896:	7d ad       	ldd	r23, Y+61	; 0x3d
    2898:	8e ad       	ldd	r24, Y+62	; 0x3e
    289a:	9f ad       	ldd	r25, Y+63	; 0x3f
    289c:	28 97       	sbiw	r28, 0x08	; 8
    289e:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    28a2:	28 96       	adiw	r28, 0x08	; 8
    28a4:	6c af       	std	Y+60, r22	; 0x3c
    28a6:	7d af       	std	Y+61, r23	; 0x3d
    28a8:	8e af       	std	Y+62, r24	; 0x3e
    28aa:	9f af       	std	Y+63, r25	; 0x3f
    28ac:	28 97       	sbiw	r28, 0x08	; 8
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
        
      l += 2;
    28ae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    28b0:	2e 5f       	subi	r18, 0xFE	; 254
    28b2:	2d 8f       	std	Y+29, r18	; 0x1d
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    28b4:	39 85       	ldd	r19, Y+9	; 0x09
    28b6:	3f 5f       	subi	r19, 0xFF	; 255
    28b8:	39 87       	std	Y+9, r19	; 0x09
    28ba:	24 96       	adiw	r28, 0x04	; 4
    28bc:	4f ad       	ldd	r20, Y+63	; 0x3f
    28be:	24 97       	sbiw	r28, 0x04	; 4
    28c0:	43 17       	cp	r20, r19
    28c2:	08 f0       	brcs	.+2      	; 0x28c6 <igrf+0xa08>
    28c4:	d4 ce       	rjmp	.-600    	; 0x266e <igrf+0x7b0>
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    28c6:	60 96       	adiw	r28, 0x10	; 16
    28c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    28ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    28cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    28ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    28d0:	60 97       	sbiw	r28, 0x10	; 16
    28d2:	6e a9       	ldd	r22, Y+54	; 0x36
    28d4:	7f a9       	ldd	r23, Y+55	; 0x37
    28d6:	88 ad       	ldd	r24, Y+56	; 0x38
    28d8:	99 ad       	ldd	r25, Y+57	; 0x39
    28da:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    28de:	6b 01       	movw	r12, r22
    28e0:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    28e2:	60 96       	adiw	r28, 0x10	; 16
    28e4:	2c ad       	ldd	r18, Y+60	; 0x3c
    28e6:	3d ad       	ldd	r19, Y+61	; 0x3d
    28e8:	4e ad       	ldd	r20, Y+62	; 0x3e
    28ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    28ec:	60 97       	sbiw	r28, 0x10	; 16
    28ee:	6a a9       	ldd	r22, Y+50	; 0x32
    28f0:	7b a9       	ldd	r23, Y+51	; 0x33
    28f2:	8c a9       	ldd	r24, Y+52	; 0x34
    28f4:	9d a9       	ldd	r25, Y+53	; 0x35
    28f6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    28fa:	4b 01       	movw	r8, r22
    28fc:	5c 01       	movw	r10, r24
    28fe:	64 96       	adiw	r28, 0x14	; 20
    2900:	2c ad       	ldd	r18, Y+60	; 0x3c
    2902:	3d ad       	ldd	r19, Y+61	; 0x3d
    2904:	4e ad       	ldd	r20, Y+62	; 0x3e
    2906:	5f ad       	ldd	r21, Y+63	; 0x3f
    2908:	64 97       	sbiw	r28, 0x14	; 20
    290a:	6e a9       	ldd	r22, Y+54	; 0x36
    290c:	7f a9       	ldd	r23, Y+55	; 0x37
    290e:	88 ad       	ldd	r24, Y+56	; 0x38
    2910:	99 ad       	ldd	r25, Y+57	; 0x39
    2912:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2916:	9b 01       	movw	r18, r22
    2918:	ac 01       	movw	r20, r24
    291a:	c5 01       	movw	r24, r10
    291c:	b4 01       	movw	r22, r8
    291e:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    2922:	66 96       	adiw	r28, 0x16	; 22
    2924:	ae ad       	ldd	r26, Y+62	; 0x3e
    2926:	bf ad       	ldd	r27, Y+63	; 0x3f
    2928:	66 97       	sbiw	r28, 0x16	; 22
    292a:	6d 93       	st	X+, r22
    292c:	7d 93       	st	X+, r23
    292e:	8d 93       	st	X+, r24
    2930:	9c 93       	st	X, r25
    2932:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    2934:	28 96       	adiw	r28, 0x08	; 8
    2936:	2c ad       	ldd	r18, Y+60	; 0x3c
    2938:	3d ad       	ldd	r19, Y+61	; 0x3d
    293a:	4e ad       	ldd	r20, Y+62	; 0x3e
    293c:	5f ad       	ldd	r21, Y+63	; 0x3f
    293e:	28 97       	sbiw	r28, 0x08	; 8
    2940:	14 96       	adiw	r26, 0x04	; 4
    2942:	2d 93       	st	X+, r18
    2944:	3d 93       	st	X+, r19
    2946:	4d 93       	st	X+, r20
    2948:	5c 93       	st	X, r21
    294a:	17 97       	sbiw	r26, 0x07	; 7
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    294c:	64 96       	adiw	r28, 0x14	; 20
    294e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2950:	3d ad       	ldd	r19, Y+61	; 0x3d
    2952:	4e ad       	ldd	r20, Y+62	; 0x3e
    2954:	5f ad       	ldd	r21, Y+63	; 0x3f
    2956:	64 97       	sbiw	r28, 0x14	; 20
    2958:	6a a9       	ldd	r22, Y+50	; 0x32
    295a:	7b a9       	ldd	r23, Y+51	; 0x33
    295c:	8c a9       	ldd	r24, Y+52	; 0x34
    295e:	9d a9       	ldd	r25, Y+53	; 0x35
    2960:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2964:	9b 01       	movw	r18, r22
    2966:	ac 01       	movw	r20, r24
    2968:	c7 01       	movw	r24, r14
    296a:	b6 01       	movw	r22, r12
    296c:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    2970:	66 96       	adiw	r28, 0x16	; 22
    2972:	ee ad       	ldd	r30, Y+62	; 0x3e
    2974:	ff ad       	ldd	r31, Y+63	; 0x3f
    2976:	66 97       	sbiw	r28, 0x16	; 22
    2978:	60 87       	std	Z+8, r22	; 0x08
    297a:	71 87       	std	Z+9, r23	; 0x09
    297c:	82 87       	std	Z+10, r24	; 0x0a
    297e:	93 87       	std	Z+11, r25	; 0x0b
     
}
    2980:	c9 5a       	subi	r28, 0xA9	; 169
    2982:	df 4f       	sbci	r29, 0xFF	; 255
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	bf 90       	pop	r11
    29a0:	af 90       	pop	r10
    29a2:	9f 90       	pop	r9
    29a4:	8f 90       	pop	r8
    29a6:	7f 90       	pop	r7
    29a8:	6f 90       	pop	r6
    29aa:	5f 90       	pop	r5
    29ac:	4f 90       	pop	r4
    29ae:	3f 90       	pop	r3
    29b0:	2f 90       	pop	r2
    29b2:	08 95       	ret
    fm = m;
    if(k >= 5)
    {
      if(m == n)
      {
        one = sqrt(1 - (0.5 / fm));
    29b4:	83 2f       	mov	r24, r19
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9e 8b       	std	Y+22, r25	; 0x16
    29ba:	8d 8b       	std	Y+21, r24	; 0x15
    29bc:	bc 01       	movw	r22, r24
    29be:	88 27       	eor	r24, r24
    29c0:	77 fd       	sbrc	r23, 7
    29c2:	80 95       	com	r24
    29c4:	98 2f       	mov	r25, r24
    29c6:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    29ca:	6b 01       	movw	r12, r22
    29cc:	7c 01       	movw	r14, r24
    29ce:	9b 01       	movw	r18, r22
    29d0:	ac 01       	movw	r20, r24
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	70 e0       	ldi	r23, 0x00	; 0
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	9f e3       	ldi	r25, 0x3F	; 63
    29da:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    29de:	9b 01       	movw	r18, r22
    29e0:	ac 01       	movw	r20, r24
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	80 e8       	ldi	r24, 0x80	; 128
    29e8:	9f e3       	ldi	r25, 0x3F	; 63
    29ea:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    29ee:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    29f2:	4b 01       	movw	r8, r22
    29f4:	5c 01       	movw	r10, r24
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    29f6:	a9 85       	ldd	r26, Y+9	; 0x09
    29f8:	0a 2f       	mov	r16, r26
    29fa:	10 e0       	ldi	r17, 0x00	; 0
    29fc:	38 01       	movw	r6, r16
    29fe:	ed 89       	ldd	r30, Y+21	; 0x15
    2a00:	fe 89       	ldd	r31, Y+22	; 0x16
    2a02:	6e 1a       	sub	r6, r30
    2a04:	7f 0a       	sbc	r7, r31
    2a06:	f1 e0       	ldi	r31, 0x01	; 1
    2a08:	6f 1a       	sub	r6, r31
    2a0a:	71 08       	sbc	r7, r1
    2a0c:	a7 01       	movw	r20, r14
    2a0e:	96 01       	movw	r18, r12
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	70 e0       	ldi	r23, 0x00	; 0
    2a14:	80 e8       	ldi	r24, 0x80	; 128
    2a16:	9f e3       	ldi	r25, 0x3F	; 63
    2a18:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e8       	ldi	r20, 0x80	; 128
    2a22:	5f e3       	ldi	r21, 0x3F	; 63
    2a24:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2a28:	a5 01       	movw	r20, r10
    2a2a:	94 01       	movw	r18, r8
    2a2c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2a30:	2e a1       	ldd	r18, Y+38	; 0x26
    2a32:	3f a1       	ldd	r19, Y+39	; 0x27
    2a34:	48 a5       	ldd	r20, Y+40	; 0x28
    2a36:	59 a5       	ldd	r21, Y+41	; 0x29
    2a38:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2a3c:	66 0c       	add	r6, r6
    2a3e:	77 1c       	adc	r7, r7
    2a40:	66 0c       	add	r6, r6
    2a42:	77 1c       	adc	r7, r7
    2a44:	93 01       	movw	r18, r6
    2a46:	21 53       	subi	r18, 0x31	; 49
    2a48:	3d 4f       	sbci	r19, 0xFD	; 253
    2a4a:	3a 83       	std	Y+2, r19	; 0x02
    2a4c:	29 83       	std	Y+1, r18	; 0x01
    2a4e:	d9 01       	movw	r26, r18
    2a50:	2d 91       	ld	r18, X+
    2a52:	3d 91       	ld	r19, X+
    2a54:	4d 91       	ld	r20, X+
    2a56:	5c 91       	ld	r21, X
    2a58:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2a5c:	36 2e       	mov	r3, r22
    2a5e:	27 2e       	mov	r2, r23
    2a60:	89 8b       	std	Y+17, r24	; 0x11
    2a62:	9a a3       	std	Y+34, r25	; 0x22
    2a64:	00 0f       	add	r16, r16
    2a66:	11 1f       	adc	r17, r17
    2a68:	00 0f       	add	r16, r16
    2a6a:	11 1f       	adc	r17, r17
    2a6c:	98 01       	movw	r18, r16
    2a6e:	21 53       	subi	r18, 0x31	; 49
    2a70:	3d 4f       	sbci	r19, 0xFD	; 253
    2a72:	83 2d       	mov	r24, r3
    2a74:	92 2d       	mov	r25, r2
    2a76:	a9 89       	ldd	r26, Y+17	; 0x11
    2a78:	ba a1       	ldd	r27, Y+34	; 0x22
    2a7a:	f9 01       	movw	r30, r18
    2a7c:	80 83       	st	Z, r24
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	a2 83       	std	Z+2, r26	; 0x02
    2a82:	b3 83       	std	Z+3, r27	; 0x03
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    2a84:	f3 01       	movw	r30, r6
    2a86:	e9 5f       	subi	r30, 0xF9	; 249
    2a88:	fd 4f       	sbci	r31, 0xFD	; 253
    2a8a:	20 81       	ld	r18, Z
    2a8c:	31 81       	ldd	r19, Z+1	; 0x01
    2a8e:	42 81       	ldd	r20, Z+2	; 0x02
    2a90:	53 81       	ldd	r21, Z+3	; 0x03
    2a92:	6e a1       	ldd	r22, Y+38	; 0x26
    2a94:	7f a1       	ldd	r23, Y+39	; 0x27
    2a96:	88 a5       	ldd	r24, Y+40	; 0x28
    2a98:	99 a5       	ldd	r25, Y+41	; 0x29
    2a9a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2a9e:	2b 01       	movw	r4, r22
    2aa0:	3c 01       	movw	r6, r24
    2aa2:	a9 81       	ldd	r26, Y+1	; 0x01
    2aa4:	ba 81       	ldd	r27, Y+2	; 0x02
    2aa6:	2d 91       	ld	r18, X+
    2aa8:	3d 91       	ld	r19, X+
    2aaa:	4d 91       	ld	r20, X+
    2aac:	5c 91       	ld	r21, X
    2aae:	6a a5       	ldd	r22, Y+42	; 0x2a
    2ab0:	7b a5       	ldd	r23, Y+43	; 0x2b
    2ab2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ab4:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ab6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2aba:	a7 01       	movw	r20, r14
    2abc:	96 01       	movw	r18, r12
    2abe:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2ac2:	9b 01       	movw	r18, r22
    2ac4:	ac 01       	movw	r20, r24
    2ac6:	c3 01       	movw	r24, r6
    2ac8:	b2 01       	movw	r22, r4
    2aca:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2ace:	a5 01       	movw	r20, r10
    2ad0:	94 01       	movw	r18, r8
    2ad2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2ad6:	2b 01       	movw	r4, r22
    2ad8:	3c 01       	movw	r6, r24
    2ada:	f8 01       	movw	r30, r16
    2adc:	e9 5f       	subi	r30, 0xF9	; 249
    2ade:	fd 4f       	sbci	r31, 0xFD	; 253
    2ae0:	60 83       	st	Z, r22
    2ae2:	71 83       	std	Z+1, r23	; 0x01
    2ae4:	82 83       	std	Z+2, r24	; 0x02
    2ae6:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    2ae8:	0d 89       	ldd	r16, Y+21	; 0x15
    2aea:	1e 89       	ldd	r17, Y+22	; 0x16
    2aec:	01 50       	subi	r16, 0x01	; 1
    2aee:	11 09       	sbc	r17, r1
    2af0:	c0 90 cf 01 	lds	r12, 0x01CF
    2af4:	d0 90 d0 01 	lds	r13, 0x01D0
    2af8:	e0 90 d1 01 	lds	r14, 0x01D1
    2afc:	f0 90 d2 01 	lds	r15, 0x01D2
    2b00:	00 0f       	add	r16, r16
    2b02:	11 1f       	adc	r17, r17
    2b04:	00 0f       	add	r16, r16
    2b06:	11 1f       	adc	r17, r17
    2b08:	f8 01       	movw	r30, r16
    2b0a:	e5 53       	subi	r30, 0x35	; 53
    2b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0e:	80 80       	ld	r8, Z
    2b10:	91 80       	ldd	r9, Z+1	; 0x01
    2b12:	a2 80       	ldd	r10, Z+2	; 0x02
    2b14:	b3 80       	ldd	r11, Z+3	; 0x03
    2b16:	ed 89       	ldd	r30, Y+21	; 0x15
    2b18:	fe 89       	ldd	r31, Y+22	; 0x16
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	ee 0f       	add	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	fe 8b       	std	Y+22, r31	; 0x16
    2b24:	ed 8b       	std	Y+21, r30	; 0x15
    2b26:	e1 57       	subi	r30, 0x71	; 113
    2b28:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2a:	fa 83       	std	Y+2, r31	; 0x02
    2b2c:	e9 83       	std	Y+1, r30	; 0x01
    2b2e:	01 57       	subi	r16, 0x71	; 113
    2b30:	1e 4f       	sbci	r17, 0xFE	; 254
    2b32:	d8 01       	movw	r26, r16
    2b34:	2d 91       	ld	r18, X+
    2b36:	3d 91       	ld	r19, X+
    2b38:	4d 91       	ld	r20, X+
    2b3a:	5c 91       	ld	r21, X
    2b3c:	c7 01       	movw	r24, r14
    2b3e:	b6 01       	movw	r22, r12
    2b40:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2b44:	6e a7       	std	Y+46, r22	; 0x2e
    2b46:	7f a7       	std	Y+47, r23	; 0x2f
    2b48:	88 ab       	std	Y+48, r24	; 0x30
    2b4a:	99 ab       	std	Y+49, r25	; 0x31
    2b4c:	20 91 93 01 	lds	r18, 0x0193
    2b50:	30 91 94 01 	lds	r19, 0x0194
    2b54:	40 91 95 01 	lds	r20, 0x0195
    2b58:	50 91 96 01 	lds	r21, 0x0196
    2b5c:	c5 01       	movw	r24, r10
    2b5e:	b4 01       	movw	r22, r8
    2b60:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2b64:	9b 01       	movw	r18, r22
    2b66:	ac 01       	movw	r20, r24
    2b68:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b6a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b6c:	88 a9       	ldd	r24, Y+48	; 0x30
    2b6e:	99 a9       	ldd	r25, Y+49	; 0x31
    2b70:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2b74:	e9 81       	ldd	r30, Y+1	; 0x01
    2b76:	fa 81       	ldd	r31, Y+2	; 0x02
    2b78:	60 83       	st	Z, r22
    2b7a:	71 83       	std	Z+1, r23	; 0x01
    2b7c:	82 83       	std	Z+2, r24	; 0x02
    2b7e:	93 83       	std	Z+3, r25	; 0x03
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    2b80:	2d 89       	ldd	r18, Y+21	; 0x15
    2b82:	3e 89       	ldd	r19, Y+22	; 0x16
    2b84:	25 53       	subi	r18, 0x35	; 53
    2b86:	3e 4f       	sbci	r19, 0xFE	; 254
    2b88:	3a 83       	std	Y+2, r19	; 0x02
    2b8a:	29 83       	std	Y+1, r18	; 0x01
    2b8c:	a5 01       	movw	r20, r10
    2b8e:	94 01       	movw	r18, r8
    2b90:	c7 01       	movw	r24, r14
    2b92:	b6 01       	movw	r22, r12
    2b94:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2b98:	6b 01       	movw	r12, r22
    2b9a:	7c 01       	movw	r14, r24
    2b9c:	20 91 93 01 	lds	r18, 0x0193
    2ba0:	30 91 94 01 	lds	r19, 0x0194
    2ba4:	40 91 95 01 	lds	r20, 0x0195
    2ba8:	50 91 96 01 	lds	r21, 0x0196
    2bac:	d8 01       	movw	r26, r16
    2bae:	6d 91       	ld	r22, X+
    2bb0:	7d 91       	ld	r23, X+
    2bb2:	8d 91       	ld	r24, X+
    2bb4:	9c 91       	ld	r25, X
    2bb6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2bba:	9b 01       	movw	r18, r22
    2bbc:	ac 01       	movw	r20, r24
    2bbe:	c7 01       	movw	r24, r14
    2bc0:	b6 01       	movw	r22, r12
    2bc2:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    2bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bca:	60 83       	st	Z, r22
    2bcc:	71 83       	std	Z+1, r23	; 0x01
    2bce:	82 83       	std	Z+2, r24	; 0x02
    2bd0:	93 83       	std	Z+3, r25	; 0x03
    2bd2:	13 2d       	mov	r17, r3
    2bd4:	39 88       	ldd	r3, Y+17	; 0x11
    2bd6:	0a a1       	ldd	r16, Y+34	; 0x22
    2bd8:	e8 cc       	rjmp	.-1584   	; 0x25aa <igrf+0x6ec>
      z -= three * p[k];
      
      if(clat > 0)
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    2bda:	c7 01       	movw	r24, r14
    2bdc:	b6 01       	movw	r22, r12
    2bde:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2be2:	6b 01       	movw	r12, r22
    2be4:	7c 01       	movw	r14, r24
    2be6:	2d 81       	ldd	r18, Y+5	; 0x05
    2be8:	3e 81       	ldd	r19, Y+6	; 0x06
    2bea:	4f 81       	ldd	r20, Y+7	; 0x07
    2bec:	58 85       	ldd	r21, Y+8	; 0x08
    2bee:	69 89       	ldd	r22, Y+17	; 0x11
    2bf0:	7a 89       	ldd	r23, Y+18	; 0x12
    2bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2bfa:	9b 01       	movw	r18, r22
    2bfc:	ac 01       	movw	r20, r24
    2bfe:	c7 01       	movw	r24, r14
    2c00:	b6 01       	movw	r22, r12
    2c02:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    2c06:	a3 01       	movw	r20, r6
    2c08:	92 01       	movw	r18, r4
    2c0a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2c0e:	2a a5       	ldd	r18, Y+42	; 0x2a
    2c10:	3b a5       	ldd	r19, Y+43	; 0x2b
    2c12:	4c a5       	ldd	r20, Y+44	; 0x2c
    2c14:	5d a5       	ldd	r21, Y+45	; 0x2d
    2c16:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2c1a:	9b 01       	movw	r18, r22
    2c1c:	ac 01       	movw	r20, r24
    2c1e:	28 96       	adiw	r28, 0x08	; 8
    2c20:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c22:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c24:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c26:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c28:	28 97       	sbiw	r28, 0x08	; 8
    2c2a:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2c2e:	28 96       	adiw	r28, 0x08	; 8
    2c30:	6c af       	std	Y+60, r22	; 0x3c
    2c32:	7d af       	std	Y+61, r23	; 0x3d
    2c34:	8e af       	std	Y+62, r24	; 0x3e
    2c36:	9f af       	std	Y+63, r25	; 0x3f
    2c38:	28 97       	sbiw	r28, 0x08	; 8
    2c3a:	39 ce       	rjmp	.-910    	; 0x28ae <igrf+0x9f0>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
    2c3c:	1e aa       	std	Y+54, r1	; 0x36
    2c3e:	1f aa       	std	Y+55, r1	; 0x37
    2c40:	18 ae       	std	Y+56, r1	; 0x38
    2c42:	19 ae       	std	Y+57, r1	; 0x39
    2c44:	28 96       	adiw	r28, 0x08	; 8
    2c46:	1c ae       	std	Y+60, r1	; 0x3c
    2c48:	1d ae       	std	Y+61, r1	; 0x3d
    2c4a:	1e ae       	std	Y+62, r1	; 0x3e
    2c4c:	1f ae       	std	Y+63, r1	; 0x3f
    2c4e:	28 97       	sbiw	r28, 0x08	; 8
    2c50:	1a aa       	std	Y+50, r1	; 0x32
    2c52:	1b aa       	std	Y+51, r1	; 0x33
    2c54:	1c aa       	std	Y+52, r1	; 0x34
    2c56:	1d aa       	std	Y+53, r1	; 0x35
    2c58:	36 ce       	rjmp	.-916    	; 0x28c6 <igrf+0xa08>
    2c5a:	82 2f       	mov	r24, r18
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	fc 01       	movw	r30, r24
    2c68:	e9 5f       	subi	r30, 0xF9	; 249
    2c6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c6c:	40 80       	ld	r4, Z
    2c6e:	51 80       	ldd	r5, Z+1	; 0x01
    2c70:	62 80       	ldd	r6, Z+2	; 0x02
    2c72:	73 80       	ldd	r7, Z+3	; 0x03
    2c74:	fc 01       	movw	r30, r24
    2c76:	e1 53       	subi	r30, 0x31	; 49
    2c78:	fd 4f       	sbci	r31, 0xFD	; 253
    2c7a:	10 81       	ld	r17, Z
    2c7c:	21 80       	ldd	r2, Z+1	; 0x01
    2c7e:	32 80       	ldd	r3, Z+2	; 0x02
    2c80:	03 81       	ldd	r16, Z+3	; 0x03
    2c82:	93 cc       	rjmp	.-1754   	; 0x25aa <igrf+0x6ec>

00002c84 <init_UART_MM>:
#include "peripherals.h"
#include "uart.h"


void init_UART_MM(void )
{
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29

  UCSR1A = 0;
    2c88:	cb e9       	ldi	r28, 0x9B	; 155
    2c8a:	d0 e0       	ldi	r29, 0x00	; 0
    2c8c:	18 82       	st	Y, r1
  UCSR1B = 0;
    2c8e:	aa e9       	ldi	r26, 0x9A	; 154
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	1c 92       	st	X, r1
  UCSR1C = 0;
    2c94:	ed e9       	ldi	r30, 0x9D	; 157
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
    2c9a:	88 81       	ld	r24, Y
    2c9c:	82 60       	ori	r24, 0x02	; 2
    2c9e:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1) |  _BV(RXCIE1);
    2ca0:	8c 91       	ld	r24, X
    2ca2:	88 69       	ori	r24, 0x98	; 152
    2ca4:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
    2ca6:	80 81       	ld	r24, Z
    2ca8:	86 60       	ori	r24, 0x06	; 6
    2caa:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
    2cac:	87 e6       	ldi	r24, 0x67	; 103
    2cae:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = 0;
    2cb2:	10 92 98 00 	sts	0x0098, r1
}
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	08 95       	ret

00002cbc <poll_MM1>:

static volatile uint8_t t;
void poll_MM1(void)
{
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
	 uint16_t Bx;
	 uint16_t By;
	 uint16_t Bz;
	 uint8_t c= 80;
	 
	 transmit_UART0(c);
    2cc8:	80 e5       	ldi	r24, 0x50	; 80
    2cca:	0e 94 9f 24 	call	0x493e	; 0x493e <transmit_UART0>
	 Bx=(uint16_t)receive_UART0();
    2cce:	0e 94 a3 24 	call	0x4946	; 0x4946 <receive_UART0>
    2cd2:	08 2f       	mov	r16, r24
    2cd4:	10 e0       	ldi	r17, 0x00	; 0
	 Bx=(Bx<<8);
    2cd6:	10 2f       	mov	r17, r16
    2cd8:	00 27       	eor	r16, r16
	 Bx &= 0xFF00;
	 Bx|=(uint16_t)receive_UART0();
    2cda:	0e 94 a3 24 	call	0x4946	; 0x4946 <receive_UART0>
    2cde:	08 2b       	or	r16, r24
	 Current_state.mm.B_x = ((float) Bx) / 15000;
    2ce0:	b8 01       	movw	r22, r16
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 94 33 26 	call	0x4c66	; 0x4c66 <__floatunsisf>
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e6       	ldi	r19, 0x60	; 96
    2cee:	4a e6       	ldi	r20, 0x6A	; 106
    2cf0:	56 e4       	ldi	r21, 0x46	; 70
    2cf2:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2cf6:	60 93 58 04 	sts	0x0458, r22
    2cfa:	70 93 59 04 	sts	0x0459, r23
    2cfe:	80 93 5a 04 	sts	0x045A, r24
    2d02:	90 93 5b 04 	sts	0x045B, r25
	 // sprintf(sx,"x is %f",Current_state.mm.B_x);
	 
	 //transmit_UART0('x');
	 By=(uint16_t)receive_UART0();
    2d06:	0e 94 a3 24 	call	0x4946	; 0x4946 <receive_UART0>
    2d0a:	c8 2f       	mov	r28, r24
    2d0c:	d0 e0       	ldi	r29, 0x00	; 0
	 By=(By<<8);
    2d0e:	dc 2f       	mov	r29, r28
    2d10:	cc 27       	eor	r28, r28
	 By &= 0xFF00;
	 By|=(uint16_t)receive_UART0();
    2d12:	0e 94 a3 24 	call	0x4946	; 0x4946 <receive_UART0>
    2d16:	c8 2b       	or	r28, r24
	 Current_state.mm.B_y = ((float) By) / 15000;
    2d18:	be 01       	movw	r22, r28
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 33 26 	call	0x4c66	; 0x4c66 <__floatunsisf>
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e6       	ldi	r19, 0x60	; 96
    2d26:	4a e6       	ldi	r20, 0x6A	; 106
    2d28:	56 e4       	ldi	r21, 0x46	; 70
    2d2a:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2d2e:	60 93 5c 04 	sts	0x045C, r22
    2d32:	70 93 5d 04 	sts	0x045D, r23
    2d36:	80 93 5e 04 	sts	0x045E, r24
    2d3a:	90 93 5f 04 	sts	0x045F, r25
	 //sprintf(sx,"x is %f",Current_state.mm.B_y);
	 
	 //transmit_UART0('y');
	 Bz=(uint16_t)receive_UART0();
    2d3e:	0e 94 a3 24 	call	0x4946	; 0x4946 <receive_UART0>
    2d42:	e8 2e       	mov	r14, r24
    2d44:	f1 2c       	mov	r15, r1
	 Bz=(Bz<<8);
    2d46:	fe 2c       	mov	r15, r14
    2d48:	ee 24       	eor	r14, r14
	 Bz &= 0xFF00;
	 Bz|=(uint16_t)receive_UART0();
    2d4a:	0e 94 a3 24 	call	0x4946	; 0x4946 <receive_UART0>
    2d4e:	e8 2a       	or	r14, r24
	 Current_state.mm.B_z = ((float) Bz) / 15000;
    2d50:	b7 01       	movw	r22, r14
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 33 26 	call	0x4c66	; 0x4c66 <__floatunsisf>
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e6       	ldi	r19, 0x60	; 96
    2d5e:	4a e6       	ldi	r20, 0x6A	; 106
    2d60:	56 e4       	ldi	r21, 0x46	; 70
    2d62:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2d66:	60 93 60 04 	sts	0x0460, r22
    2d6a:	70 93 61 04 	sts	0x0461, r23
    2d6e:	80 93 62 04 	sts	0x0462, r24
    2d72:	90 93 63 04 	sts	0x0463, r25
	 //sprintf(sx,"x is %f",Current_state.mm.B_z);
	 
	 //transmit_UART0('cr');
	 //receive_MM();
	 
	 if(Bx > 30000)
    2d76:	01 33       	cpi	r16, 0x31	; 49
    2d78:	85 e7       	ldi	r24, 0x75	; 117
    2d7a:	18 07       	cpc	r17, r24
    2d7c:	a8 f0       	brcs	.+42     	; 0x2da8 <poll_MM1+0xec>
	 {   Bx1 = Bx - 65536;
		 Current_state.mm.B_x = ((float) Bx1) / 15000;
    2d7e:	b8 01       	movw	r22, r16
    2d80:	88 27       	eor	r24, r24
    2d82:	77 fd       	sbrc	r23, 7
    2d84:	80 95       	com	r24
    2d86:	98 2f       	mov	r25, r24
    2d88:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e6       	ldi	r19, 0x60	; 96
    2d90:	4a e6       	ldi	r20, 0x6A	; 106
    2d92:	56 e4       	ldi	r21, 0x46	; 70
    2d94:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2d98:	60 93 58 04 	sts	0x0458, r22
    2d9c:	70 93 59 04 	sts	0x0459, r23
    2da0:	80 93 5a 04 	sts	0x045A, r24
    2da4:	90 93 5b 04 	sts	0x045B, r25
		 //sprintf(sx,"x is %f",Current_state.mm.B_x);
	 }
	 
	 if(By > 30000)
    2da8:	c1 33       	cpi	r28, 0x31	; 49
    2daa:	85 e7       	ldi	r24, 0x75	; 117
    2dac:	d8 07       	cpc	r29, r24
    2dae:	a8 f0       	brcs	.+42     	; 0x2dda <poll_MM1+0x11e>
	 {   By1 = By - 65536;
		 Current_state.mm.B_y = ((float) By1) / 15000;
    2db0:	be 01       	movw	r22, r28
    2db2:	88 27       	eor	r24, r24
    2db4:	77 fd       	sbrc	r23, 7
    2db6:	80 95       	com	r24
    2db8:	98 2f       	mov	r25, r24
    2dba:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e6       	ldi	r19, 0x60	; 96
    2dc2:	4a e6       	ldi	r20, 0x6A	; 106
    2dc4:	56 e4       	ldi	r21, 0x46	; 70
    2dc6:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2dca:	60 93 5c 04 	sts	0x045C, r22
    2dce:	70 93 5d 04 	sts	0x045D, r23
    2dd2:	80 93 5e 04 	sts	0x045E, r24
    2dd6:	90 93 5f 04 	sts	0x045F, r25
		 // sprintf(sy,"y is %f",By1);
	 }
	 
	 if(Bz > 30000)
    2dda:	81 e3       	ldi	r24, 0x31	; 49
    2ddc:	e8 16       	cp	r14, r24
    2dde:	85 e7       	ldi	r24, 0x75	; 117
    2de0:	f8 06       	cpc	r15, r24
    2de2:	a8 f0       	brcs	.+42     	; 0x2e0e <poll_MM1+0x152>
	 {Bz1 = Bz - 65536;Current_state.mm.B_z = ((float) Bz1) / 15000;
    2de4:	b7 01       	movw	r22, r14
    2de6:	88 27       	eor	r24, r24
    2de8:	77 fd       	sbrc	r23, 7
    2dea:	80 95       	com	r24
    2dec:	98 2f       	mov	r25, r24
    2dee:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e6       	ldi	r19, 0x60	; 96
    2df6:	4a e6       	ldi	r20, 0x6A	; 106
    2df8:	56 e4       	ldi	r21, 0x46	; 70
    2dfa:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    2dfe:	60 93 60 04 	sts	0x0460, r22
    2e02:	70 93 61 04 	sts	0x0461, r23
    2e06:	80 93 62 04 	sts	0x0462, r24
    2e0a:	90 93 63 04 	sts	0x0463, r25
      transmit_string_UART0(sy);
      transmit_UART0(' ');
      transmit_string_UART0(sz);
      transmit_UART0('\r');
	  */
}
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	08 95       	ret

00002e1c <main>:
 */

int main(void){
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
  init_UART_MM();
    2e1c:	33 df       	rcall	.-410    	; 0x2c84 <init_UART_MM>
  init_UART_GPS();
    2e1e:	0e 94 6d 0b 	call	0x16da	; 0x16da <init_UART_GPS>
  init_SPI();
    2e22:	0e 94 34 24 	call	0x4868	; 0x4868 <init_SPI>
  init_UART0();
    2e26:	0e 94 8e 24 	call	0x491c	; 0x491c <init_UART0>
  ///Configure the magnetometer
  //configure_MM();
  DDRA=0xf0;
    2e2a:	80 ef       	ldi	r24, 0xF0	; 240
    2e2c:	8a bb       	out	0x1a, r24	; 26
  PORTA = 0xE0;
    2e2e:	80 ee       	ldi	r24, 0xE0	; 224
    2e30:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e32:	2f ef       	ldi	r18, 0xFF	; 255
    2e34:	82 e5       	ldi	r24, 0x52	; 82
    2e36:	97 e0       	ldi	r25, 0x07	; 7
    2e38:	21 50       	subi	r18, 0x01	; 1
    2e3a:	80 40       	sbci	r24, 0x00	; 0
    2e3c:	90 40       	sbci	r25, 0x00	; 0
    2e3e:	e1 f7       	brne	.-8      	; 0x2e38 <main+0x1c>
    2e40:	00 c0       	rjmp	.+0      	; 0x2e42 <main+0x26>
    2e42:	00 00       	nop
	  
    ///Wait for all components to switch on
    _delay_ms(300);
    
    ///* Switch on Global interrupts
    sei();
    2e44:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    2e46:	10 92 75 04 	sts	0x0475, r1
    2e4a:	10 92 76 04 	sts	0x0476, r1
    2e4e:	10 92 77 04 	sts	0x0477, r1
    2e52:	10 92 78 04 	sts	0x0478, r1
    2e56:	10 92 79 04 	sts	0x0479, r1
    2e5a:	10 92 7a 04 	sts	0x047A, r1
    2e5e:	10 92 7b 04 	sts	0x047B, r1
    2e62:	10 92 7c 04 	sts	0x047C, r1
      /**
      * * * * Task 1: Control codes
       * @ref control
       */
	  
      control();
    2e66:	0e 94 28 05 	call	0xa50	; 0xa50 <control>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    2e6a:	20 91 75 04 	lds	r18, 0x0475
    2e6e:	30 91 76 04 	lds	r19, 0x0476
    2e72:	40 91 77 04 	lds	r20, 0x0477
    2e76:	50 91 78 04 	lds	r21, 0x0478
    2e7a:	60 91 79 04 	lds	r22, 0x0479
    2e7e:	70 91 7a 04 	lds	r23, 0x047A
    2e82:	80 91 7b 04 	lds	r24, 0x047B
    2e86:	90 91 7c 04 	lds	r25, 0x047C
    2e8a:	a2 e0       	ldi	r26, 0x02	; 2
    2e8c:	0e 94 ef 29 	call	0x53de	; 0x53de <__adddi3_s8>
    2e90:	20 93 75 04 	sts	0x0475, r18
    2e94:	30 93 76 04 	sts	0x0476, r19
    2e98:	40 93 77 04 	sts	0x0477, r20
    2e9c:	50 93 78 04 	sts	0x0478, r21
    2ea0:	60 93 79 04 	sts	0x0479, r22
    2ea4:	70 93 7a 04 	sts	0x047A, r23
    2ea8:	80 93 7b 04 	sts	0x047B, r24
    2eac:	90 93 7c 04 	sts	0x047C, r25
    2eb0:	da cf       	rjmp	.-76     	; 0x2e66 <main+0x4a>

00002eb2 <copy_vector>:
*/
#include "common.h"
#include "mathutil.h"

void copy_vector(vector v_src, vector v_dest)
{
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	eb 01       	movw	r28, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    2eba:	40 81       	ld	r20, Z
    2ebc:	51 81       	ldd	r21, Z+1	; 0x01
    2ebe:	62 81       	ldd	r22, Z+2	; 0x02
    2ec0:	73 81       	ldd	r23, Z+3	; 0x03
    2ec2:	48 83       	st	Y, r20
    2ec4:	59 83       	std	Y+1, r21	; 0x01
    2ec6:	6a 83       	std	Y+2, r22	; 0x02
    2ec8:	7b 83       	std	Y+3, r23	; 0x03
    2eca:	44 81       	ldd	r20, Z+4	; 0x04
    2ecc:	55 81       	ldd	r21, Z+5	; 0x05
    2ece:	66 81       	ldd	r22, Z+6	; 0x06
    2ed0:	77 81       	ldd	r23, Z+7	; 0x07
    2ed2:	4c 83       	std	Y+4, r20	; 0x04
    2ed4:	5d 83       	std	Y+5, r21	; 0x05
    2ed6:	6e 83       	std	Y+6, r22	; 0x06
    2ed8:	7f 83       	std	Y+7, r23	; 0x07
    2eda:	80 85       	ldd	r24, Z+8	; 0x08
    2edc:	91 85       	ldd	r25, Z+9	; 0x09
    2ede:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ee0:	b3 85       	ldd	r27, Z+11	; 0x0b
    2ee2:	88 87       	std	Y+8, r24	; 0x08
    2ee4:	99 87       	std	Y+9, r25	; 0x09
    2ee6:	aa 87       	std	Y+10, r26	; 0x0a
    2ee8:	bb 87       	std	Y+11, r27	; 0x0b
}
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	08 95       	ret

00002ef0 <copy_quaternion>:

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	fb 01       	movw	r30, r22
    2ef4:	84 e0       	ldi	r24, 0x04	; 4
  uint8_t i;
  for(i = 0; i < 4; i++)
    q_dest[i] = q_src[i];
    2ef6:	4d 91       	ld	r20, X+
    2ef8:	5d 91       	ld	r21, X+
    2efa:	6d 91       	ld	r22, X+
    2efc:	7d 91       	ld	r23, X+
    2efe:	41 93       	st	Z+, r20
    2f00:	51 93       	st	Z+, r21
    2f02:	61 93       	st	Z+, r22
    2f04:	71 93       	st	Z+, r23
    2f06:	81 50       	subi	r24, 0x01	; 1
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    2f08:	b1 f7       	brne	.-20     	; 0x2ef6 <copy_quaternion+0x6>
    q_dest[i] = q_src[i];
}
    2f0a:	08 95       	ret

00002f0c <vector_norm>:


float vector_norm(vector v)
{
    2f0c:	4f 92       	push	r4
    2f0e:	5f 92       	push	r5
    2f10:	6f 92       	push	r6
    2f12:	7f 92       	push	r7
    2f14:	8f 92       	push	r8
    2f16:	9f 92       	push	r9
    2f18:	af 92       	push	r10
    2f1a:	bf 92       	push	r11
    2f1c:	cf 92       	push	r12
    2f1e:	df 92       	push	r13
    2f20:	ef 92       	push	r14
    2f22:	ff 92       	push	r15
    2f24:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	84 80       	ldd	r8, Z+4	; 0x04
    2f30:	95 80       	ldd	r9, Z+5	; 0x05
    2f32:	a6 80       	ldd	r10, Z+6	; 0x06
    2f34:	b7 80       	ldd	r11, Z+7	; 0x07
    2f36:	c0 84       	ldd	r12, Z+8	; 0x08
    2f38:	d1 84       	ldd	r13, Z+9	; 0x09
    2f3a:	e2 84       	ldd	r14, Z+10	; 0x0a
    2f3c:	f3 84       	ldd	r15, Z+11	; 0x0b
    2f3e:	9b 01       	movw	r18, r22
    2f40:	ac 01       	movw	r20, r24
    2f42:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2f46:	2b 01       	movw	r4, r22
    2f48:	3c 01       	movw	r6, r24
    2f4a:	a5 01       	movw	r20, r10
    2f4c:	94 01       	movw	r18, r8
    2f4e:	c5 01       	movw	r24, r10
    2f50:	b4 01       	movw	r22, r8
    2f52:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2f56:	9b 01       	movw	r18, r22
    2f58:	ac 01       	movw	r20, r24
    2f5a:	c3 01       	movw	r24, r6
    2f5c:	b2 01       	movw	r22, r4
    2f5e:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    2f62:	4b 01       	movw	r8, r22
    2f64:	5c 01       	movw	r10, r24
    2f66:	a7 01       	movw	r20, r14
    2f68:	96 01       	movw	r18, r12
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2f72:	9b 01       	movw	r18, r22
    2f74:	ac 01       	movw	r20, r24
    2f76:	c5 01       	movw	r24, r10
    2f78:	b4 01       	movw	r22, r8
    2f7a:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
}
    2f7e:	ff 90       	pop	r15
    2f80:	ef 90       	pop	r14
    2f82:	df 90       	pop	r13
    2f84:	cf 90       	pop	r12
    2f86:	bf 90       	pop	r11
    2f88:	af 90       	pop	r10
    2f8a:	9f 90       	pop	r9
    2f8c:	8f 90       	pop	r8
    2f8e:	7f 90       	pop	r7
    2f90:	6f 90       	pop	r6
    2f92:	5f 90       	pop	r5
    2f94:	4f 90       	pop	r4
}


float vector_norm(vector v)
{
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    2f96:	0c 94 71 28 	jmp	0x50e2	; 0x50e2 <sqrt>

00002f9a <quaternion_norm>:
}

float quaternion_norm(quaternion q)
{
    2f9a:	4f 92       	push	r4
    2f9c:	5f 92       	push	r5
    2f9e:	6f 92       	push	r6
    2fa0:	7f 92       	push	r7
    2fa2:	8f 92       	push	r8
    2fa4:	9f 92       	push	r9
    2fa6:	af 92       	push	r10
    2fa8:	bf 92       	push	r11
    2faa:	cf 92       	push	r12
    2fac:	df 92       	push	r13
    2fae:	ef 92       	push	r14
    2fb0:	ff 92       	push	r15
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <quaternion_norm+0x1e>
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <quaternion_norm+0x20>
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	fc 01       	movw	r30, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	84 80       	ldd	r8, Z+4	; 0x04
    2fca:	95 80       	ldd	r9, Z+5	; 0x05
    2fcc:	a6 80       	ldd	r10, Z+6	; 0x06
    2fce:	b7 80       	ldd	r11, Z+7	; 0x07
    2fd0:	c0 84       	ldd	r12, Z+8	; 0x08
    2fd2:	d1 84       	ldd	r13, Z+9	; 0x09
    2fd4:	e2 84       	ldd	r14, Z+10	; 0x0a
    2fd6:	f3 84       	ldd	r15, Z+11	; 0x0b
    2fd8:	44 84       	ldd	r4, Z+12	; 0x0c
    2fda:	55 84       	ldd	r5, Z+13	; 0x0d
    2fdc:	66 84       	ldd	r6, Z+14	; 0x0e
    2fde:	77 84       	ldd	r7, Z+15	; 0x0f
    2fe0:	9b 01       	movw	r18, r22
    2fe2:	ac 01       	movw	r20, r24
    2fe4:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2fe8:	69 83       	std	Y+1, r22	; 0x01
    2fea:	7a 83       	std	Y+2, r23	; 0x02
    2fec:	8b 83       	std	Y+3, r24	; 0x03
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	a5 01       	movw	r20, r10
    2ff2:	94 01       	movw	r18, r8
    2ff4:	c5 01       	movw	r24, r10
    2ff6:	b4 01       	movw	r22, r8
    2ff8:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    2ffc:	9b 01       	movw	r18, r22
    2ffe:	ac 01       	movw	r20, r24
    3000:	69 81       	ldd	r22, Y+1	; 0x01
    3002:	7a 81       	ldd	r23, Y+2	; 0x02
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    300c:	4b 01       	movw	r8, r22
    300e:	5c 01       	movw	r10, r24
    3010:	a7 01       	movw	r20, r14
    3012:	96 01       	movw	r18, r12
    3014:	c7 01       	movw	r24, r14
    3016:	b6 01       	movw	r22, r12
    3018:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    301c:	9b 01       	movw	r18, r22
    301e:	ac 01       	movw	r20, r24
    3020:	c5 01       	movw	r24, r10
    3022:	b4 01       	movw	r22, r8
    3024:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    3028:	6b 01       	movw	r12, r22
    302a:	7c 01       	movw	r14, r24
    302c:	a3 01       	movw	r20, r6
    302e:	92 01       	movw	r18, r4
    3030:	c3 01       	movw	r24, r6
    3032:	b2 01       	movw	r22, r4
    3034:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3038:	9b 01       	movw	r18, r22
    303a:	ac 01       	movw	r20, r24
    303c:	c7 01       	movw	r24, r14
    303e:	b6 01       	movw	r22, r12
    3040:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
}
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	bf 90       	pop	r11
    305a:	af 90       	pop	r10
    305c:	9f 90       	pop	r9
    305e:	8f 90       	pop	r8
    3060:	7f 90       	pop	r7
    3062:	6f 90       	pop	r6
    3064:	5f 90       	pop	r5
    3066:	4f 90       	pop	r4
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}

float quaternion_norm(quaternion q)
{
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3068:	0c 94 71 28 	jmp	0x50e2	; 0x50e2 <sqrt>

0000306c <vector_dot_product>:
}

float vector_dot_product(vector v_a, vector v_b)
{
    306c:	cf 92       	push	r12
    306e:	df 92       	push	r13
    3070:	ef 92       	push	r14
    3072:	ff 92       	push	r15
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	ec 01       	movw	r28, r24
    307e:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3080:	fb 01       	movw	r30, r22
    3082:	20 81       	ld	r18, Z
    3084:	31 81       	ldd	r19, Z+1	; 0x01
    3086:	42 81       	ldd	r20, Z+2	; 0x02
    3088:	53 81       	ldd	r21, Z+3	; 0x03
    308a:	68 81       	ld	r22, Y
    308c:	79 81       	ldd	r23, Y+1	; 0x01
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	9b 81       	ldd	r25, Y+3	; 0x03
    3092:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3096:	6b 01       	movw	r12, r22
    3098:	7c 01       	movw	r14, r24
    309a:	f8 01       	movw	r30, r16
    309c:	24 81       	ldd	r18, Z+4	; 0x04
    309e:	35 81       	ldd	r19, Z+5	; 0x05
    30a0:	46 81       	ldd	r20, Z+6	; 0x06
    30a2:	57 81       	ldd	r21, Z+7	; 0x07
    30a4:	6c 81       	ldd	r22, Y+4	; 0x04
    30a6:	7d 81       	ldd	r23, Y+5	; 0x05
    30a8:	8e 81       	ldd	r24, Y+6	; 0x06
    30aa:	9f 81       	ldd	r25, Y+7	; 0x07
    30ac:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    30b0:	9b 01       	movw	r18, r22
    30b2:	ac 01       	movw	r20, r24
    30b4:	c7 01       	movw	r24, r14
    30b6:	b6 01       	movw	r22, r12
    30b8:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    30bc:	6b 01       	movw	r12, r22
    30be:	7c 01       	movw	r14, r24
    30c0:	f8 01       	movw	r30, r16
    30c2:	20 85       	ldd	r18, Z+8	; 0x08
    30c4:	31 85       	ldd	r19, Z+9	; 0x09
    30c6:	42 85       	ldd	r20, Z+10	; 0x0a
    30c8:	53 85       	ldd	r21, Z+11	; 0x0b
    30ca:	68 85       	ldd	r22, Y+8	; 0x08
    30cc:	79 85       	ldd	r23, Y+9	; 0x09
    30ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    30d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    30d6:	9b 01       	movw	r18, r22
    30d8:	ac 01       	movw	r20, r24
    30da:	c7 01       	movw	r24, r14
    30dc:	b6 01       	movw	r22, r12
    30de:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
}
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	ff 90       	pop	r15
    30ec:	ef 90       	pop	r14
    30ee:	df 90       	pop	r13
    30f0:	cf 90       	pop	r12
    30f2:	08 95       	ret

000030f4 <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    30f4:	df 92       	push	r13
    30f6:	ef 92       	push	r14
    30f8:	ff 92       	push	r15
    30fa:	0f 93       	push	r16
    30fc:	1f 93       	push	r17
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	7c 01       	movw	r14, r24
    3104:	8b 01       	movw	r16, r22
    3106:	ea 01       	movw	r28, r20
  uint8_t i;
  for(i = 0; i < 3; i++)
    3108:	d1 2c       	mov	r13, r1
    v_res[i] = v_a[i] + v_b[i];
    310a:	f7 01       	movw	r30, r14
    310c:	61 91       	ld	r22, Z+
    310e:	71 91       	ld	r23, Z+
    3110:	81 91       	ld	r24, Z+
    3112:	91 91       	ld	r25, Z+
    3114:	7f 01       	movw	r14, r30
    3116:	f8 01       	movw	r30, r16
    3118:	21 91       	ld	r18, Z+
    311a:	31 91       	ld	r19, Z+
    311c:	41 91       	ld	r20, Z+
    311e:	51 91       	ld	r21, Z+
    3120:	8f 01       	movw	r16, r30
    3122:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    3126:	69 93       	st	Y+, r22
    3128:	79 93       	st	Y+, r23
    312a:	89 93       	st	Y+, r24
    312c:	99 93       	st	Y+, r25
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    312e:	d3 94       	inc	r13
    3130:	f3 e0       	ldi	r31, 0x03	; 3
    3132:	df 12       	cpse	r13, r31
    3134:	ea cf       	rjmp	.-44     	; 0x310a <add_vectors+0x16>
    v_res[i] = v_a[i] + v_b[i];
}
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	ff 90       	pop	r15
    3140:	ef 90       	pop	r14
    3142:	df 90       	pop	r13
    3144:	08 95       	ret

00003146 <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3146:	3f 92       	push	r3
    3148:	4f 92       	push	r4
    314a:	5f 92       	push	r5
    314c:	6f 92       	push	r6
    314e:	7f 92       	push	r7
    3150:	8f 92       	push	r8
    3152:	9f 92       	push	r9
    3154:	af 92       	push	r10
    3156:	bf 92       	push	r11
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	38 2e       	mov	r3, r24
    316a:	89 2e       	mov	r8, r25
    316c:	5b 01       	movw	r10, r22
    316e:	7a 01       	movw	r14, r20
    3170:	c1 2c       	mov	r12, r1
    3172:	d1 2c       	mov	r13, r1
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3174:	f7 01       	movw	r30, r14
    3176:	10 82       	st	Z, r1
    3178:	11 82       	std	Z+1, r1	; 0x01
    317a:	12 82       	std	Z+2, r1	; 0x02
    317c:	13 82       	std	Z+3, r1	; 0x03
    317e:	03 2d       	mov	r16, r3
    3180:	18 2d       	mov	r17, r8
    3182:	e5 01       	movw	r28, r10
    3184:	cc 0d       	add	r28, r12
    3186:	dd 1d       	adc	r29, r13
    3188:	83 e0       	ldi	r24, 0x03	; 3
    318a:	98 2e       	mov	r9, r24
    318c:	41 2c       	mov	r4, r1
    318e:	51 2c       	mov	r5, r1
    3190:	32 01       	movw	r6, r4
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
    3192:	f8 01       	movw	r30, r16
    3194:	61 91       	ld	r22, Z+
    3196:	71 91       	ld	r23, Z+
    3198:	81 91       	ld	r24, Z+
    319a:	91 91       	ld	r25, Z+
    319c:	8f 01       	movw	r16, r30
    319e:	28 81       	ld	r18, Y
    31a0:	39 81       	ldd	r19, Y+1	; 0x01
    31a2:	4a 81       	ldd	r20, Y+2	; 0x02
    31a4:	5b 81       	ldd	r21, Y+3	; 0x03
    31a6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    31aa:	9b 01       	movw	r18, r22
    31ac:	ac 01       	movw	r20, r24
    31ae:	c3 01       	movw	r24, r6
    31b0:	b2 01       	movw	r22, r4
    31b2:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    31b6:	2b 01       	movw	r4, r22
    31b8:	3c 01       	movw	r6, r24
    31ba:	f7 01       	movw	r30, r14
    31bc:	60 83       	st	Z, r22
    31be:	71 83       	std	Z+1, r23	; 0x01
    31c0:	82 83       	std	Z+2, r24	; 0x02
    31c2:	93 83       	std	Z+3, r25	; 0x03
    31c4:	9a 94       	dec	r9
    31c6:	2c 96       	adiw	r28, 0x0c	; 12
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    31c8:	91 10       	cpse	r9, r1
    31ca:	e3 cf       	rjmp	.-58     	; 0x3192 <vector_into_matrix+0x4c>
    31cc:	f4 e0       	ldi	r31, 0x04	; 4
    31ce:	ef 0e       	add	r14, r31
    31d0:	f1 1c       	adc	r15, r1
    31d2:	84 e0       	ldi	r24, 0x04	; 4
    31d4:	c8 0e       	add	r12, r24
    31d6:	d1 1c       	adc	r13, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    31d8:	ec e0       	ldi	r30, 0x0C	; 12
    31da:	ce 16       	cp	r12, r30
    31dc:	d1 04       	cpc	r13, r1
    31de:	51 f6       	brne	.-108    	; 0x3174 <vector_into_matrix+0x2e>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	1f 91       	pop	r17
    31e6:	0f 91       	pop	r16
    31e8:	ff 90       	pop	r15
    31ea:	ef 90       	pop	r14
    31ec:	df 90       	pop	r13
    31ee:	cf 90       	pop	r12
    31f0:	bf 90       	pop	r11
    31f2:	af 90       	pop	r10
    31f4:	9f 90       	pop	r9
    31f6:	8f 90       	pop	r8
    31f8:	7f 90       	pop	r7
    31fa:	6f 90       	pop	r6
    31fc:	5f 90       	pop	r5
    31fe:	4f 90       	pop	r4
    3200:	3f 90       	pop	r3
    3202:	08 95       	ret

00003204 <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3204:	af 92       	push	r10
    3206:	bf 92       	push	r11
    3208:	cf 92       	push	r12
    320a:	df 92       	push	r13
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	ec 01       	movw	r28, r24
    321a:	8b 01       	movw	r16, r22
    321c:	5a 01       	movw	r10, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    321e:	fb 01       	movw	r30, r22
    3220:	20 85       	ldd	r18, Z+8	; 0x08
    3222:	31 85       	ldd	r19, Z+9	; 0x09
    3224:	42 85       	ldd	r20, Z+10	; 0x0a
    3226:	53 85       	ldd	r21, Z+11	; 0x0b
    3228:	6c 81       	ldd	r22, Y+4	; 0x04
    322a:	7d 81       	ldd	r23, Y+5	; 0x05
    322c:	8e 81       	ldd	r24, Y+6	; 0x06
    322e:	9f 81       	ldd	r25, Y+7	; 0x07
    3230:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3234:	6b 01       	movw	r12, r22
    3236:	7c 01       	movw	r14, r24
    3238:	f8 01       	movw	r30, r16
    323a:	24 81       	ldd	r18, Z+4	; 0x04
    323c:	35 81       	ldd	r19, Z+5	; 0x05
    323e:	46 81       	ldd	r20, Z+6	; 0x06
    3240:	57 81       	ldd	r21, Z+7	; 0x07
    3242:	68 85       	ldd	r22, Y+8	; 0x08
    3244:	79 85       	ldd	r23, Y+9	; 0x09
    3246:	8a 85       	ldd	r24, Y+10	; 0x0a
    3248:	9b 85       	ldd	r25, Y+11	; 0x0b
    324a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    324e:	9b 01       	movw	r18, r22
    3250:	ac 01       	movw	r20, r24
    3252:	c7 01       	movw	r24, r14
    3254:	b6 01       	movw	r22, r12
    3256:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    325a:	f5 01       	movw	r30, r10
    325c:	60 83       	st	Z, r22
    325e:	71 83       	std	Z+1, r23	; 0x01
    3260:	82 83       	std	Z+2, r24	; 0x02
    3262:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    3264:	f8 01       	movw	r30, r16
    3266:	20 81       	ld	r18, Z
    3268:	31 81       	ldd	r19, Z+1	; 0x01
    326a:	42 81       	ldd	r20, Z+2	; 0x02
    326c:	53 81       	ldd	r21, Z+3	; 0x03
    326e:	68 85       	ldd	r22, Y+8	; 0x08
    3270:	79 85       	ldd	r23, Y+9	; 0x09
    3272:	8a 85       	ldd	r24, Y+10	; 0x0a
    3274:	9b 85       	ldd	r25, Y+11	; 0x0b
    3276:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    327a:	6b 01       	movw	r12, r22
    327c:	7c 01       	movw	r14, r24
    327e:	f8 01       	movw	r30, r16
    3280:	20 85       	ldd	r18, Z+8	; 0x08
    3282:	31 85       	ldd	r19, Z+9	; 0x09
    3284:	42 85       	ldd	r20, Z+10	; 0x0a
    3286:	53 85       	ldd	r21, Z+11	; 0x0b
    3288:	68 81       	ld	r22, Y
    328a:	79 81       	ldd	r23, Y+1	; 0x01
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	9b 81       	ldd	r25, Y+3	; 0x03
    3290:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3294:	9b 01       	movw	r18, r22
    3296:	ac 01       	movw	r20, r24
    3298:	c7 01       	movw	r24, r14
    329a:	b6 01       	movw	r22, r12
    329c:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    32a0:	f5 01       	movw	r30, r10
    32a2:	64 83       	std	Z+4, r22	; 0x04
    32a4:	75 83       	std	Z+5, r23	; 0x05
    32a6:	86 83       	std	Z+6, r24	; 0x06
    32a8:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    32aa:	f8 01       	movw	r30, r16
    32ac:	24 81       	ldd	r18, Z+4	; 0x04
    32ae:	35 81       	ldd	r19, Z+5	; 0x05
    32b0:	46 81       	ldd	r20, Z+6	; 0x06
    32b2:	57 81       	ldd	r21, Z+7	; 0x07
    32b4:	68 81       	ld	r22, Y
    32b6:	79 81       	ldd	r23, Y+1	; 0x01
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	9b 81       	ldd	r25, Y+3	; 0x03
    32bc:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    32c0:	6b 01       	movw	r12, r22
    32c2:	7c 01       	movw	r14, r24
    32c4:	f8 01       	movw	r30, r16
    32c6:	20 81       	ld	r18, Z
    32c8:	31 81       	ldd	r19, Z+1	; 0x01
    32ca:	42 81       	ldd	r20, Z+2	; 0x02
    32cc:	53 81       	ldd	r21, Z+3	; 0x03
    32ce:	6c 81       	ldd	r22, Y+4	; 0x04
    32d0:	7d 81       	ldd	r23, Y+5	; 0x05
    32d2:	8e 81       	ldd	r24, Y+6	; 0x06
    32d4:	9f 81       	ldd	r25, Y+7	; 0x07
    32d6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    32da:	9b 01       	movw	r18, r22
    32dc:	ac 01       	movw	r20, r24
    32de:	c7 01       	movw	r24, r14
    32e0:	b6 01       	movw	r22, r12
    32e2:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    32e6:	f5 01       	movw	r30, r10
    32e8:	60 87       	std	Z+8, r22	; 0x08
    32ea:	71 87       	std	Z+9, r23	; 0x09
    32ec:	82 87       	std	Z+10, r24	; 0x0a
    32ee:	93 87       	std	Z+11, r25	; 0x0b
}
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	ff 90       	pop	r15
    32fa:	ef 90       	pop	r14
    32fc:	df 90       	pop	r13
    32fe:	cf 90       	pop	r12
    3300:	bf 90       	pop	r11
    3302:	af 90       	pop	r10
    3304:	08 95       	ret

00003306 <scalar_into_vector>:

void scalar_into_vector(vector v, float s)
{
    3306:	cf 92       	push	r12
    3308:	df 92       	push	r13
    330a:	ef 92       	push	r14
    330c:	ff 92       	push	r15
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	ec 01       	movw	r28, r24
    3314:	6a 01       	movw	r12, r20
    3316:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    3318:	9a 01       	movw	r18, r20
    331a:	ab 01       	movw	r20, r22
    331c:	68 81       	ld	r22, Y
    331e:	79 81       	ldd	r23, Y+1	; 0x01
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	9b 81       	ldd	r25, Y+3	; 0x03
    3324:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3328:	68 83       	st	Y, r22
    332a:	79 83       	std	Y+1, r23	; 0x01
    332c:	8a 83       	std	Y+2, r24	; 0x02
    332e:	9b 83       	std	Y+3, r25	; 0x03
    3330:	a7 01       	movw	r20, r14
    3332:	96 01       	movw	r18, r12
    3334:	6c 81       	ldd	r22, Y+4	; 0x04
    3336:	7d 81       	ldd	r23, Y+5	; 0x05
    3338:	8e 81       	ldd	r24, Y+6	; 0x06
    333a:	9f 81       	ldd	r25, Y+7	; 0x07
    333c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3340:	6c 83       	std	Y+4, r22	; 0x04
    3342:	7d 83       	std	Y+5, r23	; 0x05
    3344:	8e 83       	std	Y+6, r24	; 0x06
    3346:	9f 83       	std	Y+7, r25	; 0x07
    3348:	a7 01       	movw	r20, r14
    334a:	96 01       	movw	r18, r12
    334c:	68 85       	ldd	r22, Y+8	; 0x08
    334e:	79 85       	ldd	r23, Y+9	; 0x09
    3350:	8a 85       	ldd	r24, Y+10	; 0x0a
    3352:	9b 85       	ldd	r25, Y+11	; 0x0b
    3354:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3358:	68 87       	std	Y+8, r22	; 0x08
    335a:	79 87       	std	Y+9, r23	; 0x09
    335c:	8a 87       	std	Y+10, r24	; 0x0a
    335e:	9b 87       	std	Y+11, r25	; 0x0b
}
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	ff 90       	pop	r15
    3366:	ef 90       	pop	r14
    3368:	df 90       	pop	r13
    336a:	cf 90       	pop	r12
    336c:	08 95       	ret

0000336e <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, float s)
{
    336e:	cf 92       	push	r12
    3370:	df 92       	push	r13
    3372:	ef 92       	push	r14
    3374:	ff 92       	push	r15
    3376:	1f 93       	push	r17
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	6a 01       	movw	r12, r20
    337e:	7b 01       	movw	r14, r22
    3380:	ec 01       	movw	r28, r24
  uint8_t i;
  for(i = 0; i < 4; i++)
    3382:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] * s;
    3384:	a7 01       	movw	r20, r14
    3386:	96 01       	movw	r18, r12
    3388:	68 81       	ld	r22, Y
    338a:	79 81       	ldd	r23, Y+1	; 0x01
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3394:	69 93       	st	Y+, r22
    3396:	79 93       	st	Y+, r23
    3398:	89 93       	st	Y+, r24
    339a:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, float s)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    339c:	1f 5f       	subi	r17, 0xFF	; 255
    339e:	14 30       	cpi	r17, 0x04	; 4
    33a0:	89 f7       	brne	.-30     	; 0x3384 <scalar_into_quaternion+0x16>
    q[i] = q[i] * s;
}
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	ff 90       	pop	r15
    33aa:	ef 90       	pop	r14
    33ac:	df 90       	pop	r13
    33ae:	cf 90       	pop	r12
    33b0:	08 95       	ret

000033b2 <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    33b2:	cf 92       	push	r12
    33b4:	df 92       	push	r13
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	ec 01       	movw	r28, r24
  uint8_t i;
  float norm;
  
  norm = vector_norm(v);
    33c0:	a5 dd       	rcall	.-1206   	; 0x2f0c <vector_norm>
    33c2:	6b 01       	movw	r12, r22
    33c4:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    33c6:	9b 01       	movw	r18, r22
    33c8:	ac 01       	movw	r20, r24
    33ca:	68 81       	ld	r22, Y
    33cc:	79 81       	ldd	r23, Y+1	; 0x01
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	9b 81       	ldd	r25, Y+3	; 0x03
    33d2:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    33d6:	68 83       	st	Y, r22
    33d8:	79 83       	std	Y+1, r23	; 0x01
    33da:	8a 83       	std	Y+2, r24	; 0x02
    33dc:	9b 83       	std	Y+3, r25	; 0x03
    33de:	a7 01       	movw	r20, r14
    33e0:	96 01       	movw	r18, r12
    33e2:	6c 81       	ldd	r22, Y+4	; 0x04
    33e4:	7d 81       	ldd	r23, Y+5	; 0x05
    33e6:	8e 81       	ldd	r24, Y+6	; 0x06
    33e8:	9f 81       	ldd	r25, Y+7	; 0x07
    33ea:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    33ee:	6c 83       	std	Y+4, r22	; 0x04
    33f0:	7d 83       	std	Y+5, r23	; 0x05
    33f2:	8e 83       	std	Y+6, r24	; 0x06
    33f4:	9f 83       	std	Y+7, r25	; 0x07
    33f6:	a7 01       	movw	r20, r14
    33f8:	96 01       	movw	r18, r12
    33fa:	68 85       	ldd	r22, Y+8	; 0x08
    33fc:	79 85       	ldd	r23, Y+9	; 0x09
    33fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3400:	9b 85       	ldd	r25, Y+11	; 0x0b
    3402:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    3406:	68 87       	std	Y+8, r22	; 0x08
    3408:	79 87       	std	Y+9, r23	; 0x09
    340a:	8a 87       	std	Y+10, r24	; 0x0a
    340c:	9b 87       	std	Y+11, r25	; 0x0b
}
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	ff 90       	pop	r15
    3414:	ef 90       	pop	r14
    3416:	df 90       	pop	r13
    3418:	cf 90       	pop	r12
    341a:	08 95       	ret

0000341c <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    341c:	cf 92       	push	r12
    341e:	df 92       	push	r13
    3420:	ef 92       	push	r14
    3422:	ff 92       	push	r15
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	8c 01       	movw	r16, r24
  uint8_t i;
  float norm;
  
  norm = quaternion_norm(q);
    342e:	b5 dd       	rcall	.-1174   	; 0x2f9a <quaternion_norm>
    3430:	6b 01       	movw	r12, r22
    3432:	7c 01       	movw	r14, r24
    3434:	e8 01       	movw	r28, r16
  
  for(i = 0; i < 4; i++)
    3436:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] / norm;
    3438:	a7 01       	movw	r20, r14
    343a:	96 01       	movw	r18, r12
    343c:	68 81       	ld	r22, Y
    343e:	79 81       	ldd	r23, Y+1	; 0x01
    3440:	8a 81       	ldd	r24, Y+2	; 0x02
    3442:	9b 81       	ldd	r25, Y+3	; 0x03
    3444:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    3448:	69 93       	st	Y+, r22
    344a:	79 93       	st	Y+, r23
    344c:	89 93       	st	Y+, r24
    344e:	99 93       	st	Y+, r25
  uint8_t i;
  float norm;
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    3450:	1f 5f       	subi	r17, 0xFF	; 255
    3452:	14 30       	cpi	r17, 0x04	; 4
    3454:	89 f7       	brne	.-30     	; 0x3438 <convert_unit_quaternion+0x1c>
    q[i] = q[i] / norm;
}
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	ef 90       	pop	r14
    3462:	df 90       	pop	r13
    3464:	cf 90       	pop	r12
    3466:	08 95       	ret

00003468 <read_GPS>:
}

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    3468:	57 9a       	sbi	0x0a, 7	; 10
    346a:	08 95       	ret

0000346c <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS();
    346c:	0c 94 40 24 	jmp	0x4880	; 0x4880 <poll_SS>

00003470 <read_MM>:

void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
  poll_MM1();
    3470:	25 cc       	rjmp	.-1974   	; 0x2cbc <poll_MM1>

00003472 <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    347e:	10 92 33 04 	sts	0x0433, r1
    3482:	10 92 32 04 	sts	0x0432, r1
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((float)Current_state.gps.x)/100;//((float)test/100);//
    3486:	60 91 05 04 	lds	r22, 0x0405
    348a:	70 91 06 04 	lds	r23, 0x0406
    348e:	80 91 07 04 	lds	r24, 0x0407
    3492:	90 91 08 04 	lds	r25, 0x0408
    3496:	03 ea       	ldi	r16, 0xA3	; 163
    3498:	13 e0       	ldi	r17, 0x03	; 3
    349a:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	48 ec       	ldi	r20, 0xC8	; 200
    34a4:	52 e4       	ldi	r21, 0x42	; 66
    34a6:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    34aa:	f8 01       	movw	r30, r16
    34ac:	60 83       	st	Z, r22
    34ae:	71 83       	std	Z+1, r23	; 0x01
    34b0:	82 83       	std	Z+2, r24	; 0x02
    34b2:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[1] = ((float)Current_state.gps.y) / 100;//((float)test/100);//
    34b4:	60 91 09 04 	lds	r22, 0x0409
    34b8:	70 91 0a 04 	lds	r23, 0x040A
    34bc:	80 91 0b 04 	lds	r24, 0x040B
    34c0:	90 91 0c 04 	lds	r25, 0x040C
    34c4:	c7 ea       	ldi	r28, 0xA7	; 167
    34c6:	d3 e0       	ldi	r29, 0x03	; 3
    34c8:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	48 ec       	ldi	r20, 0xC8	; 200
    34d2:	52 e4       	ldi	r21, 0x42	; 66
    34d4:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    34d8:	68 83       	st	Y, r22
    34da:	79 83       	std	Y+1, r23	; 0x01
    34dc:	8a 83       	std	Y+2, r24	; 0x02
    34de:	9b 83       	std	Y+3, r25	; 0x03
  v_r_ecef[2] = ((float)Current_state.gps.z) / 100;//((float)test/100);//
    34e0:	60 91 0d 04 	lds	r22, 0x040D
    34e4:	70 91 0e 04 	lds	r23, 0x040E
    34e8:	80 91 0f 04 	lds	r24, 0x040F
    34ec:	90 91 10 04 	lds	r25, 0x0410
    34f0:	2b ea       	ldi	r18, 0xAB	; 171
    34f2:	e2 2e       	mov	r14, r18
    34f4:	23 e0       	ldi	r18, 0x03	; 3
    34f6:	f2 2e       	mov	r15, r18
    34f8:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	48 ec       	ldi	r20, 0xC8	; 200
    3502:	52 e4       	ldi	r21, 0x42	; 66
    3504:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    3508:	f7 01       	movw	r30, r14
    350a:	60 83       	st	Z, r22
    350c:	71 83       	std	Z+1, r23	; 0x01
    350e:	82 83       	std	Z+2, r24	; 0x02
    3510:	93 83       	std	Z+3, r25	; 0x03
  
  v_v_ecef[0] = (float)Current_state.gps.v_x / 1;
    3512:	60 91 11 04 	lds	r22, 0x0411
    3516:	70 91 12 04 	lds	r23, 0x0412
    351a:	80 91 13 04 	lds	r24, 0x0413
    351e:	90 91 14 04 	lds	r25, 0x0414
    3522:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    3526:	60 93 97 03 	sts	0x0397, r22
    352a:	70 93 98 03 	sts	0x0398, r23
    352e:	80 93 99 03 	sts	0x0399, r24
    3532:	90 93 9a 03 	sts	0x039A, r25
  v_v_ecef[1] = (float)Current_state.gps.v_y / 1;
    3536:	60 91 15 04 	lds	r22, 0x0415
    353a:	70 91 16 04 	lds	r23, 0x0416
    353e:	80 91 17 04 	lds	r24, 0x0417
    3542:	90 91 18 04 	lds	r25, 0x0418
    3546:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    354a:	60 93 9b 03 	sts	0x039B, r22
    354e:	70 93 9c 03 	sts	0x039C, r23
    3552:	80 93 9d 03 	sts	0x039D, r24
    3556:	90 93 9e 03 	sts	0x039E, r25
  v_v_ecef[2] = (float)Current_state.gps.v_z / 1;
    355a:	60 91 19 04 	lds	r22, 0x0419
    355e:	70 91 1a 04 	lds	r23, 0x041A
    3562:	80 91 1b 04 	lds	r24, 0x041B
    3566:	90 91 1c 04 	lds	r25, 0x041C
    356a:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    356e:	60 93 9f 03 	sts	0x039F, r22
    3572:	70 93 a0 03 	sts	0x03A0, r23
    3576:	80 93 a1 03 	sts	0x03A1, r24
    357a:	90 93 a2 03 	sts	0x03A2, r25
   
  get_seconds_since_equinox();//check
    357e:	0e 94 17 06 	call	0xc2e	; 0xc2e <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    3582:	f8 01       	movw	r30, r16
    3584:	80 81       	ld	r24, Z
    3586:	91 81       	ldd	r25, Z+1	; 0x01
    3588:	a2 81       	ldd	r26, Z+2	; 0x02
    358a:	b3 81       	ldd	r27, Z+3	; 0x03
    358c:	80 93 bf 03 	sts	0x03BF, r24
    3590:	90 93 c0 03 	sts	0x03C0, r25
    3594:	a0 93 c1 03 	sts	0x03C1, r26
    3598:	b0 93 c2 03 	sts	0x03C2, r27
  r_ecef_ash[1] = v_r_ecef[1];
    359c:	88 81       	ld	r24, Y
    359e:	99 81       	ldd	r25, Y+1	; 0x01
    35a0:	aa 81       	ldd	r26, Y+2	; 0x02
    35a2:	bb 81       	ldd	r27, Y+3	; 0x03
    35a4:	80 93 c3 03 	sts	0x03C3, r24
    35a8:	90 93 c4 03 	sts	0x03C4, r25
    35ac:	a0 93 c5 03 	sts	0x03C5, r26
    35b0:	b0 93 c6 03 	sts	0x03C6, r27
  r_ecef_ash[2] = v_r_ecef[2];
    35b4:	f7 01       	movw	r30, r14
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	a2 81       	ldd	r26, Z+2	; 0x02
    35bc:	b3 81       	ldd	r27, Z+3	; 0x03
    35be:	80 93 c7 03 	sts	0x03C7, r24
    35c2:	90 93 c8 03 	sts	0x03C8, r25
    35c6:	a0 93 c9 03 	sts	0x03C9, r26
    35ca:	b0 93 ca 03 	sts	0x03CA, r27
  ecef2eci(v_r_ecef, v_r);
    35ce:	6b ec       	ldi	r22, 0xCB	; 203
    35d0:	73 e0       	ldi	r23, 0x03	; 3
    35d2:	c8 01       	movw	r24, r16
    35d4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    35d8:	63 eb       	ldi	r22, 0xB3	; 179
    35da:	73 e0       	ldi	r23, 0x03	; 3
    35dc:	87 e9       	ldi	r24, 0x97	; 151
    35de:	93 e0       	ldi	r25, 0x03	; 3
    35e0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    35e4:	60 91 1d 04 	lds	r22, 0x041D
    35e8:	70 91 1e 04 	lds	r23, 0x041E
    35ec:	80 91 1f 04 	lds	r24, 0x041F
    35f0:	90 91 20 04 	lds	r25, 0x0420
    35f4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    35f8:	20 e8       	ldi	r18, 0x80	; 128
    35fa:	36 e9       	ldi	r19, 0x96	; 150
    35fc:	48 e1       	ldi	r20, 0x18	; 24
    35fe:	5b e4       	ldi	r21, 0x4B	; 75
    3600:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    3604:	25 e3       	ldi	r18, 0x35	; 53
    3606:	3a ef       	ldi	r19, 0xFA	; 250
    3608:	4e e8       	ldi	r20, 0x8E	; 142
    360a:	5c e3       	ldi	r21, 0x3C	; 60
    360c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3610:	60 93 7d 04 	sts	0x047D, r22
    3614:	70 93 7e 04 	sts	0x047E, r23
    3618:	80 93 7f 04 	sts	0x047F, r24
    361c:	90 93 80 04 	sts	0x0480, r25
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    3620:	60 91 21 04 	lds	r22, 0x0421
    3624:	70 91 22 04 	lds	r23, 0x0422
    3628:	80 91 23 04 	lds	r24, 0x0423
    362c:	90 91 24 04 	lds	r25, 0x0424
    3630:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__floatsisf>
    3634:	20 e8       	ldi	r18, 0x80	; 128
    3636:	36 e9       	ldi	r19, 0x96	; 150
    3638:	48 e1       	ldi	r20, 0x18	; 24
    363a:	5b e4       	ldi	r21, 0x4B	; 75
    363c:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    3640:	25 e3       	ldi	r18, 0x35	; 53
    3642:	3a ef       	ldi	r19, 0xFA	; 250
    3644:	4e e8       	ldi	r20, 0x8E	; 142
    3646:	5c e3       	ldi	r21, 0x3C	; 60
    3648:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    364c:	60 93 81 04 	sts	0x0481, r22
    3650:	70 93 82 04 	sts	0x0482, r23
    3654:	80 93 83 04 	sts	0x0483, r24
    3658:	90 93 84 04 	sts	0x0484, r25
  
  GPS_done = 0;
    365c:	10 92 06 01 	sts	0x0106, r1
}
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	08 95       	ret

0000366e <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    366e:	4f 92       	push	r4
    3670:	5f 92       	push	r5
    3672:	6f 92       	push	r6
    3674:	7f 92       	push	r7
    3676:	8f 92       	push	r8
    3678:	9f 92       	push	r9
    367a:	af 92       	push	r10
    367c:	bf 92       	push	r11
    367e:	cf 92       	push	r12
    3680:	df 92       	push	r13
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	64 97       	sbiw	r28, 0x14	; 20
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	8c 01       	movw	r16, r24
  vector v_r_ecef, v_g_ecef;
  float R, R2, R3, R4;
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    36a0:	8f eb       	ldi	r24, 0xBF	; 191
    36a2:	93 e0       	ldi	r25, 0x03	; 3
    36a4:	33 dc       	rcall	.-1946   	; 0x2f0c <vector_norm>
    36a6:	2b 01       	movw	r4, r22
    36a8:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    36aa:	9b 01       	movw	r18, r22
    36ac:	ac 01       	movw	r20, r24
    36ae:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    36b2:	9b 01       	movw	r18, r22
    36b4:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    36b6:	61 eb       	ldi	r22, 0xB1	; 177
    36b8:	7a e1       	ldi	r23, 0x1A	; 26
    36ba:	86 e7       	ldi	r24, 0x76	; 118
    36bc:	91 e5       	ldi	r25, 0x51	; 81
    36be:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    36c2:	6d 87       	std	Y+13, r22	; 0x0d
    36c4:	7e 87       	std	Y+14, r23	; 0x0e
    36c6:	8f 87       	std	Y+15, r24	; 0x0f
    36c8:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e4       	ldi	r20, 0x40	; 64
    36d0:	50 e4       	ldi	r21, 0x40	; 64
    36d2:	c3 01       	movw	r24, r6
    36d4:	b2 01       	movw	r22, r4
    36d6:	0e 94 1b 28 	call	0x5036	; 0x5036 <pow>
    36da:	6b 01       	movw	r12, r22
    36dc:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	40 e8       	ldi	r20, 0x80	; 128
    36e4:	50 e4       	ldi	r21, 0x40	; 64
    36e6:	c3 01       	movw	r24, r6
    36e8:	b2 01       	movw	r22, r4
    36ea:	0e 94 1b 28 	call	0x5036	; 0x5036 <pow>
    36ee:	2b 01       	movw	r4, r22
    36f0:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    36f2:	80 90 c7 03 	lds	r8, 0x03C7
    36f6:	90 90 c8 03 	lds	r9, 0x03C8
    36fa:	a0 90 c9 03 	lds	r10, 0x03C9
    36fe:	b0 90 ca 03 	lds	r11, 0x03CA
    3702:	a5 01       	movw	r20, r10
    3704:	94 01       	movw	r18, r8
    3706:	c5 01       	movw	r24, r10
    3708:	b4 01       	movw	r22, r8
    370a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    370e:	28 e9       	ldi	r18, 0x98	; 152
    3710:	38 e0       	ldi	r19, 0x08	; 8
    3712:	45 e0       	ldi	r20, 0x05	; 5
    3714:	5c e3       	ldi	r21, 0x3C	; 60
    3716:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    371a:	2a ec       	ldi	r18, 0xCA	; 202
    371c:	3e ef       	ldi	r19, 0xFE	; 254
    371e:	43 e1       	ldi	r20, 0x13	; 19
    3720:	56 e5       	ldi	r21, 0x56	; 86
    3722:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3726:	a3 01       	movw	r20, r6
    3728:	92 01       	movw	r18, r4
    372a:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    372e:	69 8b       	std	Y+17, r22	; 0x11
    3730:	7a 8b       	std	Y+18, r23	; 0x12
    3732:	8b 8b       	std	Y+19, r24	; 0x13
    3734:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e8       	ldi	r20, 0x80	; 128
    373c:	5f e3       	ldi	r21, 0x3F	; 63
    373e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3740:	7e 85       	ldd	r23, Y+14	; 0x0e
    3742:	8f 85       	ldd	r24, Y+15	; 0x0f
    3744:	98 89       	ldd	r25, Y+16	; 0x10
    3746:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    374a:	29 89       	ldd	r18, Y+17	; 0x11
    374c:	3a 89       	ldd	r19, Y+18	; 0x12
    374e:	4b 89       	ldd	r20, Y+19	; 0x13
    3750:	5c 89       	ldd	r21, Y+20	; 0x14
    3752:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    3756:	2b 01       	movw	r4, r22
    3758:	3c 01       	movw	r6, r24
    375a:	21 ef       	ldi	r18, 0xF1	; 241
    375c:	39 e4       	ldi	r19, 0x49	; 73
    375e:	45 eb       	ldi	r20, 0xB5	; 181
    3760:	57 ed       	ldi	r21, 0xD7	; 215
    3762:	60 91 bf 03 	lds	r22, 0x03BF
    3766:	70 91 c0 03 	lds	r23, 0x03C0
    376a:	80 91 c1 03 	lds	r24, 0x03C1
    376e:	90 91 c2 03 	lds	r25, 0x03C2
    3772:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3776:	a3 01       	movw	r20, r6
    3778:	92 01       	movw	r18, r4
    377a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    377e:	a7 01       	movw	r20, r14
    3780:	96 01       	movw	r18, r12
    3782:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    3786:	69 83       	std	Y+1, r22	; 0x01
    3788:	7a 83       	std	Y+2, r23	; 0x02
    378a:	8b 83       	std	Y+3, r24	; 0x03
    378c:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    378e:	21 ef       	ldi	r18, 0xF1	; 241
    3790:	39 e4       	ldi	r19, 0x49	; 73
    3792:	45 eb       	ldi	r20, 0xB5	; 181
    3794:	57 ed       	ldi	r21, 0xD7	; 215
    3796:	60 91 c3 03 	lds	r22, 0x03C3
    379a:	70 91 c4 03 	lds	r23, 0x03C4
    379e:	80 91 c5 03 	lds	r24, 0x03C5
    37a2:	90 91 c6 03 	lds	r25, 0x03C6
    37a6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    37aa:	9b 01       	movw	r18, r22
    37ac:	ac 01       	movw	r20, r24
    37ae:	c3 01       	movw	r24, r6
    37b0:	b2 01       	movw	r22, r4
    37b2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    37b6:	a7 01       	movw	r20, r14
    37b8:	96 01       	movw	r18, r12
    37ba:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    37be:	6d 83       	std	Y+5, r22	; 0x05
    37c0:	7e 83       	std	Y+6, r23	; 0x06
    37c2:	8f 83       	std	Y+7, r24	; 0x07
    37c4:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    37c6:	21 ef       	ldi	r18, 0xF1	; 241
    37c8:	39 e4       	ldi	r19, 0x49	; 73
    37ca:	45 eb       	ldi	r20, 0xB5	; 181
    37cc:	57 ed       	ldi	r21, 0xD7	; 215
    37ce:	c5 01       	movw	r24, r10
    37d0:	b4 01       	movw	r22, r8
    37d2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    37d6:	2b 01       	movw	r4, r22
    37d8:	3c 01       	movw	r6, r24
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e4       	ldi	r20, 0x40	; 64
    37e0:	50 e4       	ldi	r21, 0x40	; 64
    37e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    37e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    37e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e8:	98 89       	ldd	r25, Y+16	; 0x10
    37ea:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e8       	ldi	r20, 0x80	; 128
    37f4:	5f e3       	ldi	r21, 0x3F	; 63
    37f6:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    37fa:	29 89       	ldd	r18, Y+17	; 0x11
    37fc:	3a 89       	ldd	r19, Y+18	; 0x12
    37fe:	4b 89       	ldd	r20, Y+19	; 0x13
    3800:	5c 89       	ldd	r21, Y+20	; 0x14
    3802:	0e 94 b5 24 	call	0x496a	; 0x496a <__subsf3>
    3806:	9b 01       	movw	r18, r22
    3808:	ac 01       	movw	r20, r24
    380a:	c3 01       	movw	r24, r6
    380c:	b2 01       	movw	r22, r4
    380e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3812:	a7 01       	movw	r20, r14
    3814:	96 01       	movw	r18, r12
    3816:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    381a:	69 87       	std	Y+9, r22	; 0x09
    381c:	7a 87       	std	Y+10, r23	; 0x0a
    381e:	8b 87       	std	Y+11, r24	; 0x0b
    3820:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    3822:	b8 01       	movw	r22, r16
    3824:	ce 01       	movw	r24, r28
    3826:	01 96       	adiw	r24, 0x01	; 1
    3828:	0e 94 bd 07 	call	0xf7a	; 0xf7a <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    382c:	64 96       	adiw	r28, 0x14	; 20
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	df 91       	pop	r29
    383a:	cf 91       	pop	r28
    383c:	1f 91       	pop	r17
    383e:	0f 91       	pop	r16
    3840:	ff 90       	pop	r15
    3842:	ef 90       	pop	r14
    3844:	df 90       	pop	r13
    3846:	cf 90       	pop	r12
    3848:	bf 90       	pop	r11
    384a:	af 90       	pop	r10
    384c:	9f 90       	pop	r9
    384e:	8f 90       	pop	r8
    3850:	7f 90       	pop	r7
    3852:	6f 90       	pop	r6
    3854:	5f 90       	pop	r5
    3856:	4f 90       	pop	r4
    3858:	08 95       	ret

0000385a <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    385a:	9f 92       	push	r9
    385c:	af 92       	push	r10
    385e:	bf 92       	push	r11
    3860:	cf 92       	push	r12
    3862:	df 92       	push	r13
    3864:	ef 92       	push	r14
    3866:	ff 92       	push	r15
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	68 97       	sbiw	r28, 0x18	; 24
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	4a e0       	ldi	r20, 0x0A	; 10
    3882:	94 2e       	mov	r9, r20
    3884:	ce 01       	movw	r24, r28
    3886:	49 96       	adiw	r24, 0x19	; 25
    3888:	5c 01       	movw	r10, r24
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    388a:	ce 01       	movw	r24, r28
    388c:	0d 96       	adiw	r24, 0x0d	; 13
    388e:	ef de       	rcall	.-546    	; 0x366e <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    3890:	be 01       	movw	r22, r28
    3892:	6f 5f       	subi	r22, 0xFF	; 255
    3894:	7f 4f       	sbci	r23, 0xFF	; 255
    3896:	83 eb       	ldi	r24, 0xB3	; 179
    3898:	93 e0       	ldi	r25, 0x03	; 3
    389a:	0b db       	rcall	.-2538   	; 0x2eb2 <copy_vector>
    389c:	fe 01       	movw	r30, r28
    389e:	3d 96       	adiw	r30, 0x0d	; 13
    38a0:	7f 01       	movw	r14, r30
    38a2:	03 eb       	ldi	r16, 0xB3	; 179
    38a4:	13 e0       	ldi	r17, 0x03	; 3
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    38a6:	f7 01       	movw	r30, r14
    38a8:	61 91       	ld	r22, Z+
    38aa:	71 91       	ld	r23, Z+
    38ac:	81 91       	ld	r24, Z+
    38ae:	91 91       	ld	r25, Z+
    38b0:	7f 01       	movw	r14, r30
    38b2:	2d ec       	ldi	r18, 0xCD	; 205
    38b4:	3c ec       	ldi	r19, 0xCC	; 204
    38b6:	4c e4       	ldi	r20, 0x4C	; 76
    38b8:	5e e3       	ldi	r21, 0x3E	; 62
    38ba:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    38be:	9b 01       	movw	r18, r22
    38c0:	ac 01       	movw	r20, r24
    38c2:	f8 01       	movw	r30, r16
    38c4:	60 81       	ld	r22, Z
    38c6:	71 81       	ldd	r23, Z+1	; 0x01
    38c8:	82 81       	ldd	r24, Z+2	; 0x02
    38ca:	93 81       	ldd	r25, Z+3	; 0x03
    38cc:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    38d0:	f8 01       	movw	r30, r16
    38d2:	61 93       	st	Z+, r22
    38d4:	71 93       	st	Z+, r23
    38d6:	81 93       	st	Z+, r24
    38d8:	91 93       	st	Z+, r25
    38da:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    38dc:	ea 14       	cp	r14, r10
    38de:	fb 04       	cpc	r15, r11
    38e0:	11 f7       	brne	.-60     	; 0x38a6 <sgp_orbit_propagator+0x4c>
    38e2:	ce 01       	movw	r24, r28
    38e4:	01 96       	adiw	r24, 0x01	; 1
    38e6:	6c 01       	movw	r12, r24
    38e8:	3b ec       	ldi	r19, 0xCB	; 203
    38ea:	e3 2e       	mov	r14, r19
    38ec:	33 e0       	ldi	r19, 0x03	; 3
    38ee:	f3 2e       	mov	r15, r19
    38f0:	03 eb       	ldi	r16, 0xB3	; 179
    38f2:	13 e0       	ldi	r17, 0x03	; 3
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    38f4:	f8 01       	movw	r30, r16
    38f6:	61 91       	ld	r22, Z+
    38f8:	71 91       	ld	r23, Z+
    38fa:	81 91       	ld	r24, Z+
    38fc:	91 91       	ld	r25, Z+
    38fe:	8f 01       	movw	r16, r30
    3900:	f6 01       	movw	r30, r12
    3902:	21 91       	ld	r18, Z+
    3904:	31 91       	ld	r19, Z+
    3906:	41 91       	ld	r20, Z+
    3908:	51 91       	ld	r21, Z+
    390a:	6f 01       	movw	r12, r30
    390c:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	5f e3       	ldi	r21, 0x3F	; 63
    3918:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    391c:	2d ec       	ldi	r18, 0xCD	; 205
    391e:	3c ec       	ldi	r19, 0xCC	; 204
    3920:	4c e4       	ldi	r20, 0x4C	; 76
    3922:	5e e3       	ldi	r21, 0x3E	; 62
    3924:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3928:	9b 01       	movw	r18, r22
    392a:	ac 01       	movw	r20, r24
    392c:	f7 01       	movw	r30, r14
    392e:	60 81       	ld	r22, Z
    3930:	71 81       	ldd	r23, Z+1	; 0x01
    3932:	82 81       	ldd	r24, Z+2	; 0x02
    3934:	93 81       	ldd	r25, Z+3	; 0x03
    3936:	0e 94 b6 24 	call	0x496c	; 0x496c <__addsf3>
    393a:	f7 01       	movw	r30, r14
    393c:	61 93       	st	Z+, r22
    393e:	71 93       	st	Z+, r23
    3940:	81 93       	st	Z+, r24
    3942:	91 93       	st	Z+, r25
    3944:	7f 01       	movw	r14, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    3946:	f3 e0       	ldi	r31, 0x03	; 3
    3948:	0f 3b       	cpi	r16, 0xBF	; 191
    394a:	1f 07       	cpc	r17, r31
    394c:	99 f6       	brne	.-90     	; 0x38f4 <sgp_orbit_propagator+0x9a>
    394e:	9a 94       	dec	r9
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    3950:	09 f0       	breq	.+2      	; 0x3954 <sgp_orbit_propagator+0xfa>
    3952:	9b cf       	rjmp	.-202    	; 0x388a <sgp_orbit_propagator+0x30>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    3954:	68 96       	adiw	r28, 0x18	; 24
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	df 91       	pop	r29
    3962:	cf 91       	pop	r28
    3964:	1f 91       	pop	r17
    3966:	0f 91       	pop	r16
    3968:	ff 90       	pop	r15
    396a:	ef 90       	pop	r14
    396c:	df 90       	pop	r13
    396e:	cf 90       	pop	r12
    3970:	bf 90       	pop	r11
    3972:	af 90       	pop	r10
    3974:	9f 90       	pop	r9
    3976:	08 95       	ret

00003978 <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    3978:	4f 92       	push	r4
    397a:	5f 92       	push	r5
    397c:	6f 92       	push	r6
    397e:	7f 92       	push	r7
    3980:	8f 92       	push	r8
    3982:	9f 92       	push	r9
    3984:	af 92       	push	r10
    3986:	bf 92       	push	r11
    3988:	cf 92       	push	r12
    398a:	df 92       	push	r13
    398c:	ef 92       	push	r14
    398e:	ff 92       	push	r15
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	2c 97       	sbiw	r28, 0x0c	; 12
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	f8 94       	cli
    39a2:	de bf       	out	0x3e, r29	; 62
    39a4:	0f be       	out	0x3f, r0	; 63
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	8c 01       	movw	r16, r24
  float time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega
    39aa:	20 91 fd 03 	lds	r18, 0x03FD
    39ae:	30 91 fe 03 	lds	r19, 0x03FE
    39b2:	40 91 ff 03 	lds	r20, 0x03FF
    39b6:	50 91 00 04 	lds	r21, 0x0400
    39ba:	60 91 01 04 	lds	r22, 0x0401
    39be:	70 91 02 04 	lds	r23, 0x0402
    39c2:	80 91 03 04 	lds	r24, 0x0403
    39c6:	90 91 04 04 	lds	r25, 0x0404
    39ca:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <__floatundisf>
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 ec       	ldi	r19, 0xC0	; 192
    39d2:	48 ea       	ldi	r20, 0xA8	; 168
    39d4:	57 e4       	ldi	r21, 0x47	; 71
    39d6:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
  float lambda = (2 * M_PI * time_in_days) / 365.256363;
    39da:	2b ed       	ldi	r18, 0xDB	; 219
    39dc:	3f e0       	ldi	r19, 0x0F	; 15
    39de:	49 ec       	ldi	r20, 0xC9	; 201
    39e0:	50 e4       	ldi	r21, 0x40	; 64
    39e2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    39e6:	21 ed       	ldi	r18, 0xD1	; 209
    39e8:	30 ea       	ldi	r19, 0xA0	; 160
    39ea:	46 eb       	ldi	r20, 0xB6	; 182
    39ec:	53 e4       	ldi	r21, 0x43	; 67
    39ee:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    39f2:	4b 01       	movw	r8, r22
    39f4:	5c 01       	movw	r10, r24
  float delta, alpha;
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    39f6:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    39fa:	20 e9       	ldi	r18, 0x90	; 144
    39fc:	3e e2       	ldi	r19, 0x2E	; 46
    39fe:	4c ec       	ldi	r20, 0xCC	; 204
    3a00:	5e e3       	ldi	r21, 0x3E	; 62
    3a02:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3a06:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <asin>
    3a0a:	6b 01       	movw	r12, r22
    3a0c:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    3a0e:	c5 01       	movw	r24, r10
    3a10:	b4 01       	movw	r22, r8
    3a12:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    3a16:	2b 01       	movw	r4, r22
    3a18:	3c 01       	movw	r6, r24
    3a1a:	c7 01       	movw	r24, r14
    3a1c:	b6 01       	movw	r22, r12
    3a1e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    3a22:	4b 01       	movw	r8, r22
    3a24:	5c 01       	movw	r10, r24
    3a26:	9b 01       	movw	r18, r22
    3a28:	ac 01       	movw	r20, r24
    3a2a:	c3 01       	movw	r24, r6
    3a2c:	b2 01       	movw	r22, r4
    3a2e:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__divsf3>
    3a32:	8d d7       	rcall	.+3866   	; 0x494e <acos>
    3a34:	2b 01       	movw	r4, r22
    3a36:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	a9 01       	movw	r20, r18
    3a3e:	c7 01       	movw	r24, r14
    3a40:	b6 01       	movw	r22, r12
    3a42:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
    3a46:	87 ff       	sbrs	r24, 7
    3a48:	09 c0       	rjmp	.+18     	; 0x3a5c <sun_vector_estimator+0xe4>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    3a4a:	a3 01       	movw	r20, r6
    3a4c:	92 01       	movw	r18, r4
    3a4e:	6b ed       	ldi	r22, 0xDB	; 219
    3a50:	7f e0       	ldi	r23, 0x0F	; 15
    3a52:	89 ec       	ldi	r24, 0xC9	; 201
    3a54:	90 e4       	ldi	r25, 0x40	; 64
    3a56:	89 d7       	rcall	.+3858   	; 0x496a <__subsf3>
    3a58:	2b 01       	movw	r4, r22
    3a5a:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    3a5c:	c3 01       	movw	r24, r6
    3a5e:	b2 01       	movw	r22, r4
    3a60:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <cos>
    3a64:	9b 01       	movw	r18, r22
    3a66:	ac 01       	movw	r20, r24
    3a68:	c5 01       	movw	r24, r10
    3a6a:	b4 01       	movw	r22, r8
    3a6c:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3a70:	69 83       	std	Y+1, r22	; 0x01
    3a72:	7a 83       	std	Y+2, r23	; 0x02
    3a74:	8b 83       	std	Y+3, r24	; 0x03
    3a76:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    3a78:	c3 01       	movw	r24, r6
    3a7a:	b2 01       	movw	r22, r4
    3a7c:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    3a80:	9b 01       	movw	r18, r22
    3a82:	ac 01       	movw	r20, r24
    3a84:	c5 01       	movw	r24, r10
    3a86:	b4 01       	movw	r22, r8
    3a88:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3a8c:	6d 83       	std	Y+5, r22	; 0x05
    3a8e:	7e 83       	std	Y+6, r23	; 0x06
    3a90:	8f 83       	std	Y+7, r24	; 0x07
    3a92:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    3a94:	c7 01       	movw	r24, r14
    3a96:	b6 01       	movw	r22, r12
    3a98:	0e 94 67 28 	call	0x50ce	; 0x50ce <sin>
    3a9c:	69 87       	std	Y+9, r22	; 0x09
    3a9e:	7a 87       	std	Y+10, r23	; 0x0a
    3aa0:	8b 87       	std	Y+11, r24	; 0x0b
    3aa2:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    3aa4:	2d ec       	ldi	r18, 0xCD	; 205
    3aa6:	3c ec       	ldi	r19, 0xCC	; 204
    3aa8:	4c ec       	ldi	r20, 0xCC	; 204
    3aaa:	5d e3       	ldi	r21, 0x3D	; 61
    3aac:	60 91 af 03 	lds	r22, 0x03AF
    3ab0:	70 91 b0 03 	lds	r23, 0x03B0
    3ab4:	80 91 b1 03 	lds	r24, 0x03B1
    3ab8:	90 91 b2 03 	lds	r25, 0x03B2
    3abc:	57 d7       	rcall	.+3758   	; 0x496c <__addsf3>
    3abe:	60 93 af 03 	sts	0x03AF, r22
    3ac2:	70 93 b0 03 	sts	0x03B0, r23
    3ac6:	80 93 b1 03 	sts	0x03B1, r24
    3aca:	90 93 b2 03 	sts	0x03B2, r25
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    3ace:	98 01       	movw	r18, r16
    3ad0:	ae 01       	movw	r20, r28
    3ad2:	4f 5f       	subi	r20, 0xFF	; 255
    3ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad6:	63 eb       	ldi	r22, 0xB3	; 179
    3ad8:	73 e0       	ldi	r23, 0x03	; 3
    3ada:	8b ec       	ldi	r24, 0xCB	; 203
    3adc:	93 e0       	ldi	r25, 0x03	; 3
    3ade:	0e 94 ce 08 	call	0x119c	; 0x119c <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }*/
 
}
    3ae2:	2c 96       	adiw	r28, 0x0c	; 12
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	ff 90       	pop	r15
    3af8:	ef 90       	pop	r14
    3afa:	df 90       	pop	r13
    3afc:	cf 90       	pop	r12
    3afe:	bf 90       	pop	r11
    3b00:	af 90       	pop	r10
    3b02:	9f 90       	pop	r9
    3b04:	8f 90       	pop	r8
    3b06:	7f 90       	pop	r7
    3b08:	6f 90       	pop	r6
    3b0a:	5f 90       	pop	r5
    3b0c:	4f 90       	pop	r4
    3b0e:	08 95       	ret

00003b10 <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    3b10:	af 92       	push	r10
    3b12:	bf 92       	push	r11
    3b14:	cf 92       	push	r12
    3b16:	df 92       	push	r13
    3b18:	ef 92       	push	r14
    3b1a:	ff 92       	push	r15
    3b1c:	0f 93       	push	r16
    3b1e:	1f 93       	push	r17
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    3b28:	e0 97       	sbiw	r28, 0x30	; 48
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	5c 01       	movw	r10, r24
  float time_in_years = 2015 + (float)seconds_since_pivot / SECONDS_IN_YEAR;
    3b36:	20 91 f5 03 	lds	r18, 0x03F5
    3b3a:	30 91 f6 03 	lds	r19, 0x03F6
    3b3e:	40 91 f7 03 	lds	r20, 0x03F7
    3b42:	50 91 f8 03 	lds	r21, 0x03F8
    3b46:	60 91 f9 03 	lds	r22, 0x03F9
    3b4a:	70 91 fa 03 	lds	r23, 0x03FA
    3b4e:	80 91 fb 03 	lds	r24, 0x03FB
    3b52:	90 91 fc 03 	lds	r25, 0x03FC
    3b56:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <__floatundisf>
    3b5a:	20 ec       	ldi	r18, 0xC0	; 192
    3b5c:	39 e9       	ldi	r19, 0x99	; 153
    3b5e:	40 ef       	ldi	r20, 0xF0	; 240
    3b60:	5b e4       	ldi	r21, 0x4B	; 75
    3b62:	e8 d7       	rcall	.+4048   	; 0x4b34 <__divsf3>
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 ee       	ldi	r19, 0xE0	; 224
    3b68:	4b ef       	ldi	r20, 0xFB	; 251
    3b6a:	54 e4       	ldi	r21, 0x44	; 68
    3b6c:	ff d6       	rcall	.+3582   	; 0x496c <__addsf3>
    3b6e:	6b 01       	movw	r12, r22
    3b70:	7c 01       	movw	r14, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    3b72:	be 01       	movw	r22, r28
    3b74:	6b 5d       	subi	r22, 0xDB	; 219
    3b76:	7f 4f       	sbci	r23, 0xFF	; 255
    3b78:	8b ec       	ldi	r24, 0xCB	; 203
    3b7a:	93 e0       	ldi	r25, 0x03	; 3
    3b7c:	0e 94 44 08 	call	0x1088	; 0x1088 <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    3b80:	be 01       	movw	r22, r28
    3b82:	67 5e       	subi	r22, 0xE7	; 231
    3b84:	7f 4f       	sbci	r23, 0xFF	; 255
    3b86:	ce 01       	movw	r24, r28
    3b88:	85 96       	adiw	r24, 0x25	; 37
    3b8a:	0e 94 80 09 	call	0x1300	; 0x1300 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    3b8e:	6d e7       	ldi	r22, 0x7D	; 125
    3b90:	74 e0       	ldi	r23, 0x04	; 4
    3b92:	ce 01       	movw	r24, r28
    3b94:	49 96       	adiw	r24, 0x19	; 25
    3b96:	8d d9       	rcall	.-3302   	; 0x2eb2 <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    3b98:	8e 01       	movw	r16, r28
    3b9a:	03 5f       	subi	r16, 0xF3	; 243
    3b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9e:	28 e0       	ldi	r18, 0x08	; 8
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	a6 01       	movw	r20, r12
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	49 96       	adiw	r24, 0x19	; 25
    3ba8:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    3bac:	ae 01       	movw	r20, r28
    3bae:	4b 5d       	subi	r20, 0xDB	; 219
    3bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bb2:	be 01       	movw	r22, r28
    3bb4:	67 5e       	subi	r22, 0xE7	; 231
    3bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb8:	c8 01       	movw	r24, r16
    3bba:	0e 94 b8 0a 	call	0x1570	; 0x1570 <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    3bbe:	be 01       	movw	r22, r28
    3bc0:	6f 5f       	subi	r22, 0xFF	; 255
    3bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	85 96       	adiw	r24, 0x25	; 37
    3bc8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    3bcc:	95 01       	movw	r18, r10
    3bce:	ae 01       	movw	r20, r28
    3bd0:	4f 5f       	subi	r20, 0xFF	; 255
    3bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd4:	63 eb       	ldi	r22, 0xB3	; 179
    3bd6:	73 e0       	ldi	r23, 0x03	; 3
    3bd8:	8b ec       	ldi	r24, 0xCB	; 203
    3bda:	93 e0       	ldi	r25, 0x03	; 3
    3bdc:	0e 94 ce 08 	call	0x119c	; 0x119c <eci2orbit>
  scalar_into_vector(v_B_o, 1e-9);     // igrf gives in nT
    3be0:	4f e5       	ldi	r20, 0x5F	; 95
    3be2:	50 e7       	ldi	r21, 0x70	; 112
    3be4:	69 e8       	ldi	r22, 0x89	; 137
    3be6:	70 e3       	ldi	r23, 0x30	; 48
    3be8:	c5 01       	movw	r24, r10
    3bea:	8d db       	rcall	.-2278   	; 0x3306 <scalar_into_vector>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    3bec:	e0 96       	adiw	r28, 0x30	; 48
    3bee:	0f b6       	in	r0, 0x3f	; 63
    3bf0:	f8 94       	cli
    3bf2:	de bf       	out	0x3e, r29	; 62
    3bf4:	0f be       	out	0x3f, r0	; 63
    3bf6:	cd bf       	out	0x3d, r28	; 61
    3bf8:	df 91       	pop	r29
    3bfa:	cf 91       	pop	r28
    3bfc:	1f 91       	pop	r17
    3bfe:	0f 91       	pop	r16
    3c00:	ff 90       	pop	r15
    3c02:	ef 90       	pop	r14
    3c04:	df 90       	pop	r13
    3c06:	cf 90       	pop	r12
    3c08:	bf 90       	pop	r11
    3c0a:	af 90       	pop	r10
    3c0c:	08 95       	ret

00003c0e <quest>:
#include "quest.h"



uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    3c0e:	2f 92       	push	r2
    3c10:	3f 92       	push	r3
    3c12:	4f 92       	push	r4
    3c14:	5f 92       	push	r5
    3c16:	6f 92       	push	r6
    3c18:	7f 92       	push	r7
    3c1a:	8f 92       	push	r8
    3c1c:	9f 92       	push	r9
    3c1e:	af 92       	push	r10
    3c20:	bf 92       	push	r11
    3c22:	cf 92       	push	r12
    3c24:	df 92       	push	r13
    3c26:	ef 92       	push	r14
    3c28:	ff 92       	push	r15
    3c2a:	0f 93       	push	r16
    3c2c:	1f 93       	push	r17
    3c2e:	cf 93       	push	r28
    3c30:	df 93       	push	r29
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	cc 57       	subi	r28, 0x7C	; 124
    3c38:	d1 09       	sbc	r29, r1
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	3c 01       	movw	r6, r24
    3c46:	8b 01       	movw	r16, r22
    3c48:	e1 96       	adiw	r28, 0x31	; 49
    3c4a:	5f af       	std	Y+63, r21	; 0x3f
    3c4c:	4e af       	std	Y+62, r20	; 0x3e
    3c4e:	e1 97       	sbiw	r28, 0x31	; 49
  uint8_t w_ctrl = *p_w_ctrl;
    3c50:	f9 01       	movw	r30, r18
    3c52:	c0 80       	ld	r12, Z
    3c54:	80 e4       	ldi	r24, 0x40	; 64
    3c56:	e8 2e       	mov	r14, r24
    3c58:	84 e0       	ldi	r24, 0x04	; 4
    3c5a:	f8 2e       	mov	r15, r24
  static uint16_t time_since_light;
  static uint8_t light_prev = 1;
  float * sun_adc = (float *)Current_state.ss.read;
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    3c5c:	d1 2c       	mov	r13, r1
  float mu, nu, rho, k, triad;
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.087 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    3c5e:	f7 01       	movw	r30, r14
    3c60:	61 91       	ld	r22, Z+
    3c62:	71 91       	ld	r23, Z+
    3c64:	81 91       	ld	r24, Z+
    3c66:	91 91       	ld	r25, Z+
    3c68:	7f 01       	movw	r14, r30
    3c6a:	25 ec       	ldi	r18, 0xC5	; 197
    3c6c:	3e ef       	ldi	r19, 0xFE	; 254
    3c6e:	42 e9       	ldi	r20, 0x92	; 146
    3c70:	5e e3       	ldi	r21, 0x3E	; 62
    3c72:	59 d7       	rcall	.+3762   	; 0x4b26 <__cmpsf2>
    3c74:	87 fd       	sbrc	r24, 7
      num_dark_sensors++;
    3c76:	d3 94       	inc	r13
  vector v_sun_m, v_B_m, v_cross_m, v_cross_c, v_mc_cross, v_mc_add;
  vector v_temp1, v_temp2;
  vector v_triad;
  float mu, nu, rho, k, triad;
  
  for(i = 0; i < N_SS; i++)
    3c78:	f8 e5       	ldi	r31, 0x58	; 88
    3c7a:	ef 16       	cp	r14, r31
    3c7c:	f4 e0       	ldi	r31, 0x04	; 4
    3c7e:	ff 06       	cpc	r15, r31
    3c80:	71 f7       	brne	.-36     	; 0x3c5e <quest+0x50>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.087 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    3c82:	86 e0       	ldi	r24, 0x06	; 6
    3c84:	d8 16       	cp	r13, r24
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <quest+0x7c>
    3c88:	57 c2       	rjmp	.+1198   	; 0x4138 <quest+0x52a>
    light = 0;
  
  if(light)
  {
    if(!w_ctrl)
    3c8a:	c1 10       	cpse	r12, r1
    3c8c:	09 c0       	rjmp	.+18     	; 0x3ca0 <quest+0x92>
    {
      time_since_light += FRAME_TIME;
    3c8e:	80 91 f3 03 	lds	r24, 0x03F3
    3c92:	90 91 f4 03 	lds	r25, 0x03F4
    3c96:	02 96       	adiw	r24, 0x02	; 2
    3c98:	90 93 f4 03 	sts	0x03F4, r25
    3c9c:	80 93 f3 03 	sts	0x03F3, r24
      if(time_since_light == 300)
        w_ctrl = 1;
    }
    
    if(light_prev == 0)
    3ca0:	80 91 07 01 	lds	r24, 0x0107
    3ca4:	81 11       	cpse	r24, r1
    3ca6:	04 c0       	rjmp	.+8      	; 0x3cb0 <quest+0xa2>
    {
      w_ctrl = 0;
      time_since_light = 0;
    3ca8:	10 92 f4 03 	sts	0x03F4, r1
    3cac:	10 92 f3 03 	sts	0x03F3, r1
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    3cb0:	c0 90 40 04 	lds	r12, 0x0440
    3cb4:	d0 90 41 04 	lds	r13, 0x0441
    3cb8:	e0 90 42 04 	lds	r14, 0x0442
    3cbc:	f0 90 43 04 	lds	r15, 0x0443
    3cc0:	80 90 44 04 	lds	r8, 0x0444
    3cc4:	90 90 45 04 	lds	r9, 0x0445
    3cc8:	a0 90 46 04 	lds	r10, 0x0446
    3ccc:	b0 90 47 04 	lds	r11, 0x0447
    3cd0:	a5 01       	movw	r20, r10
    3cd2:	94 01       	movw	r18, r8
    3cd4:	c7 01       	movw	r24, r14
    3cd6:	b6 01       	movw	r22, r12
    3cd8:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
        v_sun_m[i] = (float)sun_adc[j];
    3cdc:	1e 01       	movw	r2, r28
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    3cde:	18 16       	cp	r1, r24
    3ce0:	0c f4       	brge	.+2      	; 0x3ce4 <quest+0xd6>
    3ce2:	21 c2       	rjmp	.+1090   	; 0x4126 <quest+0x518>
        v_sun_m[i] = (float)sun_adc[j];
      else
        v_sun_m[i] = -1 * (float)sun_adc[j + 1];
    3ce4:	91 e6       	ldi	r25, 0x61	; 97
    3ce6:	29 0e       	add	r2, r25
    3ce8:	31 1c       	adc	r3, r1
    3cea:	b7 fa       	bst	r11, 7
    3cec:	b0 94       	com	r11
    3cee:	b7 f8       	bld	r11, 7
    3cf0:	b0 94       	com	r11
    3cf2:	f1 01       	movw	r30, r2
    3cf4:	80 82       	st	Z, r8
    3cf6:	91 82       	std	Z+1, r9	; 0x01
    3cf8:	a2 82       	std	Z+2, r10	; 0x02
    3cfa:	b3 82       	std	Z+3, r11	; 0x03
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    3cfc:	c0 90 48 04 	lds	r12, 0x0448
    3d00:	d0 90 49 04 	lds	r13, 0x0449
    3d04:	e0 90 4a 04 	lds	r14, 0x044A
    3d08:	f0 90 4b 04 	lds	r15, 0x044B
    3d0c:	80 90 4c 04 	lds	r8, 0x044C
    3d10:	90 90 4d 04 	lds	r9, 0x044D
    3d14:	a0 90 4e 04 	lds	r10, 0x044E
    3d18:	b0 90 4f 04 	lds	r11, 0x044F
    3d1c:	a5 01       	movw	r20, r10
    3d1e:	94 01       	movw	r18, r8
    3d20:	c7 01       	movw	r24, r14
    3d22:	b6 01       	movw	r22, r12
    3d24:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
    3d28:	18 16       	cp	r1, r24
    3d2a:	0c f4       	brge	.+2      	; 0x3d2e <quest+0x120>
    3d2c:	25 c2       	rjmp	.+1098   	; 0x4178 <quest+0x56a>
        v_sun_m[i] = (float)sun_adc[j];
      else
        v_sun_m[i] = -1 * (float)sun_adc[j + 1];
    3d2e:	b7 fa       	bst	r11, 7
    3d30:	b0 94       	com	r11
    3d32:	b7 f8       	bld	r11, 7
    3d34:	b0 94       	com	r11
    3d36:	f1 01       	movw	r30, r2
    3d38:	84 82       	std	Z+4, r8	; 0x04
    3d3a:	95 82       	std	Z+5, r9	; 0x05
    3d3c:	a6 82       	std	Z+6, r10	; 0x06
    3d3e:	b7 82       	std	Z+7, r11	; 0x07
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    3d40:	c0 90 50 04 	lds	r12, 0x0450
    3d44:	d0 90 51 04 	lds	r13, 0x0451
    3d48:	e0 90 52 04 	lds	r14, 0x0452
    3d4c:	f0 90 53 04 	lds	r15, 0x0453
    3d50:	80 90 54 04 	lds	r8, 0x0454
    3d54:	90 90 55 04 	lds	r9, 0x0455
    3d58:	a0 90 56 04 	lds	r10, 0x0456
    3d5c:	b0 90 57 04 	lds	r11, 0x0457
    3d60:	a5 01       	movw	r20, r10
    3d62:	94 01       	movw	r18, r8
    3d64:	c7 01       	movw	r24, r14
    3d66:	b6 01       	movw	r22, r12
    3d68:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__gesf2>
    3d6c:	18 16       	cp	r1, r24
    3d6e:	0c f4       	brge	.+2      	; 0x3d72 <quest+0x164>
    3d70:	fd c1       	rjmp	.+1018   	; 0x416c <quest+0x55e>
        v_sun_m[i] = (float)sun_adc[j];
      else
        v_sun_m[i] = -1 * (float)sun_adc[j + 1];
    3d72:	b7 fa       	bst	r11, 7
    3d74:	b0 94       	com	r11
    3d76:	b7 f8       	bld	r11, 7
    3d78:	b0 94       	com	r11
    3d7a:	f1 01       	movw	r30, r2
    3d7c:	80 86       	std	Z+8, r8	; 0x08
    3d7e:	91 86       	std	Z+9, r9	; 0x09
    3d80:	a2 86       	std	Z+10, r10	; 0x0a
    3d82:	b3 86       	std	Z+11, r11	; 0x0b
    }
    convert_unit_vector(v_sun_m);
    3d84:	c1 01       	movw	r24, r2
    3d86:	15 db       	rcall	.-2518   	; 0x33b2 <convert_unit_vector>
    {
	    sent[i] = (uint8_t)(abs(v_sun_m[i]*100));
	    transmit_UART0(sent[i]);
    }
	*/
    v_B_m[0] = Current_state.mm.B_x;
    3d88:	80 91 58 04 	lds	r24, 0x0458
    3d8c:	90 91 59 04 	lds	r25, 0x0459
    3d90:	a0 91 5a 04 	lds	r26, 0x045A
    3d94:	b0 91 5b 04 	lds	r27, 0x045B
    3d98:	69 96       	adiw	r28, 0x19	; 25
    3d9a:	8c af       	std	Y+60, r24	; 0x3c
    3d9c:	9d af       	std	Y+61, r25	; 0x3d
    3d9e:	ae af       	std	Y+62, r26	; 0x3e
    3da0:	bf af       	std	Y+63, r27	; 0x3f
    3da2:	69 97       	sbiw	r28, 0x19	; 25
    v_B_m[1] = Current_state.mm.B_y;
    3da4:	80 91 5c 04 	lds	r24, 0x045C
    3da8:	90 91 5d 04 	lds	r25, 0x045D
    3dac:	a0 91 5e 04 	lds	r26, 0x045E
    3db0:	b0 91 5f 04 	lds	r27, 0x045F
    3db4:	6d 96       	adiw	r28, 0x1d	; 29
    3db6:	8c af       	std	Y+60, r24	; 0x3c
    3db8:	9d af       	std	Y+61, r25	; 0x3d
    3dba:	ae af       	std	Y+62, r26	; 0x3e
    3dbc:	bf af       	std	Y+63, r27	; 0x3f
    3dbe:	6d 97       	sbiw	r28, 0x1d	; 29
    v_B_m[2] = Current_state.mm.B_z;
    3dc0:	80 91 60 04 	lds	r24, 0x0460
    3dc4:	90 91 61 04 	lds	r25, 0x0461
    3dc8:	a0 91 62 04 	lds	r26, 0x0462
    3dcc:	b0 91 63 04 	lds	r27, 0x0463
    3dd0:	a1 96       	adiw	r28, 0x21	; 33
    3dd2:	8c af       	std	Y+60, r24	; 0x3c
    3dd4:	9d af       	std	Y+61, r25	; 0x3d
    3dd6:	ae af       	std	Y+62, r26	; 0x3e
    3dd8:	bf af       	std	Y+63, r27	; 0x3f
    3dda:	a1 97       	sbiw	r28, 0x21	; 33
    
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    3ddc:	ae 01       	movw	r20, r28
    3dde:	47 5b       	subi	r20, 0xB7	; 183
    3de0:	5f 4f       	sbci	r21, 0xFF	; 255
    3de2:	b1 01       	movw	r22, r2
    3de4:	ce 01       	movw	r24, r28
    3de6:	8b 5a       	subi	r24, 0xAB	; 171
    3de8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dea:	0c da       	rcall	.-3048   	; 0x3204 <vector_cross_product>
    convert_unit_vector(v_cross_m);
    3dec:	ce 01       	movw	r24, r28
    3dee:	87 5b       	subi	r24, 0xB7	; 183
    3df0:	9f 4f       	sbci	r25, 0xFF	; 255
    3df2:	df da       	rcall	.-2626   	; 0x33b2 <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    3df4:	ce 01       	movw	r24, r28
    3df6:	cd 96       	adiw	r24, 0x3d	; 61
    3df8:	af 96       	adiw	r28, 0x2f	; 47
    3dfa:	9f af       	std	Y+63, r25	; 0x3f
    3dfc:	8e af       	std	Y+62, r24	; 0x3e
    3dfe:	af 97       	sbiw	r28, 0x2f	; 47
    3e00:	ac 01       	movw	r20, r24
    3e02:	b8 01       	movw	r22, r16
    3e04:	c3 01       	movw	r24, r6
    3e06:	fe d9       	rcall	.-3076   	; 0x3204 <vector_cross_product>
    convert_unit_vector(v_cross_c);
    3e08:	ce 01       	movw	r24, r28
    3e0a:	cd 96       	adiw	r24, 0x3d	; 61
    3e0c:	d2 da       	rcall	.-2652   	; 0x33b2 <convert_unit_vector>
    
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    3e0e:	be 01       	movw	r22, r28
    3e10:	63 5c       	subi	r22, 0xC3	; 195
    3e12:	7f 4f       	sbci	r23, 0xFF	; 255
    3e14:	ce 01       	movw	r24, r28
    3e16:	87 5b       	subi	r24, 0xB7	; 183
    3e18:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1a:	28 d9       	rcall	.-3504   	; 0x306c <vector_dot_product>
    3e1c:	6b 01       	movw	r12, r22
    3e1e:	7c 01       	movw	r14, r24
    3e20:	b3 01       	movw	r22, r6
    3e22:	ce 01       	movw	r24, r28
    3e24:	8b 5a       	subi	r24, 0xAB	; 171
    3e26:	9f 4f       	sbci	r25, 0xFF	; 255
    3e28:	21 d9       	rcall	.-3518   	; 0x306c <vector_dot_product>
    3e2a:	4b 01       	movw	r8, r22
    3e2c:	5c 01       	movw	r10, r24
    3e2e:	b8 01       	movw	r22, r16
    3e30:	c1 01       	movw	r24, r2
    3e32:	1c d9       	rcall	.-3528   	; 0x306c <vector_dot_product>
    3e34:	e5 96       	adiw	r28, 0x35	; 53
    3e36:	6c af       	std	Y+60, r22	; 0x3c
    3e38:	7d af       	std	Y+61, r23	; 0x3d
    3e3a:	8e af       	std	Y+62, r24	; 0x3e
    3e3c:	9f af       	std	Y+63, r25	; 0x3f
    3e3e:	e5 97       	sbiw	r28, 0x35	; 53
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e8       	ldi	r20, 0x80	; 128
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	c7 01       	movw	r24, r14
    3e4a:	b6 01       	movw	r22, r12
    3e4c:	8f d5       	rcall	.+2846   	; 0x496c <__addsf3>
    3e4e:	6b 01       	movw	r12, r22
    3e50:	7c 01       	movw	r14, r24
    3e52:	26 e6       	ldi	r18, 0x66	; 102
    3e54:	36 e6       	ldi	r19, 0x66	; 102
    3e56:	46 e6       	ldi	r20, 0x66	; 102
    3e58:	5f e3       	ldi	r21, 0x3F	; 63
    3e5a:	c5 01       	movw	r24, r10
    3e5c:	b4 01       	movw	r22, r8
    3e5e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3e62:	4b 01       	movw	r8, r22
    3e64:	5c 01       	movw	r10, r24
    3e66:	20 ed       	ldi	r18, 0xD0	; 208
    3e68:	3c ec       	ldi	r19, 0xCC	; 204
    3e6a:	4c ec       	ldi	r20, 0xCC	; 204
    3e6c:	5d e3       	ldi	r21, 0x3D	; 61
    3e6e:	e5 96       	adiw	r28, 0x35	; 53
    3e70:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e72:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e74:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e76:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e78:	e5 97       	sbiw	r28, 0x35	; 53
    3e7a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3e7e:	9b 01       	movw	r18, r22
    3e80:	ac 01       	movw	r20, r24
    3e82:	c5 01       	movw	r24, r10
    3e84:	b4 01       	movw	r22, r8
    3e86:	72 d5       	rcall	.+2788   	; 0x496c <__addsf3>
    3e88:	9b 01       	movw	r18, r22
    3e8a:	ac 01       	movw	r20, r24
    3e8c:	c7 01       	movw	r24, r14
    3e8e:	b6 01       	movw	r22, r12
    3e90:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3e94:	6b 01       	movw	r12, r22
    3e96:	7c 01       	movw	r14, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    3e98:	ae 01       	movw	r20, r28
    3e9a:	47 5e       	subi	r20, 0xE7	; 231
    3e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e9e:	b3 01       	movw	r22, r6
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	8b 5a       	subi	r24, 0xAB	; 171
    3ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea6:	ae d9       	rcall	.-3236   	; 0x3204 <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    3ea8:	ae 01       	movw	r20, r28
    3eaa:	43 5f       	subi	r20, 0xF3	; 243
    3eac:	5f 4f       	sbci	r21, 0xFF	; 255
    3eae:	b8 01       	movw	r22, r16
    3eb0:	c1 01       	movw	r24, r2
    3eb2:	a8 d9       	rcall	.-3248   	; 0x3204 <vector_cross_product>
    3eb4:	8e 01       	movw	r16, r28
    3eb6:	07 5e       	subi	r16, 0xE7	; 231
    3eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eba:	fe 01       	movw	r30, r28
    3ebc:	3d 96       	adiw	r30, 0x0d	; 13
    3ebe:	5f 01       	movw	r10, r30
    3ec0:	4e 01       	movw	r8, r28
    3ec2:	f5 e2       	ldi	r31, 0x25	; 37
    3ec4:	8f 0e       	add	r8, r31
    3ec6:	91 1c       	adc	r9, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    3ec8:	f8 01       	movw	r30, r16
    3eca:	61 91       	ld	r22, Z+
    3ecc:	71 91       	ld	r23, Z+
    3ece:	81 91       	ld	r24, Z+
    3ed0:	91 91       	ld	r25, Z+
    3ed2:	8f 01       	movw	r16, r30
    3ed4:	26 e6       	ldi	r18, 0x66	; 102
    3ed6:	36 e6       	ldi	r19, 0x66	; 102
    3ed8:	46 e6       	ldi	r20, 0x66	; 102
    3eda:	5f e3       	ldi	r21, 0x3F	; 63
    3edc:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3ee0:	2b 01       	movw	r4, r22
    3ee2:	3c 01       	movw	r6, r24
    3ee4:	20 ed       	ldi	r18, 0xD0	; 208
    3ee6:	3c ec       	ldi	r19, 0xCC	; 204
    3ee8:	4c ec       	ldi	r20, 0xCC	; 204
    3eea:	5d e3       	ldi	r21, 0x3D	; 61
    3eec:	f5 01       	movw	r30, r10
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3efa:	9b 01       	movw	r18, r22
    3efc:	ac 01       	movw	r20, r24
    3efe:	c3 01       	movw	r24, r6
    3f00:	b2 01       	movw	r22, r4
    3f02:	34 d5       	rcall	.+2664   	; 0x496c <__addsf3>
    3f04:	f5 01       	movw	r30, r10
    3f06:	61 93       	st	Z+, r22
    3f08:	71 93       	st	Z+, r23
    3f0a:	81 93       	st	Z+, r24
    3f0c:	91 93       	st	Z+, r25
    3f0e:	5f 01       	movw	r10, r30
    
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    3f10:	08 15       	cp	r16, r8
    3f12:	19 05       	cpc	r17, r9
    3f14:	c9 f6       	brne	.-78     	; 0x3ec8 <quest+0x2ba>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    3f16:	ae 01       	movw	r20, r28
    3f18:	4f 5c       	subi	r20, 0xCF	; 207
    3f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1c:	be 01       	movw	r22, r28
    3f1e:	63 5c       	subi	r22, 0xC3	; 195
    3f20:	7f 4f       	sbci	r23, 0xFF	; 255
    3f22:	ce 01       	movw	r24, r28
    3f24:	87 5b       	subi	r24, 0xB7	; 183
    3f26:	9f 4f       	sbci	r25, 0xFF	; 255
    3f28:	6d d9       	rcall	.-3366   	; 0x3204 <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    3f2a:	be 01       	movw	r22, r28
    3f2c:	63 5f       	subi	r22, 0xF3	; 243
    3f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f30:	ce 01       	movw	r24, r28
    3f32:	c1 96       	adiw	r24, 0x31	; 49
    3f34:	9b d8       	rcall	.-3786   	; 0x306c <vector_dot_product>
    3f36:	a7 01       	movw	r20, r14
    3f38:	96 01       	movw	r18, r12
    3f3a:	18 d5       	rcall	.+2608   	; 0x496c <__addsf3>
    3f3c:	6b 01       	movw	r12, r22
    3f3e:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    3f40:	a8 01       	movw	r20, r16
    3f42:	be 01       	movw	r22, r28
    3f44:	63 5c       	subi	r22, 0xC3	; 195
    3f46:	7f 4f       	sbci	r23, 0xFF	; 255
    3f48:	ce 01       	movw	r24, r28
    3f4a:	87 5b       	subi	r24, 0xB7	; 183
    3f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f4e:	d2 d8       	rcall	.-3676   	; 0x30f4 <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    3f50:	be 01       	movw	r22, r28
    3f52:	63 5f       	subi	r22, 0xF3	; 243
    3f54:	7f 4f       	sbci	r23, 0xFF	; 255
    3f56:	c8 01       	movw	r24, r16
    3f58:	89 d8       	rcall	.-3822   	; 0x306c <vector_dot_product>
    3f5a:	2b 01       	movw	r4, r22
    3f5c:	3c 01       	movw	r6, r24
    
    rho = sqrt(mu * mu + nu * nu);
    3f5e:	a7 01       	movw	r20, r14
    3f60:	96 01       	movw	r18, r12
    3f62:	c7 01       	movw	r24, r14
    3f64:	b6 01       	movw	r22, r12
    3f66:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__mulsf3>
    3f6a:	4b 01       	movw	r8, r22
    3f6c:	5c 01       	movw	r10, r24
    3f6e:	a3 01       	movw	r20, r6
    3f70:	92 01       	movw	r18, r4
    3f72:	c3 01       	movw	r24, r6
    3f74:	b2 01       	movw	r22, r4
    3f76:	fc d7       	rcall	.+4088   	; 0x4f70 <__mulsf3>
    3f78:	9b 01       	movw	r18, r22
    3f7a:	ac 01       	movw	r20, r24
    3f7c:	c5 01       	movw	r24, r10
    3f7e:	b4 01       	movw	r22, r8
    3f80:	f5 d4       	rcall	.+2538   	; 0x496c <__addsf3>
    3f82:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    3f86:	4b 01       	movw	r8, r22
    3f88:	5c 01       	movw	r10, r24
    
    if(mu > 0)
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	a9 01       	movw	r20, r18
    3f90:	c7 01       	movw	r24, r14
    3f92:	b6 01       	movw	r22, r12
    3f94:	e2 d7       	rcall	.+4036   	; 0x4f5a <__gesf2>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    3f96:	a7 01       	movw	r20, r14
    3f98:	96 01       	movw	r18, r12
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    
    rho = sqrt(mu * mu + nu * nu);
    
    if(mu > 0)
    3f9a:	18 16       	cp	r1, r24
    3f9c:	0c f0       	brlt	.+2      	; 0x3fa0 <quest+0x392>
    3f9e:	f2 c0       	rjmp	.+484    	; 0x4184 <quest+0x576>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    3fa0:	c5 01       	movw	r24, r10
    3fa2:	b4 01       	movw	r22, r8
    3fa4:	e3 d4       	rcall	.+2502   	; 0x496c <__addsf3>
    3fa6:	6b 01       	movw	r12, r22
    3fa8:	7c 01       	movw	r14, r24
    3faa:	a5 01       	movw	r20, r10
    3fac:	94 01       	movw	r18, r8
    3fae:	e0 d7       	rcall	.+4032   	; 0x4f70 <__mulsf3>
    3fb0:	4b 01       	movw	r8, r22
    3fb2:	5c 01       	movw	r10, r24
    3fb4:	be 01       	movw	r22, r28
    3fb6:	63 5c       	subi	r22, 0xC3	; 195
    3fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fba:	ce 01       	movw	r24, r28
    3fbc:	87 5b       	subi	r24, 0xB7	; 183
    3fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc0:	55 d8       	rcall	.-3926   	; 0x306c <vector_dot_product>
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e8       	ldi	r20, 0x80	; 128
    3fc8:	5f e3       	ldi	r21, 0x3F	; 63
    3fca:	d0 d4       	rcall	.+2464   	; 0x496c <__addsf3>
    3fcc:	9b 01       	movw	r18, r22
    3fce:	ac 01       	movw	r20, r24
    3fd0:	c5 01       	movw	r24, r10
    3fd2:	b4 01       	movw	r22, r8
    3fd4:	cd d7       	rcall	.+3994   	; 0x4f70 <__mulsf3>
    3fd6:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sqrt>
    3fda:	9b 01       	movw	r18, r22
    3fdc:	ac 01       	movw	r20, r24
    3fde:	c6 d4       	rcall	.+2444   	; 0x496c <__addsf3>
    3fe0:	9b 01       	movw	r18, r22
    3fe2:	ac 01       	movw	r20, r24
    3fe4:	60 e0       	ldi	r22, 0x00	; 0
    3fe6:	70 e0       	ldi	r23, 0x00	; 0
    3fe8:	80 e8       	ldi	r24, 0x80	; 128
    3fea:	9f e3       	ldi	r25, 0x3F	; 63
    3fec:	a3 d5       	rcall	.+2886   	; 0x4b34 <__divsf3>
    3fee:	ed 96       	adiw	r28, 0x3d	; 61
    3ff0:	6c af       	std	Y+60, r22	; 0x3c
    3ff2:	7d af       	std	Y+61, r23	; 0x3d
    3ff4:	8e af       	std	Y+62, r24	; 0x3e
    3ff6:	9f af       	std	Y+63, r25	; 0x3f
    3ff8:	ed 97       	sbiw	r28, 0x3d	; 61
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	c1 96       	adiw	r24, 0x31	; 49
    3ffe:	1c 01       	movw	r2, r24
    4000:	fe 01       	movw	r30, r28
    4002:	31 96       	adiw	r30, 0x01	; 1
    4004:	e3 96       	adiw	r28, 0x33	; 51
    4006:	ff af       	std	Y+63, r31	; 0x3f
    4008:	ee af       	std	Y+62, r30	; 0x3e
    400a:	e3 97       	sbiw	r28, 0x33	; 51
    400c:	e9 96       	adiw	r28, 0x39	; 57
    400e:	4c ae       	std	Y+60, r4	; 0x3c
    4010:	5d ae       	std	Y+61, r5	; 0x3d
    4012:	6e ae       	std	Y+62, r6	; 0x3e
    4014:	7f ae       	std	Y+63, r7	; 0x3f
    4016:	e9 97       	sbiw	r28, 0x39	; 57
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4018:	f1 01       	movw	r30, r2
    401a:	21 91       	ld	r18, Z+
    401c:	31 91       	ld	r19, Z+
    401e:	41 91       	ld	r20, Z+
    4020:	51 91       	ld	r21, Z+
    4022:	1f 01       	movw	r2, r30
    4024:	f8 01       	movw	r30, r16
    4026:	41 90       	ld	r4, Z+
    4028:	51 90       	ld	r5, Z+
    402a:	61 90       	ld	r6, Z+
    402c:	71 90       	ld	r7, Z+
    402e:	8f 01       	movw	r16, r30
    4030:	c7 01       	movw	r24, r14
    4032:	b6 01       	movw	r22, r12
    4034:	9d d7       	rcall	.+3898   	; 0x4f70 <__mulsf3>
    4036:	4b 01       	movw	r8, r22
    4038:	5c 01       	movw	r10, r24
    403a:	e9 96       	adiw	r28, 0x39	; 57
    403c:	2c ad       	ldd	r18, Y+60	; 0x3c
    403e:	3d ad       	ldd	r19, Y+61	; 0x3d
    4040:	4e ad       	ldd	r20, Y+62	; 0x3e
    4042:	5f ad       	ldd	r21, Y+63	; 0x3f
    4044:	e9 97       	sbiw	r28, 0x39	; 57
    4046:	c3 01       	movw	r24, r6
    4048:	b2 01       	movw	r22, r4
    404a:	92 d7       	rcall	.+3876   	; 0x4f70 <__mulsf3>
    404c:	9b 01       	movw	r18, r22
    404e:	ac 01       	movw	r20, r24
    4050:	c5 01       	movw	r24, r10
    4052:	b4 01       	movw	r22, r8
    4054:	8b d4       	rcall	.+2326   	; 0x496c <__addsf3>
    4056:	e3 96       	adiw	r28, 0x33	; 51
    4058:	ee ad       	ldd	r30, Y+62	; 0x3e
    405a:	ff ad       	ldd	r31, Y+63	; 0x3f
    405c:	e3 97       	sbiw	r28, 0x33	; 51
    405e:	61 93       	st	Z+, r22
    4060:	71 93       	st	Z+, r23
    4062:	81 93       	st	Z+, r24
    4064:	91 93       	st	Z+, r25
    4066:	e3 96       	adiw	r28, 0x33	; 51
    4068:	ff af       	std	Y+63, r31	; 0x3f
    406a:	ee af       	std	Y+62, r30	; 0x3e
    406c:	e3 97       	sbiw	r28, 0x33	; 51
    
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    406e:	af 96       	adiw	r28, 0x2f	; 47
    4070:	8e ad       	ldd	r24, Y+62	; 0x3e
    4072:	9f ad       	ldd	r25, Y+63	; 0x3f
    4074:	af 97       	sbiw	r28, 0x2f	; 47
    4076:	28 16       	cp	r2, r24
    4078:	39 06       	cpc	r3, r25
    407a:	71 f6       	brne	.-100    	; 0x4018 <quest+0x40a>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    407c:	b1 01       	movw	r22, r2
    407e:	ce 01       	movw	r24, r28
    4080:	87 5b       	subi	r24, 0xB7	; 183
    4082:	9f 4f       	sbci	r25, 0xFF	; 255
    4084:	0e 94 36 18 	call	0x306c	; 0x306c <vector_dot_product>
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	40 e8       	ldi	r20, 0x80	; 128
    408e:	5f e3       	ldi	r21, 0x3F	; 63
    4090:	6d d4       	rcall	.+2266   	; 0x496c <__addsf3>
    4092:	9b 01       	movw	r18, r22
    4094:	ac 01       	movw	r20, r24
    4096:	c7 01       	movw	r24, r14
    4098:	b6 01       	movw	r22, r12
    409a:	6a d7       	rcall	.+3796   	; 0x4f70 <__mulsf3>
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    409c:	09 81       	ldd	r16, Y+1	; 0x01
    409e:	1a 81       	ldd	r17, Y+2	; 0x02
    40a0:	2b 81       	ldd	r18, Y+3	; 0x03
    40a2:	3c 81       	ldd	r19, Y+4	; 0x04
    40a4:	e1 96       	adiw	r28, 0x31	; 49
    40a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    40a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    40aa:	e1 97       	sbiw	r28, 0x31	; 49
    40ac:	00 83       	st	Z, r16
    40ae:	11 83       	std	Z+1, r17	; 0x01
    40b0:	22 83       	std	Z+2, r18	; 0x02
    40b2:	33 83       	std	Z+3, r19	; 0x03
    40b4:	0d 81       	ldd	r16, Y+5	; 0x05
    40b6:	1e 81       	ldd	r17, Y+6	; 0x06
    40b8:	2f 81       	ldd	r18, Y+7	; 0x07
    40ba:	38 85       	ldd	r19, Y+8	; 0x08
    40bc:	04 83       	std	Z+4, r16	; 0x04
    40be:	15 83       	std	Z+5, r17	; 0x05
    40c0:	26 83       	std	Z+6, r18	; 0x06
    40c2:	37 83       	std	Z+7, r19	; 0x07
    40c4:	09 85       	ldd	r16, Y+9	; 0x09
    40c6:	1a 85       	ldd	r17, Y+10	; 0x0a
    40c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    40ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    40cc:	00 87       	std	Z+8, r16	; 0x08
    40ce:	11 87       	std	Z+9, r17	; 0x09
    40d0:	22 87       	std	Z+10, r18	; 0x0a
    40d2:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    40d4:	64 87       	std	Z+12, r22	; 0x0c
    40d6:	75 87       	std	Z+13, r23	; 0x0d
    40d8:	86 87       	std	Z+14, r24	; 0x0e
    40da:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    40dc:	ed 96       	adiw	r28, 0x3d	; 61
    40de:	4c ad       	ldd	r20, Y+60	; 0x3c
    40e0:	5d ad       	ldd	r21, Y+61	; 0x3d
    40e2:	6e ad       	ldd	r22, Y+62	; 0x3e
    40e4:	7f ad       	ldd	r23, Y+63	; 0x3f
    40e6:	ed 97       	sbiw	r28, 0x3d	; 61
    40e8:	cf 01       	movw	r24, r30
    40ea:	41 d9       	rcall	.-3454   	; 0x336e <scalar_into_quaternion>
{
  uint8_t w_ctrl = *p_w_ctrl;
  static uint16_t time_since_light;
  static uint8_t light_prev = 1;
  float * sun_adc = (float *)Current_state.ss.read;
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    40ec:	81 e0       	ldi	r24, 0x01	; 1
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    40ee:	80 93 07 01 	sts	0x0107, r24
 
  return light;
   
}
    40f2:	c4 58       	subi	r28, 0x84	; 132
    40f4:	df 4f       	sbci	r29, 0xFF	; 255
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	f8 94       	cli
    40fa:	de bf       	out	0x3e, r29	; 62
    40fc:	0f be       	out	0x3f, r0	; 63
    40fe:	cd bf       	out	0x3d, r28	; 61
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	0f 91       	pop	r16
    4108:	ff 90       	pop	r15
    410a:	ef 90       	pop	r14
    410c:	df 90       	pop	r13
    410e:	cf 90       	pop	r12
    4110:	bf 90       	pop	r11
    4112:	af 90       	pop	r10
    4114:	9f 90       	pop	r9
    4116:	8f 90       	pop	r8
    4118:	7f 90       	pop	r7
    411a:	6f 90       	pop	r6
    411c:	5f 90       	pop	r5
    411e:	4f 90       	pop	r4
    4120:	3f 90       	pop	r3
    4122:	2f 90       	pop	r2
    4124:	08 95       	ret
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        v_sun_m[i] = (float)sun_adc[j];
    4126:	f1 e6       	ldi	r31, 0x61	; 97
    4128:	2f 0e       	add	r2, r31
    412a:	31 1c       	adc	r3, r1
    412c:	f1 01       	movw	r30, r2
    412e:	c0 82       	st	Z, r12
    4130:	d1 82       	std	Z+1, r13	; 0x01
    4132:	e2 82       	std	Z+2, r14	; 0x02
    4134:	f3 82       	std	Z+3, r15	; 0x03
    4136:	e2 cd       	rjmp	.-1084   	; 0x3cfc <quest+0xee>
    scalar_into_quaternion(q_triad, k);
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    4138:	e1 96       	adiw	r28, 0x31	; 49
    413a:	ee ad       	ldd	r30, Y+62	; 0x3e
    413c:	ff ad       	ldd	r31, Y+63	; 0x3f
    413e:	e1 97       	sbiw	r28, 0x31	; 49
    4140:	10 82       	st	Z, r1
    4142:	11 82       	std	Z+1, r1	; 0x01
    4144:	12 82       	std	Z+2, r1	; 0x02
    4146:	13 82       	std	Z+3, r1	; 0x03
    4148:	14 82       	std	Z+4, r1	; 0x04
    414a:	15 82       	std	Z+5, r1	; 0x05
    414c:	16 82       	std	Z+6, r1	; 0x06
    414e:	17 82       	std	Z+7, r1	; 0x07
    4150:	10 86       	std	Z+8, r1	; 0x08
    4152:	11 86       	std	Z+9, r1	; 0x09
    4154:	12 86       	std	Z+10, r1	; 0x0a
    4156:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	a0 e8       	ldi	r26, 0x80	; 128
    415e:	bf e3       	ldi	r27, 0x3F	; 63
    4160:	84 87       	std	Z+12, r24	; 0x0c
    4162:	95 87       	std	Z+13, r25	; 0x0d
    4164:	a6 87       	std	Z+14, r26	; 0x0e
    4166:	b7 87       	std	Z+15, r27	; 0x0f
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.087 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    light = 0;
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	c1 cf       	rjmp	.-126    	; 0x40ee <quest+0x4e0>
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        v_sun_m[i] = (float)sun_adc[j];
    416c:	f1 01       	movw	r30, r2
    416e:	c0 86       	std	Z+8, r12	; 0x08
    4170:	d1 86       	std	Z+9, r13	; 0x09
    4172:	e2 86       	std	Z+10, r14	; 0x0a
    4174:	f3 86       	std	Z+11, r15	; 0x0b
    4176:	06 ce       	rjmp	.-1012   	; 0x3d84 <quest+0x176>
    4178:	f1 01       	movw	r30, r2
    417a:	c4 82       	std	Z+4, r12	; 0x04
    417c:	d5 82       	std	Z+5, r13	; 0x05
    417e:	e6 82       	std	Z+6, r14	; 0x06
    4180:	f7 82       	std	Z+7, r15	; 0x07
    4182:	de cd       	rjmp	.-1092   	; 0x3d40 <quest+0x132>
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4184:	c5 01       	movw	r24, r10
    4186:	b4 01       	movw	r22, r8
    4188:	f0 d3       	rcall	.+2016   	; 0x496a <__subsf3>
    418a:	e9 96       	adiw	r28, 0x39	; 57
    418c:	6c af       	std	Y+60, r22	; 0x3c
    418e:	7d af       	std	Y+61, r23	; 0x3d
    4190:	8e af       	std	Y+62, r24	; 0x3e
    4192:	9f af       	std	Y+63, r25	; 0x3f
    4194:	e9 97       	sbiw	r28, 0x39	; 57
    4196:	a5 01       	movw	r20, r10
    4198:	94 01       	movw	r18, r8
    419a:	ea d6       	rcall	.+3540   	; 0x4f70 <__mulsf3>
    419c:	6b 01       	movw	r12, r22
    419e:	7c 01       	movw	r14, r24
    41a0:	be 01       	movw	r22, r28
    41a2:	63 5c       	subi	r22, 0xC3	; 195
    41a4:	7f 4f       	sbci	r23, 0xFF	; 255
    41a6:	ce 01       	movw	r24, r28
    41a8:	87 5b       	subi	r24, 0xB7	; 183
    41aa:	9f 4f       	sbci	r25, 0xFF	; 255
    41ac:	0e 94 36 18 	call	0x306c	; 0x306c <vector_dot_product>
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	40 e8       	ldi	r20, 0x80	; 128
    41b6:	5f e3       	ldi	r21, 0x3F	; 63
    41b8:	d9 d3       	rcall	.+1970   	; 0x496c <__addsf3>
    41ba:	9b 01       	movw	r18, r22
    41bc:	ac 01       	movw	r20, r24
    41be:	c7 01       	movw	r24, r14
    41c0:	b6 01       	movw	r22, r12
    41c2:	d6 d6       	rcall	.+3500   	; 0x4f70 <__mulsf3>
    41c4:	8e d7       	rcall	.+3868   	; 0x50e2 <sqrt>
    41c6:	9b 01       	movw	r18, r22
    41c8:	ac 01       	movw	r20, r24
    41ca:	d0 d3       	rcall	.+1952   	; 0x496c <__addsf3>
    41cc:	9b 01       	movw	r18, r22
    41ce:	ac 01       	movw	r20, r24
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	80 e8       	ldi	r24, 0x80	; 128
    41d6:	9f e3       	ldi	r25, 0x3F	; 63
    41d8:	ad d4       	rcall	.+2394   	; 0x4b34 <__divsf3>
    41da:	ed 96       	adiw	r28, 0x3d	; 61
    41dc:	6c af       	std	Y+60, r22	; 0x3c
    41de:	7d af       	std	Y+61, r23	; 0x3d
    41e0:	8e af       	std	Y+62, r24	; 0x3e
    41e2:	9f af       	std	Y+63, r25	; 0x3f
    41e4:	ed 97       	sbiw	r28, 0x3d	; 61
    41e6:	fe 01       	movw	r30, r28
    41e8:	f1 96       	adiw	r30, 0x31	; 49
    41ea:	1f 01       	movw	r2, r30
    41ec:	ce 01       	movw	r24, r28
    41ee:	01 96       	adiw	r24, 0x01	; 1
    41f0:	e3 96       	adiw	r28, 0x33	; 51
    41f2:	9f af       	std	Y+63, r25	; 0x3f
    41f4:	8e af       	std	Y+62, r24	; 0x3e
    41f6:	e3 97       	sbiw	r28, 0x33	; 51
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    41f8:	f1 01       	movw	r30, r2
    41fa:	61 91       	ld	r22, Z+
    41fc:	71 91       	ld	r23, Z+
    41fe:	81 91       	ld	r24, Z+
    4200:	91 91       	ld	r25, Z+
    4202:	1f 01       	movw	r2, r30
    4204:	f8 01       	movw	r30, r16
    4206:	81 90       	ld	r8, Z+
    4208:	91 90       	ld	r9, Z+
    420a:	a1 90       	ld	r10, Z+
    420c:	b1 90       	ld	r11, Z+
    420e:	8f 01       	movw	r16, r30
    4210:	a3 01       	movw	r20, r6
    4212:	92 01       	movw	r18, r4
    4214:	ad d6       	rcall	.+3418   	; 0x4f70 <__mulsf3>
    4216:	6b 01       	movw	r12, r22
    4218:	7c 01       	movw	r14, r24
    421a:	a5 01       	movw	r20, r10
    421c:	94 01       	movw	r18, r8
    421e:	e9 96       	adiw	r28, 0x39	; 57
    4220:	6c ad       	ldd	r22, Y+60	; 0x3c
    4222:	7d ad       	ldd	r23, Y+61	; 0x3d
    4224:	8e ad       	ldd	r24, Y+62	; 0x3e
    4226:	9f ad       	ldd	r25, Y+63	; 0x3f
    4228:	e9 97       	sbiw	r28, 0x39	; 57
    422a:	a2 d6       	rcall	.+3396   	; 0x4f70 <__mulsf3>
    422c:	9b 01       	movw	r18, r22
    422e:	ac 01       	movw	r20, r24
    4230:	c7 01       	movw	r24, r14
    4232:	b6 01       	movw	r22, r12
    4234:	9b d3       	rcall	.+1846   	; 0x496c <__addsf3>
    4236:	e3 96       	adiw	r28, 0x33	; 51
    4238:	ee ad       	ldd	r30, Y+62	; 0x3e
    423a:	ff ad       	ldd	r31, Y+63	; 0x3f
    423c:	e3 97       	sbiw	r28, 0x33	; 51
    423e:	61 93       	st	Z+, r22
    4240:	71 93       	st	Z+, r23
    4242:	81 93       	st	Z+, r24
    4244:	91 93       	st	Z+, r25
    4246:	e3 96       	adiw	r28, 0x33	; 51
    4248:	ff af       	std	Y+63, r31	; 0x3f
    424a:	ee af       	std	Y+62, r30	; 0x3e
    424c:	e3 97       	sbiw	r28, 0x33	; 51
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    424e:	af 96       	adiw	r28, 0x2f	; 47
    4250:	8e ad       	ldd	r24, Y+62	; 0x3e
    4252:	9f ad       	ldd	r25, Y+63	; 0x3f
    4254:	af 97       	sbiw	r28, 0x2f	; 47
    4256:	28 16       	cp	r2, r24
    4258:	39 06       	cpc	r3, r25
    425a:	71 f6       	brne	.-100    	; 0x41f8 <quest+0x5ea>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    425c:	b1 01       	movw	r22, r2
    425e:	ce 01       	movw	r24, r28
    4260:	87 5b       	subi	r24, 0xB7	; 183
    4262:	9f 4f       	sbci	r25, 0xFF	; 255
    4264:	0e 94 36 18 	call	0x306c	; 0x306c <vector_dot_product>
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	40 e8       	ldi	r20, 0x80	; 128
    426e:	5f e3       	ldi	r21, 0x3F	; 63
    4270:	7d d3       	rcall	.+1786   	; 0x496c <__addsf3>
    4272:	a3 01       	movw	r20, r6
    4274:	92 01       	movw	r18, r4
    4276:	7c d6       	rcall	.+3320   	; 0x4f70 <__mulsf3>
    4278:	11 cf       	rjmp	.-478    	; 0x409c <quest+0x48e>

0000427a <omega_estimation>:
  return light;
   
}

void omega_estimation(quaternion q_B, vector v_w)
{
    427a:	2f 92       	push	r2
    427c:	3f 92       	push	r3
    427e:	4f 92       	push	r4
    4280:	5f 92       	push	r5
    4282:	6f 92       	push	r6
    4284:	7f 92       	push	r7
    4286:	8f 92       	push	r8
    4288:	9f 92       	push	r9
    428a:	af 92       	push	r10
    428c:	bf 92       	push	r11
    428e:	cf 92       	push	r12
    4290:	df 92       	push	r13
    4292:	ef 92       	push	r14
    4294:	ff 92       	push	r15
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	cf 93       	push	r28
    429c:	df 93       	push	r29
    429e:	cd b7       	in	r28, 0x3d	; 61
    42a0:	de b7       	in	r29, 0x3e	; 62
    42a2:	c0 5d       	subi	r28, 0xD0	; 208
    42a4:	d1 09       	sbc	r29, r1
    42a6:	0f b6       	in	r0, 0x3f	; 63
    42a8:	f8 94       	cli
    42aa:	de bf       	out	0x3e, r29	; 62
    42ac:	0f be       	out	0x3f, r0	; 63
    42ae:	cd bf       	out	0x3d, r28	; 61
    42b0:	c3 53       	subi	r28, 0x33	; 51
    42b2:	df 4f       	sbci	r29, 0xFF	; 255
    42b4:	88 83       	st	Y, r24
    42b6:	cd 5c       	subi	r28, 0xCD	; 205
    42b8:	d0 40       	sbci	r29, 0x00	; 0
    42ba:	c2 53       	subi	r28, 0x32	; 50
    42bc:	df 4f       	sbci	r29, 0xFF	; 255
    42be:	98 83       	st	Y, r25
    42c0:	ce 5c       	subi	r28, 0xCE	; 206
    42c2:	d0 40       	sbci	r29, 0x00	; 0
    42c4:	c1 53       	subi	r28, 0x31	; 49
    42c6:	df 4f       	sbci	r29, 0xFF	; 255
    42c8:	68 83       	st	Y, r22
    42ca:	cf 5c       	subi	r28, 0xCF	; 207
    42cc:	d0 40       	sbci	r29, 0x00	; 0
    42ce:	c0 53       	subi	r28, 0x30	; 48
    42d0:	df 4f       	sbci	r29, 0xFF	; 255
    42d2:	78 83       	st	Y, r23
    42d4:	c0 5d       	subi	r28, 0xD0	; 208
    42d6:	d0 40       	sbci	r29, 0x00	; 0
    42d8:	7c 01       	movw	r14, r24
    42da:	03 ee       	ldi	r16, 0xE3	; 227
    42dc:	13 e0       	ldi	r17, 0x03	; 3
    42de:	9e 01       	movw	r18, r28
    42e0:	23 59       	subi	r18, 0x93	; 147
    42e2:	3f 4f       	sbci	r19, 0xFF	; 255
    42e4:	69 01       	movw	r12, r18
    42e6:	ae 01       	movw	r20, r28
    42e8:	43 58       	subi	r20, 0x83	; 131
    42ea:	5f 4f       	sbci	r21, 0xFF	; 255
    42ec:	1a 01       	movw	r2, r20
  float n;
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    42ee:	d7 01       	movw	r26, r14
    42f0:	8d 90       	ld	r8, X+
    42f2:	9d 90       	ld	r9, X+
    42f4:	ad 90       	ld	r10, X+
    42f6:	bd 90       	ld	r11, X+
    42f8:	7d 01       	movw	r14, r26
    42fa:	f8 01       	movw	r30, r16
    42fc:	41 90       	ld	r4, Z+
    42fe:	51 90       	ld	r5, Z+
    4300:	61 90       	ld	r6, Z+
    4302:	71 90       	ld	r7, Z+
    4304:	8f 01       	movw	r16, r30
    4306:	a3 01       	movw	r20, r6
    4308:	92 01       	movw	r18, r4
    430a:	c5 01       	movw	r24, r10
    430c:	b4 01       	movw	r22, r8
    430e:	2d d3       	rcall	.+1626   	; 0x496a <__subsf3>
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	40 e0       	ldi	r20, 0x00	; 0
    4316:	5f e3       	ldi	r21, 0x3F	; 63
    4318:	2b d6       	rcall	.+3158   	; 0x4f70 <__mulsf3>
    431a:	d1 01       	movw	r26, r2
    431c:	6d 93       	st	X+, r22
    431e:	7d 93       	st	X+, r23
    4320:	8d 93       	st	X+, r24
    4322:	9d 93       	st	X+, r25
    4324:	1d 01       	movw	r2, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    4326:	a3 01       	movw	r20, r6
    4328:	92 01       	movw	r18, r4
    432a:	c5 01       	movw	r24, r10
    432c:	b4 01       	movw	r22, r8
    432e:	1e d3       	rcall	.+1596   	; 0x496c <__addsf3>
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	5f e3       	ldi	r21, 0x3F	; 63
    4338:	1b d6       	rcall	.+3126   	; 0x4f70 <__mulsf3>
    433a:	f6 01       	movw	r30, r12
    433c:	61 93       	st	Z+, r22
    433e:	71 93       	st	Z+, r23
    4340:	81 93       	st	Z+, r24
    4342:	91 93       	st	Z+, r25
    4344:	6f 01       	movw	r12, r30
  static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  float n;
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    4346:	f3 e0       	ldi	r31, 0x03	; 3
    4348:	03 3f       	cpi	r16, 0xF3	; 243
    434a:	1f 07       	cpc	r17, r31
    434c:	81 f6       	brne	.-96     	; 0x42ee <omega_estimation+0x74>
    434e:	9e 01       	movw	r18, r28
    4350:	27 56       	subi	r18, 0x67	; 103
    4352:	3f 4f       	sbci	r19, 0xFF	; 255
    4354:	ce 01       	movw	r24, r28
    4356:	8b 55       	subi	r24, 0x5B	; 91
    4358:	9f 4f       	sbci	r25, 0xFF	; 255
    435a:	4d e7       	ldi	r20, 0x7D	; 125
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	4c 0f       	add	r20, r28
    4360:	5d 1f       	adc	r21, r29
    4362:	44 5f       	subi	r20, 0xF4	; 244
    4364:	5f 4f       	sbci	r21, 0xFF	; 255
    4366:	de 01       	movw	r26, r28
    4368:	a3 59       	subi	r26, 0x93	; 147
    436a:	bf 4f       	sbci	r27, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	e3 58       	subi	r30, 0x83	; 131
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	7c 01       	movw	r14, r24
    4374:	b9 01       	movw	r22, r18
    4376:	cd 01       	movw	r24, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    4378:	01 91       	ld	r16, Z+
    437a:	11 91       	ld	r17, Z+
    437c:	21 91       	ld	r18, Z+
    437e:	31 91       	ld	r19, Z+
    4380:	db 01       	movw	r26, r22
    4382:	0d 93       	st	X+, r16
    4384:	1d 93       	st	X+, r17
    4386:	2d 93       	st	X+, r18
    4388:	3d 93       	st	X+, r19
    438a:	bd 01       	movw	r22, r26
    e[i] = q[i];
    438c:	dc 01       	movw	r26, r24
    438e:	0d 91       	ld	r16, X+
    4390:	1d 91       	ld	r17, X+
    4392:	2d 91       	ld	r18, X+
    4394:	3d 91       	ld	r19, X+
    4396:	cd 01       	movw	r24, r26
    4398:	d7 01       	movw	r26, r14
    439a:	0d 93       	st	X+, r16
    439c:	1d 93       	st	X+, r17
    439e:	2d 93       	st	X+, r18
    43a0:	3d 93       	st	X+, r19
    43a2:	7d 01       	movw	r14, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    43a4:	e4 17       	cp	r30, r20
    43a6:	f5 07       	cpc	r31, r21
    43a8:	39 f7       	brne	.-50     	; 0x4378 <omega_estimation+0xfe>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    43aa:	ed 96       	adiw	r28, 0x3d	; 61
    43ac:	2c ad       	ldd	r18, Y+60	; 0x3c
    43ae:	3d ad       	ldd	r19, Y+61	; 0x3d
    43b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    43b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    43b4:	ed 97       	sbiw	r28, 0x3d	; 61
    43b6:	c9 54       	subi	r28, 0x49	; 73
    43b8:	df 4f       	sbci	r29, 0xFF	; 255
    43ba:	28 83       	st	Y, r18
    43bc:	39 83       	std	Y+1, r19	; 0x01
    43be:	4a 83       	std	Y+2, r20	; 0x02
    43c0:	5b 83       	std	Y+3, r21	; 0x03
    43c2:	c7 5b       	subi	r28, 0xB7	; 183
    43c4:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    43c6:	1d a2       	std	Y+37, r1	; 0x25
    43c8:	1e a2       	std	Y+38, r1	; 0x26
    43ca:	1f a2       	std	Y+39, r1	; 0x27
    43cc:	18 a6       	std	Y+40, r1	; 0x28
    43ce:	c3 55       	subi	r28, 0x53	; 83
    43d0:	df 4f       	sbci	r29, 0xFF	; 255
    43d2:	88 80       	ld	r8, Y
    43d4:	99 80       	ldd	r9, Y+1	; 0x01
    43d6:	aa 80       	ldd	r10, Y+2	; 0x02
    43d8:	bb 80       	ldd	r11, Y+3	; 0x03
    43da:	cd 5a       	subi	r28, 0xAD	; 173
    43dc:	d0 40       	sbci	r29, 0x00	; 0
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	40 e0       	ldi	r20, 0x00	; 0
    43e4:	50 ec       	ldi	r21, 0xC0	; 192
    43e6:	c5 01       	movw	r24, r10
    43e8:	b4 01       	movw	r22, r8
    43ea:	c2 d5       	rcall	.+2948   	; 0x4f70 <__mulsf3>
    43ec:	69 a7       	std	Y+41, r22	; 0x29
    43ee:	7a a7       	std	Y+42, r23	; 0x2a
    43f0:	8b a7       	std	Y+43, r24	; 0x2b
    43f2:	9c a7       	std	Y+44, r25	; 0x2c
    43f4:	c7 55       	subi	r28, 0x57	; 87
    43f6:	df 4f       	sbci	r29, 0xFF	; 255
    43f8:	c8 80       	ld	r12, Y
    43fa:	d9 80       	ldd	r13, Y+1	; 0x01
    43fc:	ea 80       	ldd	r14, Y+2	; 0x02
    43fe:	fb 80       	ldd	r15, Y+3	; 0x03
    4400:	c9 5a       	subi	r28, 0xA9	; 169
    4402:	d0 40       	sbci	r29, 0x00	; 0
    4404:	a7 01       	movw	r20, r14
    4406:	96 01       	movw	r18, r12
    4408:	c7 01       	movw	r24, r14
    440a:	b6 01       	movw	r22, r12
    440c:	af d2       	rcall	.+1374   	; 0x496c <__addsf3>
    440e:	6d a7       	std	Y+45, r22	; 0x2d
    4410:	7e a7       	std	Y+46, r23	; 0x2e
    4412:	8f a7       	std	Y+47, r24	; 0x2f
    4414:	98 ab       	std	Y+48, r25	; 0x30
                  { 2 * e[2], 0, -2 * e[0] },
    4416:	a5 01       	movw	r20, r10
    4418:	94 01       	movw	r18, r8
    441a:	c5 01       	movw	r24, r10
    441c:	b4 01       	movw	r22, r8
    441e:	a6 d2       	rcall	.+1356   	; 0x496c <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    4420:	69 ab       	std	Y+49, r22	; 0x31
    4422:	7a ab       	std	Y+50, r23	; 0x32
    4424:	8b ab       	std	Y+51, r24	; 0x33
    4426:	9c ab       	std	Y+52, r25	; 0x34
    4428:	1d aa       	std	Y+53, r1	; 0x35
    442a:	1e aa       	std	Y+54, r1	; 0x36
    442c:	1f aa       	std	Y+55, r1	; 0x37
    442e:	18 ae       	std	Y+56, r1	; 0x38
                  { 2 * e[2], 0, -2 * e[0] },
    4430:	ae 01       	movw	r20, r28
    4432:	4b 55       	subi	r20, 0x5B	; 91
    4434:	5f 4f       	sbci	r21, 0xFF	; 255
    4436:	fa 01       	movw	r30, r20
    4438:	81 91       	ld	r24, Z+
    443a:	91 91       	ld	r25, Z+
    443c:	a1 91       	ld	r26, Z+
    443e:	b1 91       	ld	r27, Z+
    4440:	cb 53       	subi	r28, 0x3B	; 59
    4442:	df 4f       	sbci	r29, 0xFF	; 255
    4444:	f9 83       	std	Y+1, r31	; 0x01
    4446:	e8 83       	st	Y, r30
    4448:	c5 5c       	subi	r28, 0xC5	; 197
    444a:	d0 40       	sbci	r29, 0x00	; 0
    444c:	cf 53       	subi	r28, 0x3F	; 63
    444e:	df 4f       	sbci	r29, 0xFF	; 255
    4450:	88 83       	st	Y, r24
    4452:	99 83       	std	Y+1, r25	; 0x01
    4454:	aa 83       	std	Y+2, r26	; 0x02
    4456:	bb 83       	std	Y+3, r27	; 0x03
    4458:	c1 5c       	subi	r28, 0xC1	; 193
    445a:	d0 40       	sbci	r29, 0x00	; 0
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	40 e0       	ldi	r20, 0x00	; 0
    4462:	50 ec       	ldi	r21, 0xC0	; 192
    4464:	bc 01       	movw	r22, r24
    4466:	cd 01       	movw	r24, r26
    4468:	83 d5       	rcall	.+2822   	; 0x4f70 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    446a:	69 af       	std	Y+57, r22	; 0x39
    446c:	7a af       	std	Y+58, r23	; 0x3a
    446e:	8b af       	std	Y+59, r24	; 0x3b
    4470:	9c af       	std	Y+60, r25	; 0x3c
                  { 2 * e[2], 0, -2 * e[0] },
                  { -2 * e[1], 2 * e[0], 0 } };
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	50 ec       	ldi	r21, 0xC0	; 192
    447a:	c7 01       	movw	r24, r14
    447c:	b6 01       	movw	r22, r12
    447e:	78 d5       	rcall	.+2800   	; 0x4f70 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    4480:	21 96       	adiw	r28, 0x01	; 1
    4482:	6c af       	std	Y+60, r22	; 0x3c
    4484:	7d af       	std	Y+61, r23	; 0x3d
    4486:	8e af       	std	Y+62, r24	; 0x3e
    4488:	9f af       	std	Y+63, r25	; 0x3f
    448a:	21 97       	sbiw	r28, 0x01	; 1
                  { 2 * e[2], 0, -2 * e[0] },
                  { -2 * e[1], 2 * e[0], 0 } };
    448c:	cf 53       	subi	r28, 0x3F	; 63
    448e:	df 4f       	sbci	r29, 0xFF	; 255
    4490:	28 81       	ld	r18, Y
    4492:	39 81       	ldd	r19, Y+1	; 0x01
    4494:	4a 81       	ldd	r20, Y+2	; 0x02
    4496:	5b 81       	ldd	r21, Y+3	; 0x03
    4498:	c1 5c       	subi	r28, 0xC1	; 193
    449a:	d0 40       	sbci	r29, 0x00	; 0
    449c:	ca 01       	movw	r24, r20
    449e:	b9 01       	movw	r22, r18
    44a0:	65 d2       	rcall	.+1226   	; 0x496c <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    44a2:	25 96       	adiw	r28, 0x05	; 5
    44a4:	6c af       	std	Y+60, r22	; 0x3c
    44a6:	7d af       	std	Y+61, r23	; 0x3d
    44a8:	8e af       	std	Y+62, r24	; 0x3e
    44aa:	9f af       	std	Y+63, r25	; 0x3f
    44ac:	25 97       	sbiw	r28, 0x05	; 5
    44ae:	29 96       	adiw	r28, 0x09	; 9
    44b0:	1c ae       	std	Y+60, r1	; 0x3c
    44b2:	1d ae       	std	Y+61, r1	; 0x3d
    44b4:	1e ae       	std	Y+62, r1	; 0x3e
    44b6:	1f ae       	std	Y+63, r1	; 0x3f
    44b8:	29 97       	sbiw	r28, 0x09	; 9
                  { 2 * e[2], 0, -2 * e[0] },
                  { -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    44ba:	c9 54       	subi	r28, 0x49	; 73
    44bc:	df 4f       	sbci	r29, 0xFF	; 255
    44be:	28 81       	ld	r18, Y
    44c0:	39 81       	ldd	r19, Y+1	; 0x01
    44c2:	4a 81       	ldd	r20, Y+2	; 0x02
    44c4:	5b 81       	ldd	r21, Y+3	; 0x03
    44c6:	c7 5b       	subi	r28, 0xB7	; 183
    44c8:	d0 40       	sbci	r29, 0x00	; 0
    44ca:	ca 01       	movw	r24, r20
    44cc:	b9 01       	movw	r22, r18
    44ce:	4e d2       	rcall	.+1180   	; 0x496c <__addsf3>
    44d0:	2b 01       	movw	r4, r22
    44d2:	3c 01       	movw	r6, r24
    44d4:	69 83       	std	Y+1, r22	; 0x01
    44d6:	7a 83       	std	Y+2, r23	; 0x02
    44d8:	8b 83       	std	Y+3, r24	; 0x03
    44da:	9c 83       	std	Y+4, r25	; 0x04
    44dc:	1d 82       	std	Y+5, r1	; 0x05
    44de:	1e 82       	std	Y+6, r1	; 0x06
    44e0:	1f 82       	std	Y+7, r1	; 0x07
    44e2:	18 86       	std	Y+8, r1	; 0x08
    44e4:	19 86       	std	Y+9, r1	; 0x09
    44e6:	1a 86       	std	Y+10, r1	; 0x0a
    44e8:	1b 86       	std	Y+11, r1	; 0x0b
    44ea:	1c 86       	std	Y+12, r1	; 0x0c
    44ec:	1d 86       	std	Y+13, r1	; 0x0d
    44ee:	1e 86       	std	Y+14, r1	; 0x0e
    44f0:	1f 86       	std	Y+15, r1	; 0x0f
    44f2:	18 8a       	std	Y+16, r1	; 0x10
    44f4:	69 8b       	std	Y+17, r22	; 0x11
    44f6:	7a 8b       	std	Y+18, r23	; 0x12
    44f8:	8b 8b       	std	Y+19, r24	; 0x13
    44fa:	9c 8b       	std	Y+20, r25	; 0x14
    44fc:	1d 8a       	std	Y+21, r1	; 0x15
    44fe:	1e 8a       	std	Y+22, r1	; 0x16
    4500:	1f 8a       	std	Y+23, r1	; 0x17
    4502:	18 8e       	std	Y+24, r1	; 0x18
    4504:	19 8e       	std	Y+25, r1	; 0x19
    4506:	1a 8e       	std	Y+26, r1	; 0x1a
    4508:	1b 8e       	std	Y+27, r1	; 0x1b
    450a:	1c 8e       	std	Y+28, r1	; 0x1c
    450c:	1d 8e       	std	Y+29, r1	; 0x1d
    450e:	1e 8e       	std	Y+30, r1	; 0x1e
    4510:	1f 8e       	std	Y+31, r1	; 0x1f
    4512:	18 a2       	std	Y+32, r1	; 0x20
    4514:	69 a3       	std	Y+33, r22	; 0x21
    4516:	7a a3       	std	Y+34, r23	; 0x22
    4518:	8b a3       	std	Y+35, r24	; 0x23
    451a:	9c a3       	std	Y+36, r25	; 0x24
    451c:	9e 01       	movw	r18, r28
    451e:	2f 5f       	subi	r18, 0xFF	; 255
    4520:	3f 4f       	sbci	r19, 0xFF	; 255
    4522:	c5 54       	subi	r28, 0x45	; 69
    4524:	df 4f       	sbci	r29, 0xFF	; 255
    4526:	39 83       	std	Y+1, r19	; 0x01
    4528:	28 83       	st	Y, r18
    452a:	cb 5b       	subi	r28, 0xBB	; 187
    452c:	d0 40       	sbci	r29, 0x00	; 0
    452e:	ae 01       	movw	r20, r28
    4530:	4b 5d       	subi	r20, 0xDB	; 219
    4532:	5f 4f       	sbci	r21, 0xFF	; 255
    4534:	c3 54       	subi	r28, 0x43	; 67
    4536:	df 4f       	sbci	r29, 0xFF	; 255
    4538:	59 83       	std	Y+1, r21	; 0x01
    453a:	48 83       	st	Y, r20
    453c:	cd 5b       	subi	r28, 0xBD	; 189
    453e:	d0 40       	sbci	r29, 0x00	; 0
    4540:	ce 01       	movw	r24, r28
    4542:	87 5b       	subi	r24, 0xB7	; 183
    4544:	9f 4f       	sbci	r25, 0xFF	; 255
    4546:	c1 54       	subi	r28, 0x41	; 65
    4548:	df 4f       	sbci	r29, 0xFF	; 255
    454a:	99 83       	std	Y+1, r25	; 0x01
    454c:	88 83       	st	Y, r24
    454e:	cf 5b       	subi	r28, 0xBF	; 191
    4550:	d0 40       	sbci	r29, 0x00	; 0
    4552:	cb 53       	subi	r28, 0x3B	; 59
    4554:	df 4f       	sbci	r29, 0xFF	; 255
    4556:	a8 81       	ld	r26, Y
    4558:	b9 81       	ldd	r27, Y+1	; 0x01
    455a:	c5 5c       	subi	r28, 0xC5	; 197
    455c:	d0 40       	sbci	r29, 0x00	; 0
    455e:	c5 53       	subi	r28, 0x35	; 53
    4560:	df 4f       	sbci	r29, 0xFF	; 255
    4562:	b9 83       	std	Y+1, r27	; 0x01
    4564:	a8 83       	st	Y, r26
    4566:	cb 5c       	subi	r28, 0xCB	; 203
    4568:	d0 40       	sbci	r29, 0x00	; 0
    456a:	cf 53       	subi	r28, 0x3F	; 63
    456c:	df 4f       	sbci	r29, 0xFF	; 255
    456e:	68 81       	ld	r22, Y
    4570:	79 81       	ldd	r23, Y+1	; 0x01
    4572:	8a 81       	ldd	r24, Y+2	; 0x02
    4574:	9b 81       	ldd	r25, Y+3	; 0x03
    4576:	c1 5c       	subi	r28, 0xC1	; 193
    4578:	d0 40       	sbci	r29, 0x00	; 0
    457a:	23 e0       	ldi	r18, 0x03	; 3
    457c:	22 2e       	mov	r2, r18
    457e:	81 2c       	mov	r8, r1
    4580:	91 2c       	mov	r9, r1
    4582:	54 01       	movw	r10, r8
    4584:	02 2d       	mov	r16, r2
    4586:	c9 53       	subi	r28, 0x39	; 57
    4588:	df 4f       	sbci	r29, 0xFF	; 255
    458a:	48 82       	st	Y, r4
    458c:	59 82       	std	Y+1, r5	; 0x01
    458e:	6a 82       	std	Y+2, r6	; 0x02
    4590:	7b 82       	std	Y+3, r7	; 0x03
    4592:	c7 5c       	subi	r28, 0xC7	; 199
    4594:	d0 40       	sbci	r29, 0x00	; 0
    4596:	9b 01       	movw	r18, r22
    4598:	ac 01       	movw	r20, r24
    459a:	e8 d1       	rcall	.+976    	; 0x496c <__addsf3>
    459c:	2b 01       	movw	r4, r22
    459e:	3c 01       	movw	r6, r24
  static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  float n;
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    45a0:	cb 53       	subi	r28, 0x3B	; 59
    45a2:	df 4f       	sbci	r29, 0xFF	; 255
    45a4:	28 81       	ld	r18, Y
    45a6:	39 81       	ldd	r19, Y+1	; 0x01
    45a8:	c5 5c       	subi	r28, 0xC5	; 197
    45aa:	d0 40       	sbci	r29, 0x00	; 0
    45ac:	cd 54       	subi	r28, 0x4D	; 77
    45ae:	df 4f       	sbci	r29, 0xFF	; 255
    45b0:	39 83       	std	Y+1, r19	; 0x01
    45b2:	28 83       	st	Y, r18
    45b4:	c3 5b       	subi	r28, 0xB3	; 179
    45b6:	d0 40       	sbci	r29, 0x00	; 0
    45b8:	c3 54       	subi	r28, 0x43	; 67
    45ba:	df 4f       	sbci	r29, 0xFF	; 255
    45bc:	48 81       	ld	r20, Y
    45be:	59 81       	ldd	r21, Y+1	; 0x01
    45c0:	cd 5b       	subi	r28, 0xBD	; 189
    45c2:	d0 40       	sbci	r29, 0x00	; 0
    45c4:	4c 5f       	subi	r20, 0xFC	; 252
    45c6:	5f 4f       	sbci	r21, 0xFF	; 255
    45c8:	cb 54       	subi	r28, 0x4B	; 75
    45ca:	df 4f       	sbci	r29, 0xFF	; 255
    45cc:	59 83       	std	Y+1, r21	; 0x01
    45ce:	48 83       	st	Y, r20
    45d0:	c5 5b       	subi	r28, 0xB5	; 181
    45d2:	d0 40       	sbci	r29, 0x00	; 0
    45d4:	c5 54       	subi	r28, 0x45	; 69
    45d6:	df 4f       	sbci	r29, 0xFF	; 255
    45d8:	88 81       	ld	r24, Y
    45da:	99 81       	ldd	r25, Y+1	; 0x01
    45dc:	cb 5b       	subi	r28, 0xBB	; 187
    45de:	d0 40       	sbci	r29, 0x00	; 0
    45e0:	04 96       	adiw	r24, 0x04	; 4
    45e2:	cf 54       	subi	r28, 0x4F	; 79
    45e4:	df 4f       	sbci	r29, 0xFF	; 255
    45e6:	99 83       	std	Y+1, r25	; 0x01
    45e8:	88 83       	st	Y, r24
    45ea:	c1 5b       	subi	r28, 0xB1	; 177
    45ec:	d0 40       	sbci	r29, 0x00	; 0
    45ee:	c1 54       	subi	r28, 0x41	; 65
    45f0:	df 4f       	sbci	r29, 0xFF	; 255
    45f2:	28 80       	ld	r2, Y
    45f4:	39 80       	ldd	r3, Y+1	; 0x01
    45f6:	cf 5b       	subi	r28, 0xBF	; 191
    45f8:	d0 40       	sbci	r29, 0x00	; 0
    45fa:	cf 53       	subi	r28, 0x3F	; 63
    45fc:	df 4f       	sbci	r29, 0xFF	; 255
    45fe:	c8 80       	ld	r12, Y
    4600:	d9 80       	ldd	r13, Y+1	; 0x01
    4602:	ea 80       	ldd	r14, Y+2	; 0x02
    4604:	fb 80       	ldd	r15, Y+3	; 0x03
    4606:	c1 5c       	subi	r28, 0xC1	; 193
    4608:	d0 40       	sbci	r29, 0x00	; 0
    460a:	13 e0       	ldi	r17, 0x03	; 3
    460c:	c9 53       	subi	r28, 0x39	; 57
    460e:	df 4f       	sbci	r29, 0xFF	; 255
    4610:	68 81       	ld	r22, Y
    4612:	79 81       	ldd	r23, Y+1	; 0x01
    4614:	8a 81       	ldd	r24, Y+2	; 0x02
    4616:	9b 81       	ldd	r25, Y+3	; 0x03
    4618:	c7 5c       	subi	r28, 0xC7	; 199
    461a:	d0 40       	sbci	r29, 0x00	; 0
    461c:	a5 01       	movw	r20, r10
    461e:	94 01       	movw	r18, r8
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    4620:	a4 d1       	rcall	.+840    	; 0x496a <__subsf3>
    4622:	4b 01       	movw	r8, r22
    4624:	5c 01       	movw	r10, r24
    4626:	a7 01       	movw	r20, r14
    4628:	96 01       	movw	r18, r12
    462a:	c3 01       	movw	r24, r6
    462c:	b2 01       	movw	r22, r4
    462e:	a0 d4       	rcall	.+2368   	; 0x4f70 <__mulsf3>
    4630:	c9 54       	subi	r28, 0x49	; 73
    4632:	df 4f       	sbci	r29, 0xFF	; 255
    4634:	28 81       	ld	r18, Y
    4636:	39 81       	ldd	r19, Y+1	; 0x01
    4638:	4a 81       	ldd	r20, Y+2	; 0x02
    463a:	5b 81       	ldd	r21, Y+3	; 0x03
    463c:	c7 5b       	subi	r28, 0xB7	; 183
    463e:	d0 40       	sbci	r29, 0x00	; 0
    4640:	79 d2       	rcall	.+1266   	; 0x4b34 <__divsf3>
    4642:	9b 01       	movw	r18, r22
    4644:	ac 01       	movw	r20, r24
    4646:	c5 01       	movw	r24, r10
    4648:	b4 01       	movw	r22, r8
    464a:	90 d1       	rcall	.+800    	; 0x496c <__addsf3>
    464c:	d1 01       	movw	r26, r2
    464e:	6d 93       	st	X+, r22
    4650:	7d 93       	st	X+, r23
    4652:	8d 93       	st	X+, r24
    4654:	9c 93       	st	X, r25
    4656:	13 97       	sbiw	r26, 0x03	; 3
    4658:	11 50       	subi	r17, 0x01	; 1
    465a:	bc e0       	ldi	r27, 0x0C	; 12
    465c:	2b 0e       	add	r2, r27
    465e:	31 1c       	adc	r3, r1
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    4660:	11 23       	and	r17, r17
    4662:	89 f1       	breq	.+98     	; 0x46c6 <omega_estimation+0x44c>
    4664:	cf 54       	subi	r28, 0x4F	; 79
    4666:	df 4f       	sbci	r29, 0xFF	; 255
    4668:	e8 81       	ld	r30, Y
    466a:	f9 81       	ldd	r31, Y+1	; 0x01
    466c:	c1 5b       	subi	r28, 0xB1	; 177
    466e:	d0 40       	sbci	r29, 0x00	; 0
    4670:	61 91       	ld	r22, Z+
    4672:	71 91       	ld	r23, Z+
    4674:	81 91       	ld	r24, Z+
    4676:	91 91       	ld	r25, Z+
    4678:	cf 54       	subi	r28, 0x4F	; 79
    467a:	df 4f       	sbci	r29, 0xFF	; 255
    467c:	f9 83       	std	Y+1, r31	; 0x01
    467e:	e8 83       	st	Y, r30
    4680:	c1 5b       	subi	r28, 0xB1	; 177
    4682:	d0 40       	sbci	r29, 0x00	; 0
    4684:	cb 54       	subi	r28, 0x4B	; 75
    4686:	df 4f       	sbci	r29, 0xFF	; 255
    4688:	a8 81       	ld	r26, Y
    468a:	b9 81       	ldd	r27, Y+1	; 0x01
    468c:	c5 5b       	subi	r28, 0xB5	; 181
    468e:	d0 40       	sbci	r29, 0x00	; 0
    4690:	2d 91       	ld	r18, X+
    4692:	3d 91       	ld	r19, X+
    4694:	4d 91       	ld	r20, X+
    4696:	5d 91       	ld	r21, X+
    4698:	cb 54       	subi	r28, 0x4B	; 75
    469a:	df 4f       	sbci	r29, 0xFF	; 255
    469c:	b9 83       	std	Y+1, r27	; 0x01
    469e:	a8 83       	st	Y, r26
    46a0:	c5 5b       	subi	r28, 0xB5	; 181
    46a2:	d0 40       	sbci	r29, 0x00	; 0
    46a4:	cd 54       	subi	r28, 0x4D	; 77
    46a6:	df 4f       	sbci	r29, 0xFF	; 255
    46a8:	e8 81       	ld	r30, Y
    46aa:	f9 81       	ldd	r31, Y+1	; 0x01
    46ac:	c3 5b       	subi	r28, 0xB3	; 179
    46ae:	d0 40       	sbci	r29, 0x00	; 0
    46b0:	c1 90       	ld	r12, Z+
    46b2:	d1 90       	ld	r13, Z+
    46b4:	e1 90       	ld	r14, Z+
    46b6:	f1 90       	ld	r15, Z+
    46b8:	cd 54       	subi	r28, 0x4D	; 77
    46ba:	df 4f       	sbci	r29, 0xFF	; 255
    46bc:	f9 83       	std	Y+1, r31	; 0x01
    46be:	e8 83       	st	Y, r30
    46c0:	c3 5b       	subi	r28, 0xB3	; 179
    46c2:	d0 40       	sbci	r29, 0x00	; 0
    46c4:	ad cf       	rjmp	.-166    	; 0x4620 <omega_estimation+0x3a6>
    46c6:	01 50       	subi	r16, 0x01	; 1
    46c8:	c5 54       	subi	r28, 0x45	; 69
    46ca:	df 4f       	sbci	r29, 0xFF	; 255
    46cc:	e8 81       	ld	r30, Y
    46ce:	f9 81       	ldd	r31, Y+1	; 0x01
    46d0:	cb 5b       	subi	r28, 0xBB	; 187
    46d2:	d0 40       	sbci	r29, 0x00	; 0
    46d4:	3c 96       	adiw	r30, 0x0c	; 12
    46d6:	c5 54       	subi	r28, 0x45	; 69
    46d8:	df 4f       	sbci	r29, 0xFF	; 255
    46da:	f9 83       	std	Y+1, r31	; 0x01
    46dc:	e8 83       	st	Y, r30
    46de:	cb 5b       	subi	r28, 0xBB	; 187
    46e0:	d0 40       	sbci	r29, 0x00	; 0
    46e2:	c3 54       	subi	r28, 0x43	; 67
    46e4:	df 4f       	sbci	r29, 0xFF	; 255
    46e6:	28 81       	ld	r18, Y
    46e8:	39 81       	ldd	r19, Y+1	; 0x01
    46ea:	cd 5b       	subi	r28, 0xBD	; 189
    46ec:	d0 40       	sbci	r29, 0x00	; 0
    46ee:	24 5f       	subi	r18, 0xF4	; 244
    46f0:	3f 4f       	sbci	r19, 0xFF	; 255
    46f2:	c3 54       	subi	r28, 0x43	; 67
    46f4:	df 4f       	sbci	r29, 0xFF	; 255
    46f6:	39 83       	std	Y+1, r19	; 0x01
    46f8:	28 83       	st	Y, r18
    46fa:	cd 5b       	subi	r28, 0xBD	; 189
    46fc:	d0 40       	sbci	r29, 0x00	; 0
    46fe:	c1 54       	subi	r28, 0x41	; 65
    4700:	df 4f       	sbci	r29, 0xFF	; 255
    4702:	48 81       	ld	r20, Y
    4704:	59 81       	ldd	r21, Y+1	; 0x01
    4706:	cf 5b       	subi	r28, 0xBF	; 191
    4708:	d0 40       	sbci	r29, 0x00	; 0
    470a:	4c 5f       	subi	r20, 0xFC	; 252
    470c:	5f 4f       	sbci	r21, 0xFF	; 255
    470e:	c1 54       	subi	r28, 0x41	; 65
    4710:	df 4f       	sbci	r29, 0xFF	; 255
    4712:	59 83       	std	Y+1, r21	; 0x01
    4714:	48 83       	st	Y, r20
    4716:	cf 5b       	subi	r28, 0xBF	; 191
    4718:	d0 40       	sbci	r29, 0x00	; 0
                  { 2 * e[2], 0, -2 * e[0] },
                  { -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    471a:	00 23       	and	r16, r16
    471c:	39 f1       	breq	.+78     	; 0x476c <omega_estimation+0x4f2>
    471e:	c5 53       	subi	r28, 0x35	; 53
    4720:	df 4f       	sbci	r29, 0xFF	; 255
    4722:	a8 81       	ld	r26, Y
    4724:	b9 81       	ldd	r27, Y+1	; 0x01
    4726:	cb 5c       	subi	r28, 0xCB	; 203
    4728:	d0 40       	sbci	r29, 0x00	; 0
    472a:	6d 91       	ld	r22, X+
    472c:	7d 91       	ld	r23, X+
    472e:	8d 91       	ld	r24, X+
    4730:	9d 91       	ld	r25, X+
    4732:	c5 53       	subi	r28, 0x35	; 53
    4734:	df 4f       	sbci	r29, 0xFF	; 255
    4736:	b9 83       	std	Y+1, r27	; 0x01
    4738:	a8 83       	st	Y, r26
    473a:	cb 5c       	subi	r28, 0xCB	; 203
    473c:	d0 40       	sbci	r29, 0x00	; 0
    473e:	20 81       	ld	r18, Z
    4740:	31 81       	ldd	r19, Z+1	; 0x01
    4742:	42 81       	ldd	r20, Z+2	; 0x02
    4744:	53 81       	ldd	r21, Z+3	; 0x03
    4746:	c9 53       	subi	r28, 0x39	; 57
    4748:	df 4f       	sbci	r29, 0xFF	; 255
    474a:	28 83       	st	Y, r18
    474c:	39 83       	std	Y+1, r19	; 0x01
    474e:	4a 83       	std	Y+2, r20	; 0x02
    4750:	5b 83       	std	Y+3, r21	; 0x03
    4752:	c7 5c       	subi	r28, 0xC7	; 199
    4754:	d0 40       	sbci	r29, 0x00	; 0
    4756:	c3 54       	subi	r28, 0x43	; 67
    4758:	df 4f       	sbci	r29, 0xFF	; 255
    475a:	e8 81       	ld	r30, Y
    475c:	f9 81       	ldd	r31, Y+1	; 0x01
    475e:	cd 5b       	subi	r28, 0xBD	; 189
    4760:	d0 40       	sbci	r29, 0x00	; 0
    4762:	80 80       	ld	r8, Z
    4764:	91 80       	ldd	r9, Z+1	; 0x01
    4766:	a2 80       	ldd	r10, Z+2	; 0x02
    4768:	b3 80       	ldd	r11, Z+3	; 0x03
    476a:	15 cf       	rjmp	.-470    	; 0x4596 <omega_estimation+0x31c>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    476c:	ae 01       	movw	r20, r28
    476e:	43 57       	subi	r20, 0x73	; 115
    4770:	5f 4f       	sbci	r21, 0xFF	; 255
    4772:	be 01       	movw	r22, r28
    4774:	67 5b       	subi	r22, 0xB7	; 183
    4776:	7f 4f       	sbci	r23, 0xFF	; 255
    4778:	ce 01       	movw	r24, r28
    477a:	87 56       	subi	r24, 0x67	; 103
    477c:	9f 4f       	sbci	r25, 0xFF	; 255
    477e:	0e 94 a3 18 	call	0x3146	; 0x3146 <vector_into_matrix>
    4782:	8e 01       	movw	r16, r28
    4784:	03 57       	subi	r16, 0x73	; 115
    4786:	1f 4f       	sbci	r17, 0xFF	; 255
    4788:	97 ed       	ldi	r25, 0xD7	; 215
    478a:	c9 2e       	mov	r12, r25
    478c:	93 e0       	ldi	r25, 0x03	; 3
    478e:	d9 2e       	mov	r13, r25
    4790:	c1 53       	subi	r28, 0x31	; 49
    4792:	df 4f       	sbci	r29, 0xFF	; 255
    4794:	e8 80       	ld	r14, Y
    4796:	cf 5c       	subi	r28, 0xCF	; 207
    4798:	d0 40       	sbci	r29, 0x00	; 0
    479a:	c0 53       	subi	r28, 0x30	; 48
    479c:	df 4f       	sbci	r29, 0xFF	; 255
    479e:	f8 80       	ld	r15, Y
    47a0:	c0 5d       	subi	r28, 0xD0	; 208
    47a2:	d0 40       	sbci	r29, 0x00	; 0
    47a4:	18 01       	movw	r2, r16
    47a6:	9c e0       	ldi	r25, 0x0C	; 12
    47a8:	29 0e       	add	r2, r25
    47aa:	31 1c       	adc	r3, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    47ac:	d8 01       	movw	r26, r16
    47ae:	6d 91       	ld	r22, X+
    47b0:	7d 91       	ld	r23, X+
    47b2:	8d 91       	ld	r24, X+
    47b4:	9d 91       	ld	r25, X+
    47b6:	8d 01       	movw	r16, r26
    47b8:	f6 01       	movw	r30, r12
    47ba:	41 90       	ld	r4, Z+
    47bc:	51 90       	ld	r5, Z+
    47be:	61 90       	ld	r6, Z+
    47c0:	71 90       	ld	r7, Z+
    47c2:	6f 01       	movw	r12, r30
    47c4:	28 e0       	ldi	r18, 0x08	; 8
    47c6:	31 e2       	ldi	r19, 0x21	; 33
    47c8:	44 e0       	ldi	r20, 0x04	; 4
    47ca:	5d e3       	ldi	r21, 0x3D	; 61
    47cc:	d1 d3       	rcall	.+1954   	; 0x4f70 <__mulsf3>
    47ce:	4b 01       	movw	r8, r22
    47d0:	5c 01       	movw	r10, r24
    47d2:	20 ef       	ldi	r18, 0xF0	; 240
    47d4:	3d eb       	ldi	r19, 0xBD	; 189
    47d6:	47 e7       	ldi	r20, 0x77	; 119
    47d8:	5f e3       	ldi	r21, 0x3F	; 63
    47da:	c3 01       	movw	r24, r6
    47dc:	b2 01       	movw	r22, r4
    47de:	c8 d3       	rcall	.+1936   	; 0x4f70 <__mulsf3>
    47e0:	9b 01       	movw	r18, r22
    47e2:	ac 01       	movw	r20, r24
    47e4:	c5 01       	movw	r24, r10
    47e6:	b4 01       	movw	r22, r8
    47e8:	c1 d0       	rcall	.+386    	; 0x496c <__addsf3>
    47ea:	d7 01       	movw	r26, r14
    47ec:	6d 93       	st	X+, r22
    47ee:	7d 93       	st	X+, r23
    47f0:	8d 93       	st	X+, r24
    47f2:	9d 93       	st	X+, r25
    47f4:	7d 01       	movw	r14, r26
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    47f6:	02 15       	cp	r16, r2
    47f8:	13 05       	cpc	r17, r3
    47fa:	c1 f6       	brne	.-80     	; 0x47ac <omega_estimation+0x532>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    47fc:	63 ee       	ldi	r22, 0xE3	; 227
    47fe:	73 e0       	ldi	r23, 0x03	; 3
    4800:	c3 53       	subi	r28, 0x33	; 51
    4802:	df 4f       	sbci	r29, 0xFF	; 255
    4804:	88 81       	ld	r24, Y
    4806:	cd 5c       	subi	r28, 0xCD	; 205
    4808:	d0 40       	sbci	r29, 0x00	; 0
    480a:	c2 53       	subi	r28, 0x32	; 50
    480c:	df 4f       	sbci	r29, 0xFF	; 255
    480e:	98 81       	ld	r25, Y
    4810:	ce 5c       	subi	r28, 0xCE	; 206
    4812:	d0 40       	sbci	r29, 0x00	; 0
    4814:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    4818:	67 ed       	ldi	r22, 0xD7	; 215
    481a:	73 e0       	ldi	r23, 0x03	; 3
    481c:	c1 53       	subi	r28, 0x31	; 49
    481e:	df 4f       	sbci	r29, 0xFF	; 255
    4820:	88 81       	ld	r24, Y
    4822:	cf 5c       	subi	r28, 0xCF	; 207
    4824:	d0 40       	sbci	r29, 0x00	; 0
    4826:	c0 53       	subi	r28, 0x30	; 48
    4828:	df 4f       	sbci	r29, 0xFF	; 255
    482a:	98 81       	ld	r25, Y
    482c:	c0 5d       	subi	r28, 0xD0	; 208
    482e:	d0 40       	sbci	r29, 0x00	; 0
    4830:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
}  */
}
    4834:	c0 53       	subi	r28, 0x30	; 48
    4836:	df 4f       	sbci	r29, 0xFF	; 255
    4838:	0f b6       	in	r0, 0x3f	; 63
    483a:	f8 94       	cli
    483c:	de bf       	out	0x3e, r29	; 62
    483e:	0f be       	out	0x3f, r0	; 63
    4840:	cd bf       	out	0x3d, r28	; 61
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	1f 91       	pop	r17
    4848:	0f 91       	pop	r16
    484a:	ff 90       	pop	r15
    484c:	ef 90       	pop	r14
    484e:	df 90       	pop	r13
    4850:	cf 90       	pop	r12
    4852:	bf 90       	pop	r11
    4854:	af 90       	pop	r10
    4856:	9f 90       	pop	r9
    4858:	8f 90       	pop	r8
    485a:	7f 90       	pop	r7
    485c:	6f 90       	pop	r6
    485e:	5f 90       	pop	r5
    4860:	4f 90       	pop	r4
    4862:	3f 90       	pop	r3
    4864:	2f 90       	pop	r2
    4866:	08 95       	ret

00004868 <init_SPI>:
}

void init_SPI(void)
{
  ///Set MOSI and SCK output, all others input
  DDRB = 0;
    4868:	17 ba       	out	0x17, r1	; 23
  DDRB = _BV(SPICLK) | _BV(SPIDO);
    486a:	86 e0       	ldi	r24, 0x06	; 6
    486c:	87 bb       	out	0x17, r24	; 23
  
  
  DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    486e:	87 b3       	in	r24, 0x17	; 23
    4870:	81 63       	ori	r24, 0x31	; 49
    4872:	87 bb       	out	0x17, r24	; 23
  ///Switch off all devices
  PORT_CS |=_BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    4874:	88 b3       	in	r24, 0x18	; 24
    4876:	81 63       	ori	r24, 0x31	; 49
    4878:	88 bb       	out	0x18, r24	; 24
  
  ///Enable SPI, Master, set clock rate
  ///@todo Check frequency 
  SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    487a:	83 e5       	ldi	r24, 0x53	; 83
    487c:	8d b9       	out	0x0d, r24	; 13
    487e:	08 95       	ret

00004880 <poll_SS>:
  
  SPI_transfer(0b00000000);
}

void poll_SS(void)
{
    4880:	ef 92       	push	r14
    4882:	ff 92       	push	r15
    4884:	0f 93       	push	r16
    4886:	1f 93       	push	r17
    4888:	cf 93       	push	r28
    488a:	df 93       	push	r29
    488c:	00 e0       	ldi	r16, 0x00	; 0
    488e:	10 e0       	ldi	r17, 0x00	; 0
  //transmit_UART0(c);
 
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    Current_state.ss.reading[channel] = (uint16_t)receive_UART0();
    4890:	5a d0       	rcall	.+180    	; 0x4946 <receive_UART0>
    4892:	e8 01       	movw	r28, r16
    4894:	cc 0f       	add	r28, r28
    4896:	dd 1f       	adc	r29, r29
    4898:	cb 5f       	subi	r28, 0xFB	; 251
    489a:	db 4f       	sbci	r29, 0xFB	; 251
    489c:	98 ab       	std	Y+48, r25	; 0x30
    489e:	8f a7       	std	Y+47, r24	; 0x2f
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    48a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    48a2:	98 a9       	ldd	r25, Y+48	; 0x30
    48a4:	98 2f       	mov	r25, r24
    48a6:	88 27       	eor	r24, r24
    48a8:	98 ab       	std	Y+48, r25	; 0x30
    48aa:	8f a7       	std	Y+47, r24	; 0x2f
    Current_state.ss.reading[channel] &= 0xFF00;
    48ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    48ae:	98 a9       	ldd	r25, Y+48	; 0x30
    48b0:	88 27       	eor	r24, r24
    48b2:	98 ab       	std	Y+48, r25	; 0x30
    48b4:	8f a7       	std	Y+47, r24	; 0x2f
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    48b6:	ef a4       	ldd	r14, Y+47	; 0x2f
    48b8:	f8 a8       	ldd	r15, Y+48	; 0x30
    48ba:	45 d0       	rcall	.+138    	; 0x4946 <receive_UART0>
    48bc:	8e 29       	or	r24, r14
    48be:	9f 29       	or	r25, r15
    48c0:	98 ab       	std	Y+48, r25	; 0x30
    48c2:	8f a7       	std	Y+47, r24	; 0x2f
    48c4:	0f 5f       	subi	r16, 0xFF	; 255
    48c6:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t channel = 0;
  //uint8_t c= 100;
  ///Loop for reading the 6 sun sensor values
  //transmit_UART0(c);
 
  while(channel <= 5)
    48c8:	06 30       	cpi	r16, 0x06	; 6
    48ca:	11 05       	cpc	r17, r1
    48cc:	09 f7       	brne	.-62     	; 0x4890 <poll_SS+0x10>
    48ce:	c0 e0       	ldi	r28, 0x00	; 0
    48d0:	d0 e0       	ldi	r29, 0x00	; 0
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (float)(Current_state.ss.reading[i]*(3.3/1024));
    48d2:	fe 01       	movw	r30, r28
    48d4:	ee 0f       	add	r30, r30
    48d6:	ff 1f       	adc	r31, r31
    48d8:	eb 5f       	subi	r30, 0xFB	; 251
    48da:	fb 4f       	sbci	r31, 0xFB	; 251
    48dc:	67 a5       	ldd	r22, Z+47	; 0x2f
    48de:	70 a9       	ldd	r23, Z+48	; 0x30
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	c0 d1       	rcall	.+896    	; 0x4c66 <__floatunsisf>
    48e6:	23 e3       	ldi	r18, 0x33	; 51
    48e8:	33 e3       	ldi	r19, 0x33	; 51
    48ea:	43 e5       	ldi	r20, 0x53	; 83
    48ec:	5b e3       	ldi	r21, 0x3B	; 59
    48ee:	40 d3       	rcall	.+1664   	; 0x4f70 <__mulsf3>
    48f0:	fe 01       	movw	r30, r28
    48f2:	ee 0f       	add	r30, r30
    48f4:	ff 1f       	adc	r31, r31
    48f6:	ee 0f       	add	r30, r30
    48f8:	ff 1f       	adc	r31, r31
    48fa:	ef 5e       	subi	r30, 0xEF	; 239
    48fc:	fb 4f       	sbci	r31, 0xFB	; 251
    48fe:	67 a7       	std	Z+47, r22	; 0x2f
    4900:	70 ab       	std	Z+48, r23	; 0x30
    4902:	81 ab       	std	Z+49, r24	; 0x31
    4904:	92 ab       	std	Z+50, r25	; 0x32
    Current_state.ss.reading[channel] &= 0xFF00;
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
    4906:	21 96       	adiw	r28, 0x01	; 1
    4908:	c6 30       	cpi	r28, 0x06	; 6
    490a:	d1 05       	cpc	r29, r1
    490c:	11 f7       	brne	.-60     	; 0x48d2 <poll_SS+0x52>
	  transmit_UART0(sen);
  }*/
  ///Power Down PD low
  //cbi(PORTB, PB6);
return;  
}
    490e:	df 91       	pop	r29
    4910:	cf 91       	pop	r28
    4912:	1f 91       	pop	r17
    4914:	0f 91       	pop	r16
    4916:	ff 90       	pop	r15
    4918:	ef 90       	pop	r14
    491a:	08 95       	ret

0000491c <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
    491c:	1b b8       	out	0x0b, r1	; 11
    491e:	1a b8       	out	0x0a, r1	; 10
    4920:	e5 e9       	ldi	r30, 0x95	; 149
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	10 82       	st	Z, r1
    4926:	59 9a       	sbi	0x0b, 1	; 11
    4928:	8a b1       	in	r24, 0x0a	; 10
    492a:	88 61       	ori	r24, 0x18	; 24
    492c:	8a b9       	out	0x0a, r24	; 10
    492e:	80 81       	ld	r24, Z
    4930:	8e 60       	ori	r24, 0x0E	; 14
    4932:	80 83       	st	Z, r24
    4934:	87 e6       	ldi	r24, 0x67	; 103
    4936:	89 b9       	out	0x09, r24	; 9
    4938:	10 92 90 00 	sts	0x0090, r1
    493c:	08 95       	ret

0000493e <transmit_UART0>:
    493e:	5d 9b       	sbis	0x0b, 5	; 11
    4940:	fe cf       	rjmp	.-4      	; 0x493e <transmit_UART0>
    4942:	8c b9       	out	0x0c, r24	; 12
    4944:	08 95       	ret

00004946 <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
    4946:	5f 9b       	sbis	0x0b, 7	; 11
    4948:	fe cf       	rjmp	.-4      	; 0x4946 <receive_UART0>
  return UDR0;
    494a:	8c b1       	in	r24, 0x0c	; 12
}
    494c:	08 95       	ret

0000494e <acos>:
    494e:	9f 93       	push	r25
    4950:	9f 77       	andi	r25, 0x7F	; 127
    4952:	04 d2       	rcall	.+1032   	; 0x4d5c <__fp_arccos>
    4954:	0f 90       	pop	r0
    4956:	00 20       	and	r0, r0
    4958:	3a f4       	brpl	.+14     	; 0x4968 <acos+0x1a>
    495a:	90 58       	subi	r25, 0x80	; 128
    495c:	a2 ea       	ldi	r26, 0xA2	; 162
    495e:	2a ed       	ldi	r18, 0xDA	; 218
    4960:	3f e0       	ldi	r19, 0x0F	; 15
    4962:	49 e4       	ldi	r20, 0x49	; 73
    4964:	50 e4       	ldi	r21, 0x40	; 64
    4966:	13 d0       	rcall	.+38     	; 0x498e <__addsf3x>
    4968:	ad c2       	rjmp	.+1370   	; 0x4ec4 <__fp_round>

0000496a <__subsf3>:
    496a:	50 58       	subi	r21, 0x80	; 128

0000496c <__addsf3>:
    496c:	bb 27       	eor	r27, r27
    496e:	aa 27       	eor	r26, r26
    4970:	0e d0       	rcall	.+28     	; 0x498e <__addsf3x>
    4972:	a8 c2       	rjmp	.+1360   	; 0x4ec4 <__fp_round>
    4974:	71 d2       	rcall	.+1250   	; 0x4e58 <__fp_pscA>
    4976:	30 f0       	brcs	.+12     	; 0x4984 <__addsf3+0x18>
    4978:	76 d2       	rcall	.+1260   	; 0x4e66 <__fp_pscB>
    497a:	20 f0       	brcs	.+8      	; 0x4984 <__addsf3+0x18>
    497c:	31 f4       	brne	.+12     	; 0x498a <__addsf3+0x1e>
    497e:	9f 3f       	cpi	r25, 0xFF	; 255
    4980:	11 f4       	brne	.+4      	; 0x4986 <__addsf3+0x1a>
    4982:	1e f4       	brtc	.+6      	; 0x498a <__addsf3+0x1e>
    4984:	30 c2       	rjmp	.+1120   	; 0x4de6 <__fp_nan>
    4986:	0e f4       	brtc	.+2      	; 0x498a <__addsf3+0x1e>
    4988:	e0 95       	com	r30
    498a:	e7 fb       	bst	r30, 7
    498c:	26 c2       	rjmp	.+1100   	; 0x4dda <__fp_inf>

0000498e <__addsf3x>:
    498e:	e9 2f       	mov	r30, r25
    4990:	bb d2       	rcall	.+1398   	; 0x4f08 <__fp_split3>
    4992:	80 f3       	brcs	.-32     	; 0x4974 <__addsf3+0x8>
    4994:	ba 17       	cp	r27, r26
    4996:	62 07       	cpc	r22, r18
    4998:	73 07       	cpc	r23, r19
    499a:	84 07       	cpc	r24, r20
    499c:	95 07       	cpc	r25, r21
    499e:	18 f0       	brcs	.+6      	; 0x49a6 <__addsf3x+0x18>
    49a0:	71 f4       	brne	.+28     	; 0x49be <__addsf3x+0x30>
    49a2:	9e f5       	brtc	.+102    	; 0x4a0a <__addsf3x+0x7c>
    49a4:	d3 c2       	rjmp	.+1446   	; 0x4f4c <__fp_zero>
    49a6:	0e f4       	brtc	.+2      	; 0x49aa <__addsf3x+0x1c>
    49a8:	e0 95       	com	r30
    49aa:	0b 2e       	mov	r0, r27
    49ac:	ba 2f       	mov	r27, r26
    49ae:	a0 2d       	mov	r26, r0
    49b0:	0b 01       	movw	r0, r22
    49b2:	b9 01       	movw	r22, r18
    49b4:	90 01       	movw	r18, r0
    49b6:	0c 01       	movw	r0, r24
    49b8:	ca 01       	movw	r24, r20
    49ba:	a0 01       	movw	r20, r0
    49bc:	11 24       	eor	r1, r1
    49be:	ff 27       	eor	r31, r31
    49c0:	59 1b       	sub	r21, r25
    49c2:	99 f0       	breq	.+38     	; 0x49ea <__addsf3x+0x5c>
    49c4:	59 3f       	cpi	r21, 0xF9	; 249
    49c6:	50 f4       	brcc	.+20     	; 0x49dc <__addsf3x+0x4e>
    49c8:	50 3e       	cpi	r21, 0xE0	; 224
    49ca:	68 f1       	brcs	.+90     	; 0x4a26 <__addsf3x+0x98>
    49cc:	1a 16       	cp	r1, r26
    49ce:	f0 40       	sbci	r31, 0x00	; 0
    49d0:	a2 2f       	mov	r26, r18
    49d2:	23 2f       	mov	r18, r19
    49d4:	34 2f       	mov	r19, r20
    49d6:	44 27       	eor	r20, r20
    49d8:	58 5f       	subi	r21, 0xF8	; 248
    49da:	f3 cf       	rjmp	.-26     	; 0x49c2 <__addsf3x+0x34>
    49dc:	46 95       	lsr	r20
    49de:	37 95       	ror	r19
    49e0:	27 95       	ror	r18
    49e2:	a7 95       	ror	r26
    49e4:	f0 40       	sbci	r31, 0x00	; 0
    49e6:	53 95       	inc	r21
    49e8:	c9 f7       	brne	.-14     	; 0x49dc <__addsf3x+0x4e>
    49ea:	7e f4       	brtc	.+30     	; 0x4a0a <__addsf3x+0x7c>
    49ec:	1f 16       	cp	r1, r31
    49ee:	ba 0b       	sbc	r27, r26
    49f0:	62 0b       	sbc	r22, r18
    49f2:	73 0b       	sbc	r23, r19
    49f4:	84 0b       	sbc	r24, r20
    49f6:	ba f0       	brmi	.+46     	; 0x4a26 <__addsf3x+0x98>
    49f8:	91 50       	subi	r25, 0x01	; 1
    49fa:	a1 f0       	breq	.+40     	; 0x4a24 <__addsf3x+0x96>
    49fc:	ff 0f       	add	r31, r31
    49fe:	bb 1f       	adc	r27, r27
    4a00:	66 1f       	adc	r22, r22
    4a02:	77 1f       	adc	r23, r23
    4a04:	88 1f       	adc	r24, r24
    4a06:	c2 f7       	brpl	.-16     	; 0x49f8 <__addsf3x+0x6a>
    4a08:	0e c0       	rjmp	.+28     	; 0x4a26 <__addsf3x+0x98>
    4a0a:	ba 0f       	add	r27, r26
    4a0c:	62 1f       	adc	r22, r18
    4a0e:	73 1f       	adc	r23, r19
    4a10:	84 1f       	adc	r24, r20
    4a12:	48 f4       	brcc	.+18     	; 0x4a26 <__addsf3x+0x98>
    4a14:	87 95       	ror	r24
    4a16:	77 95       	ror	r23
    4a18:	67 95       	ror	r22
    4a1a:	b7 95       	ror	r27
    4a1c:	f7 95       	ror	r31
    4a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <__addsf3x+0x96>
    4a22:	b3 cf       	rjmp	.-154    	; 0x498a <__addsf3+0x1e>
    4a24:	93 95       	inc	r25
    4a26:	88 0f       	add	r24, r24
    4a28:	08 f0       	brcs	.+2      	; 0x4a2c <__addsf3x+0x9e>
    4a2a:	99 27       	eor	r25, r25
    4a2c:	ee 0f       	add	r30, r30
    4a2e:	97 95       	ror	r25
    4a30:	87 95       	ror	r24
    4a32:	08 95       	ret

00004a34 <asin>:
    4a34:	9f 93       	push	r25
    4a36:	9f 77       	andi	r25, 0x7F	; 127
    4a38:	ee e3       	ldi	r30, 0x3E	; 62
    4a3a:	89 37       	cpi	r24, 0x79	; 121
    4a3c:	9e 07       	cpc	r25, r30
    4a3e:	20 f4       	brcc	.+8      	; 0x4a48 <asin+0x14>
    4a40:	ec e8       	ldi	r30, 0x8C	; 140
    4a42:	f0 e0       	ldi	r31, 0x00	; 0
    4a44:	f8 d1       	rcall	.+1008   	; 0x4e36 <__fp_powsodd>
    4a46:	09 c0       	rjmp	.+18     	; 0x4a5a <asin+0x26>
    4a48:	89 d1       	rcall	.+786    	; 0x4d5c <__fp_arccos>
    4a4a:	90 58       	subi	r25, 0x80	; 128
    4a4c:	a2 ea       	ldi	r26, 0xA2	; 162
    4a4e:	2a ed       	ldi	r18, 0xDA	; 218
    4a50:	3f e0       	ldi	r19, 0x0F	; 15
    4a52:	49 ec       	ldi	r20, 0xC9	; 201
    4a54:	5f e3       	ldi	r21, 0x3F	; 63
    4a56:	9b df       	rcall	.-202    	; 0x498e <__addsf3x>
    4a58:	35 d2       	rcall	.+1130   	; 0x4ec4 <__fp_round>
    4a5a:	0f 90       	pop	r0
    4a5c:	07 fc       	sbrc	r0, 7
    4a5e:	90 58       	subi	r25, 0x80	; 128
    4a60:	08 95       	ret
    4a62:	fa d1       	rcall	.+1012   	; 0x4e58 <__fp_pscA>
    4a64:	58 f0       	brcs	.+22     	; 0x4a7c <asin+0x48>
    4a66:	80 e8       	ldi	r24, 0x80	; 128
    4a68:	91 e0       	ldi	r25, 0x01	; 1
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <asin+0x3a>
    4a6c:	9e ef       	ldi	r25, 0xFE	; 254
    4a6e:	fb d1       	rcall	.+1014   	; 0x4e66 <__fp_pscB>
    4a70:	28 f0       	brcs	.+10     	; 0x4a7c <asin+0x48>
    4a72:	40 e8       	ldi	r20, 0x80	; 128
    4a74:	51 e0       	ldi	r21, 0x01	; 1
    4a76:	59 f4       	brne	.+22     	; 0x4a8e <atan2+0xe>
    4a78:	5e ef       	ldi	r21, 0xFE	; 254
    4a7a:	09 c0       	rjmp	.+18     	; 0x4a8e <atan2+0xe>
    4a7c:	b4 c1       	rjmp	.+872    	; 0x4de6 <__fp_nan>
    4a7e:	66 c2       	rjmp	.+1228   	; 0x4f4c <__fp_zero>

00004a80 <atan2>:
    4a80:	e9 2f       	mov	r30, r25
    4a82:	e0 78       	andi	r30, 0x80	; 128
    4a84:	41 d2       	rcall	.+1154   	; 0x4f08 <__fp_split3>
    4a86:	68 f3       	brcs	.-38     	; 0x4a62 <asin+0x2e>
    4a88:	09 2e       	mov	r0, r25
    4a8a:	05 2a       	or	r0, r21
    4a8c:	c1 f3       	breq	.-16     	; 0x4a7e <asin+0x4a>
    4a8e:	26 17       	cp	r18, r22
    4a90:	37 07       	cpc	r19, r23
    4a92:	48 07       	cpc	r20, r24
    4a94:	59 07       	cpc	r21, r25
    4a96:	38 f0       	brcs	.+14     	; 0x4aa6 <atan2+0x26>
    4a98:	0e 2e       	mov	r0, r30
    4a9a:	07 f8       	bld	r0, 7
    4a9c:	e0 25       	eor	r30, r0
    4a9e:	69 f0       	breq	.+26     	; 0x4aba <atan2+0x3a>
    4aa0:	e0 25       	eor	r30, r0
    4aa2:	e0 64       	ori	r30, 0x40	; 64
    4aa4:	0a c0       	rjmp	.+20     	; 0x4aba <atan2+0x3a>
    4aa6:	ef 63       	ori	r30, 0x3F	; 63
    4aa8:	07 f8       	bld	r0, 7
    4aaa:	00 94       	com	r0
    4aac:	07 fa       	bst	r0, 7
    4aae:	db 01       	movw	r26, r22
    4ab0:	b9 01       	movw	r22, r18
    4ab2:	9d 01       	movw	r18, r26
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	ca 01       	movw	r24, r20
    4ab8:	ad 01       	movw	r20, r26
    4aba:	ef 93       	push	r30
    4abc:	4a d0       	rcall	.+148    	; 0x4b52 <__divsf3_pse>
    4abe:	02 d2       	rcall	.+1028   	; 0x4ec4 <__fp_round>
    4ac0:	0a d0       	rcall	.+20     	; 0x4ad6 <atan>
    4ac2:	5f 91       	pop	r21
    4ac4:	55 23       	and	r21, r21
    4ac6:	31 f0       	breq	.+12     	; 0x4ad4 <atan2+0x54>
    4ac8:	2b ed       	ldi	r18, 0xDB	; 219
    4aca:	3f e0       	ldi	r19, 0x0F	; 15
    4acc:	49 e4       	ldi	r20, 0x49	; 73
    4ace:	50 fd       	sbrc	r21, 0
    4ad0:	49 ec       	ldi	r20, 0xC9	; 201
    4ad2:	4c cf       	rjmp	.-360    	; 0x496c <__addsf3>
    4ad4:	08 95       	ret

00004ad6 <atan>:
    4ad6:	df 93       	push	r29
    4ad8:	dd 27       	eor	r29, r29
    4ada:	b9 2f       	mov	r27, r25
    4adc:	bf 77       	andi	r27, 0x7F	; 127
    4ade:	40 e8       	ldi	r20, 0x80	; 128
    4ae0:	5f e3       	ldi	r21, 0x3F	; 63
    4ae2:	16 16       	cp	r1, r22
    4ae4:	17 06       	cpc	r1, r23
    4ae6:	48 07       	cpc	r20, r24
    4ae8:	5b 07       	cpc	r21, r27
    4aea:	10 f4       	brcc	.+4      	; 0x4af0 <atan+0x1a>
    4aec:	d9 2f       	mov	r29, r25
    4aee:	39 d2       	rcall	.+1138   	; 0x4f62 <inverse>
    4af0:	9f 93       	push	r25
    4af2:	8f 93       	push	r24
    4af4:	7f 93       	push	r23
    4af6:	6f 93       	push	r22
    4af8:	32 d3       	rcall	.+1636   	; 0x515e <square>
    4afa:	e0 ea       	ldi	r30, 0xA0	; 160
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	76 d1       	rcall	.+748    	; 0x4dec <__fp_powser>
    4b00:	e1 d1       	rcall	.+962    	; 0x4ec4 <__fp_round>
    4b02:	2f 91       	pop	r18
    4b04:	3f 91       	pop	r19
    4b06:	4f 91       	pop	r20
    4b08:	5f 91       	pop	r21
    4b0a:	3e d2       	rcall	.+1148   	; 0x4f88 <__mulsf3x>
    4b0c:	dd 23       	and	r29, r29
    4b0e:	49 f0       	breq	.+18     	; 0x4b22 <atan+0x4c>
    4b10:	90 58       	subi	r25, 0x80	; 128
    4b12:	a2 ea       	ldi	r26, 0xA2	; 162
    4b14:	2a ed       	ldi	r18, 0xDA	; 218
    4b16:	3f e0       	ldi	r19, 0x0F	; 15
    4b18:	49 ec       	ldi	r20, 0xC9	; 201
    4b1a:	5f e3       	ldi	r21, 0x3F	; 63
    4b1c:	d0 78       	andi	r29, 0x80	; 128
    4b1e:	5d 27       	eor	r21, r29
    4b20:	36 df       	rcall	.-404    	; 0x498e <__addsf3x>
    4b22:	df 91       	pop	r29
    4b24:	cf c1       	rjmp	.+926    	; 0x4ec4 <__fp_round>

00004b26 <__cmpsf2>:
    4b26:	35 d1       	rcall	.+618    	; 0x4d92 <__fp_cmp>
    4b28:	08 f4       	brcc	.+2      	; 0x4b2c <__cmpsf2+0x6>
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	08 95       	ret

00004b2e <cos>:
    4b2e:	a3 d1       	rcall	.+838    	; 0x4e76 <__fp_rempio2>
    4b30:	e3 95       	inc	r30
    4b32:	d9 c1       	rjmp	.+946    	; 0x4ee6 <__fp_sinus>

00004b34 <__divsf3>:
    4b34:	0c d0       	rcall	.+24     	; 0x4b4e <__divsf3x>
    4b36:	c6 c1       	rjmp	.+908    	; 0x4ec4 <__fp_round>
    4b38:	96 d1       	rcall	.+812    	; 0x4e66 <__fp_pscB>
    4b3a:	40 f0       	brcs	.+16     	; 0x4b4c <__divsf3+0x18>
    4b3c:	8d d1       	rcall	.+794    	; 0x4e58 <__fp_pscA>
    4b3e:	30 f0       	brcs	.+12     	; 0x4b4c <__divsf3+0x18>
    4b40:	21 f4       	brne	.+8      	; 0x4b4a <__divsf3+0x16>
    4b42:	5f 3f       	cpi	r21, 0xFF	; 255
    4b44:	19 f0       	breq	.+6      	; 0x4b4c <__divsf3+0x18>
    4b46:	49 c1       	rjmp	.+658    	; 0x4dda <__fp_inf>
    4b48:	51 11       	cpse	r21, r1
    4b4a:	01 c2       	rjmp	.+1026   	; 0x4f4e <__fp_szero>
    4b4c:	4c c1       	rjmp	.+664    	; 0x4de6 <__fp_nan>

00004b4e <__divsf3x>:
    4b4e:	dc d1       	rcall	.+952    	; 0x4f08 <__fp_split3>
    4b50:	98 f3       	brcs	.-26     	; 0x4b38 <__divsf3+0x4>

00004b52 <__divsf3_pse>:
    4b52:	99 23       	and	r25, r25
    4b54:	c9 f3       	breq	.-14     	; 0x4b48 <__divsf3+0x14>
    4b56:	55 23       	and	r21, r21
    4b58:	b1 f3       	breq	.-20     	; 0x4b46 <__divsf3+0x12>
    4b5a:	95 1b       	sub	r25, r21
    4b5c:	55 0b       	sbc	r21, r21
    4b5e:	bb 27       	eor	r27, r27
    4b60:	aa 27       	eor	r26, r26
    4b62:	62 17       	cp	r22, r18
    4b64:	73 07       	cpc	r23, r19
    4b66:	84 07       	cpc	r24, r20
    4b68:	38 f0       	brcs	.+14     	; 0x4b78 <__divsf3_pse+0x26>
    4b6a:	9f 5f       	subi	r25, 0xFF	; 255
    4b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b6e:	22 0f       	add	r18, r18
    4b70:	33 1f       	adc	r19, r19
    4b72:	44 1f       	adc	r20, r20
    4b74:	aa 1f       	adc	r26, r26
    4b76:	a9 f3       	breq	.-22     	; 0x4b62 <__divsf3_pse+0x10>
    4b78:	33 d0       	rcall	.+102    	; 0x4be0 <__divsf3_pse+0x8e>
    4b7a:	0e 2e       	mov	r0, r30
    4b7c:	3a f0       	brmi	.+14     	; 0x4b8c <__divsf3_pse+0x3a>
    4b7e:	e0 e8       	ldi	r30, 0x80	; 128
    4b80:	30 d0       	rcall	.+96     	; 0x4be2 <__divsf3_pse+0x90>
    4b82:	91 50       	subi	r25, 0x01	; 1
    4b84:	50 40       	sbci	r21, 0x00	; 0
    4b86:	e6 95       	lsr	r30
    4b88:	00 1c       	adc	r0, r0
    4b8a:	ca f7       	brpl	.-14     	; 0x4b7e <__divsf3_pse+0x2c>
    4b8c:	29 d0       	rcall	.+82     	; 0x4be0 <__divsf3_pse+0x8e>
    4b8e:	fe 2f       	mov	r31, r30
    4b90:	27 d0       	rcall	.+78     	; 0x4be0 <__divsf3_pse+0x8e>
    4b92:	66 0f       	add	r22, r22
    4b94:	77 1f       	adc	r23, r23
    4b96:	88 1f       	adc	r24, r24
    4b98:	bb 1f       	adc	r27, r27
    4b9a:	26 17       	cp	r18, r22
    4b9c:	37 07       	cpc	r19, r23
    4b9e:	48 07       	cpc	r20, r24
    4ba0:	ab 07       	cpc	r26, r27
    4ba2:	b0 e8       	ldi	r27, 0x80	; 128
    4ba4:	09 f0       	breq	.+2      	; 0x4ba8 <__divsf3_pse+0x56>
    4ba6:	bb 0b       	sbc	r27, r27
    4ba8:	80 2d       	mov	r24, r0
    4baa:	bf 01       	movw	r22, r30
    4bac:	ff 27       	eor	r31, r31
    4bae:	93 58       	subi	r25, 0x83	; 131
    4bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4bb2:	2a f0       	brmi	.+10     	; 0x4bbe <__divsf3_pse+0x6c>
    4bb4:	9e 3f       	cpi	r25, 0xFE	; 254
    4bb6:	51 05       	cpc	r21, r1
    4bb8:	68 f0       	brcs	.+26     	; 0x4bd4 <__divsf3_pse+0x82>
    4bba:	0f c1       	rjmp	.+542    	; 0x4dda <__fp_inf>
    4bbc:	c8 c1       	rjmp	.+912    	; 0x4f4e <__fp_szero>
    4bbe:	5f 3f       	cpi	r21, 0xFF	; 255
    4bc0:	ec f3       	brlt	.-6      	; 0x4bbc <__divsf3_pse+0x6a>
    4bc2:	98 3e       	cpi	r25, 0xE8	; 232
    4bc4:	dc f3       	brlt	.-10     	; 0x4bbc <__divsf3_pse+0x6a>
    4bc6:	86 95       	lsr	r24
    4bc8:	77 95       	ror	r23
    4bca:	67 95       	ror	r22
    4bcc:	b7 95       	ror	r27
    4bce:	f7 95       	ror	r31
    4bd0:	9f 5f       	subi	r25, 0xFF	; 255
    4bd2:	c9 f7       	brne	.-14     	; 0x4bc6 <__divsf3_pse+0x74>
    4bd4:	88 0f       	add	r24, r24
    4bd6:	91 1d       	adc	r25, r1
    4bd8:	96 95       	lsr	r25
    4bda:	87 95       	ror	r24
    4bdc:	97 f9       	bld	r25, 7
    4bde:	08 95       	ret
    4be0:	e1 e0       	ldi	r30, 0x01	; 1
    4be2:	66 0f       	add	r22, r22
    4be4:	77 1f       	adc	r23, r23
    4be6:	88 1f       	adc	r24, r24
    4be8:	bb 1f       	adc	r27, r27
    4bea:	62 17       	cp	r22, r18
    4bec:	73 07       	cpc	r23, r19
    4bee:	84 07       	cpc	r24, r20
    4bf0:	ba 07       	cpc	r27, r26
    4bf2:	20 f0       	brcs	.+8      	; 0x4bfc <__divsf3_pse+0xaa>
    4bf4:	62 1b       	sub	r22, r18
    4bf6:	73 0b       	sbc	r23, r19
    4bf8:	84 0b       	sbc	r24, r20
    4bfa:	ba 0b       	sbc	r27, r26
    4bfc:	ee 1f       	adc	r30, r30
    4bfe:	88 f7       	brcc	.-30     	; 0x4be2 <__divsf3_pse+0x90>
    4c00:	e0 95       	com	r30
    4c02:	08 95       	ret

00004c04 <__fixsfsi>:
    4c04:	04 d0       	rcall	.+8      	; 0x4c0e <__fixunssfsi>
    4c06:	68 94       	set
    4c08:	b1 11       	cpse	r27, r1
    4c0a:	a1 c1       	rjmp	.+834    	; 0x4f4e <__fp_szero>
    4c0c:	08 95       	ret

00004c0e <__fixunssfsi>:
    4c0e:	84 d1       	rcall	.+776    	; 0x4f18 <__fp_splitA>
    4c10:	88 f0       	brcs	.+34     	; 0x4c34 <__fixunssfsi+0x26>
    4c12:	9f 57       	subi	r25, 0x7F	; 127
    4c14:	90 f0       	brcs	.+36     	; 0x4c3a <__fixunssfsi+0x2c>
    4c16:	b9 2f       	mov	r27, r25
    4c18:	99 27       	eor	r25, r25
    4c1a:	b7 51       	subi	r27, 0x17	; 23
    4c1c:	a0 f0       	brcs	.+40     	; 0x4c46 <__fixunssfsi+0x38>
    4c1e:	d1 f0       	breq	.+52     	; 0x4c54 <__fixunssfsi+0x46>
    4c20:	66 0f       	add	r22, r22
    4c22:	77 1f       	adc	r23, r23
    4c24:	88 1f       	adc	r24, r24
    4c26:	99 1f       	adc	r25, r25
    4c28:	1a f0       	brmi	.+6      	; 0x4c30 <__fixunssfsi+0x22>
    4c2a:	ba 95       	dec	r27
    4c2c:	c9 f7       	brne	.-14     	; 0x4c20 <__fixunssfsi+0x12>
    4c2e:	12 c0       	rjmp	.+36     	; 0x4c54 <__fixunssfsi+0x46>
    4c30:	b1 30       	cpi	r27, 0x01	; 1
    4c32:	81 f0       	breq	.+32     	; 0x4c54 <__fixunssfsi+0x46>
    4c34:	8b d1       	rcall	.+790    	; 0x4f4c <__fp_zero>
    4c36:	b1 e0       	ldi	r27, 0x01	; 1
    4c38:	08 95       	ret
    4c3a:	88 c1       	rjmp	.+784    	; 0x4f4c <__fp_zero>
    4c3c:	67 2f       	mov	r22, r23
    4c3e:	78 2f       	mov	r23, r24
    4c40:	88 27       	eor	r24, r24
    4c42:	b8 5f       	subi	r27, 0xF8	; 248
    4c44:	39 f0       	breq	.+14     	; 0x4c54 <__fixunssfsi+0x46>
    4c46:	b9 3f       	cpi	r27, 0xF9	; 249
    4c48:	cc f3       	brlt	.-14     	; 0x4c3c <__fixunssfsi+0x2e>
    4c4a:	86 95       	lsr	r24
    4c4c:	77 95       	ror	r23
    4c4e:	67 95       	ror	r22
    4c50:	b3 95       	inc	r27
    4c52:	d9 f7       	brne	.-10     	; 0x4c4a <__fixunssfsi+0x3c>
    4c54:	3e f4       	brtc	.+14     	; 0x4c64 <__fixunssfsi+0x56>
    4c56:	90 95       	com	r25
    4c58:	80 95       	com	r24
    4c5a:	70 95       	com	r23
    4c5c:	61 95       	neg	r22
    4c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c60:	8f 4f       	sbci	r24, 0xFF	; 255
    4c62:	9f 4f       	sbci	r25, 0xFF	; 255
    4c64:	08 95       	ret

00004c66 <__floatunsisf>:
    4c66:	e8 94       	clt
    4c68:	09 c0       	rjmp	.+18     	; 0x4c7c <__floatsisf+0x12>

00004c6a <__floatsisf>:
    4c6a:	97 fb       	bst	r25, 7
    4c6c:	3e f4       	brtc	.+14     	; 0x4c7c <__floatsisf+0x12>
    4c6e:	90 95       	com	r25
    4c70:	80 95       	com	r24
    4c72:	70 95       	com	r23
    4c74:	61 95       	neg	r22
    4c76:	7f 4f       	sbci	r23, 0xFF	; 255
    4c78:	8f 4f       	sbci	r24, 0xFF	; 255
    4c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7c:	99 23       	and	r25, r25
    4c7e:	a9 f0       	breq	.+42     	; 0x4caa <__floatsisf+0x40>
    4c80:	f9 2f       	mov	r31, r25
    4c82:	96 e9       	ldi	r25, 0x96	; 150
    4c84:	bb 27       	eor	r27, r27
    4c86:	93 95       	inc	r25
    4c88:	f6 95       	lsr	r31
    4c8a:	87 95       	ror	r24
    4c8c:	77 95       	ror	r23
    4c8e:	67 95       	ror	r22
    4c90:	b7 95       	ror	r27
    4c92:	f1 11       	cpse	r31, r1
    4c94:	f8 cf       	rjmp	.-16     	; 0x4c86 <__floatsisf+0x1c>
    4c96:	fa f4       	brpl	.+62     	; 0x4cd6 <__floatsisf+0x6c>
    4c98:	bb 0f       	add	r27, r27
    4c9a:	11 f4       	brne	.+4      	; 0x4ca0 <__floatsisf+0x36>
    4c9c:	60 ff       	sbrs	r22, 0
    4c9e:	1b c0       	rjmp	.+54     	; 0x4cd6 <__floatsisf+0x6c>
    4ca0:	6f 5f       	subi	r22, 0xFF	; 255
    4ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca8:	16 c0       	rjmp	.+44     	; 0x4cd6 <__floatsisf+0x6c>
    4caa:	88 23       	and	r24, r24
    4cac:	11 f0       	breq	.+4      	; 0x4cb2 <__floatsisf+0x48>
    4cae:	96 e9       	ldi	r25, 0x96	; 150
    4cb0:	11 c0       	rjmp	.+34     	; 0x4cd4 <__floatsisf+0x6a>
    4cb2:	77 23       	and	r23, r23
    4cb4:	21 f0       	breq	.+8      	; 0x4cbe <__floatsisf+0x54>
    4cb6:	9e e8       	ldi	r25, 0x8E	; 142
    4cb8:	87 2f       	mov	r24, r23
    4cba:	76 2f       	mov	r23, r22
    4cbc:	05 c0       	rjmp	.+10     	; 0x4cc8 <__floatsisf+0x5e>
    4cbe:	66 23       	and	r22, r22
    4cc0:	71 f0       	breq	.+28     	; 0x4cde <__floatsisf+0x74>
    4cc2:	96 e8       	ldi	r25, 0x86	; 134
    4cc4:	86 2f       	mov	r24, r22
    4cc6:	70 e0       	ldi	r23, 0x00	; 0
    4cc8:	60 e0       	ldi	r22, 0x00	; 0
    4cca:	2a f0       	brmi	.+10     	; 0x4cd6 <__floatsisf+0x6c>
    4ccc:	9a 95       	dec	r25
    4cce:	66 0f       	add	r22, r22
    4cd0:	77 1f       	adc	r23, r23
    4cd2:	88 1f       	adc	r24, r24
    4cd4:	da f7       	brpl	.-10     	; 0x4ccc <__floatsisf+0x62>
    4cd6:	88 0f       	add	r24, r24
    4cd8:	96 95       	lsr	r25
    4cda:	87 95       	ror	r24
    4cdc:	97 f9       	bld	r25, 7
    4cde:	08 95       	ret

00004ce0 <__floatundisf>:
    4ce0:	e8 94       	clt

00004ce2 <__fp_di2sf>:
    4ce2:	f9 2f       	mov	r31, r25
    4ce4:	96 eb       	ldi	r25, 0xB6	; 182
    4ce6:	ff 23       	and	r31, r31
    4ce8:	81 f0       	breq	.+32     	; 0x4d0a <__fp_di2sf+0x28>
    4cea:	12 16       	cp	r1, r18
    4cec:	13 06       	cpc	r1, r19
    4cee:	14 06       	cpc	r1, r20
    4cf0:	44 0b       	sbc	r20, r20
    4cf2:	93 95       	inc	r25
    4cf4:	f6 95       	lsr	r31
    4cf6:	87 95       	ror	r24
    4cf8:	77 95       	ror	r23
    4cfa:	67 95       	ror	r22
    4cfc:	57 95       	ror	r21
    4cfe:	40 40       	sbci	r20, 0x00	; 0
    4d00:	ff 23       	and	r31, r31
    4d02:	b9 f7       	brne	.-18     	; 0x4cf2 <__fp_di2sf+0x10>
    4d04:	1b c0       	rjmp	.+54     	; 0x4d3c <__fp_di2sf+0x5a>
    4d06:	99 27       	eor	r25, r25
    4d08:	08 95       	ret
    4d0a:	88 23       	and	r24, r24
    4d0c:	51 f4       	brne	.+20     	; 0x4d22 <__fp_di2sf+0x40>
    4d0e:	98 50       	subi	r25, 0x08	; 8
    4d10:	d2 f7       	brpl	.-12     	; 0x4d06 <__fp_di2sf+0x24>
    4d12:	87 2b       	or	r24, r23
    4d14:	76 2f       	mov	r23, r22
    4d16:	65 2f       	mov	r22, r21
    4d18:	54 2f       	mov	r21, r20
    4d1a:	43 2f       	mov	r20, r19
    4d1c:	32 2f       	mov	r19, r18
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	b1 f3       	breq	.-20     	; 0x4d0e <__fp_di2sf+0x2c>
    4d22:	12 16       	cp	r1, r18
    4d24:	13 06       	cpc	r1, r19
    4d26:	14 06       	cpc	r1, r20
    4d28:	44 0b       	sbc	r20, r20
    4d2a:	88 23       	and	r24, r24
    4d2c:	3a f0       	brmi	.+14     	; 0x4d3c <__fp_di2sf+0x5a>
    4d2e:	9a 95       	dec	r25
    4d30:	44 0f       	add	r20, r20
    4d32:	55 1f       	adc	r21, r21
    4d34:	66 1f       	adc	r22, r22
    4d36:	77 1f       	adc	r23, r23
    4d38:	88 1f       	adc	r24, r24
    4d3a:	ca f7       	brpl	.-14     	; 0x4d2e <__fp_di2sf+0x4c>
    4d3c:	55 23       	and	r21, r21
    4d3e:	4a f4       	brpl	.+18     	; 0x4d52 <__fp_di2sf+0x70>
    4d40:	44 0f       	add	r20, r20
    4d42:	55 1f       	adc	r21, r21
    4d44:	11 f4       	brne	.+4      	; 0x4d4a <__fp_di2sf+0x68>
    4d46:	60 ff       	sbrs	r22, 0
    4d48:	04 c0       	rjmp	.+8      	; 0x4d52 <__fp_di2sf+0x70>
    4d4a:	6f 5f       	subi	r22, 0xFF	; 255
    4d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d4e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d50:	9f 4f       	sbci	r25, 0xFF	; 255
    4d52:	88 0f       	add	r24, r24
    4d54:	96 95       	lsr	r25
    4d56:	87 95       	ror	r24
    4d58:	97 f9       	bld	r25, 7
    4d5a:	08 95       	ret

00004d5c <__fp_arccos>:
    4d5c:	df 93       	push	r29
    4d5e:	cf 93       	push	r28
    4d60:	1f 93       	push	r17
    4d62:	0f 93       	push	r16
    4d64:	8b 01       	movw	r16, r22
    4d66:	ec 01       	movw	r28, r24
    4d68:	ed ec       	ldi	r30, 0xCD	; 205
    4d6a:	f0 e0       	ldi	r31, 0x00	; 0
    4d6c:	3f d0       	rcall	.+126    	; 0x4dec <__fp_powser>
    4d6e:	aa d0       	rcall	.+340    	; 0x4ec4 <__fp_round>
    4d70:	98 01       	movw	r18, r16
    4d72:	ae 01       	movw	r20, r28
    4d74:	8b 01       	movw	r16, r22
    4d76:	ec 01       	movw	r28, r24
    4d78:	60 e0       	ldi	r22, 0x00	; 0
    4d7a:	70 e0       	ldi	r23, 0x00	; 0
    4d7c:	80 e8       	ldi	r24, 0x80	; 128
    4d7e:	9f e3       	ldi	r25, 0x3F	; 63
    4d80:	f4 dd       	rcall	.-1048   	; 0x496a <__subsf3>
    4d82:	af d1       	rcall	.+862    	; 0x50e2 <sqrt>
    4d84:	98 01       	movw	r18, r16
    4d86:	ae 01       	movw	r20, r28
    4d88:	0f 91       	pop	r16
    4d8a:	1f 91       	pop	r17
    4d8c:	cf 91       	pop	r28
    4d8e:	df 91       	pop	r29
    4d90:	fb c0       	rjmp	.+502    	; 0x4f88 <__mulsf3x>

00004d92 <__fp_cmp>:
    4d92:	99 0f       	add	r25, r25
    4d94:	00 08       	sbc	r0, r0
    4d96:	55 0f       	add	r21, r21
    4d98:	aa 0b       	sbc	r26, r26
    4d9a:	e0 e8       	ldi	r30, 0x80	; 128
    4d9c:	fe ef       	ldi	r31, 0xFE	; 254
    4d9e:	16 16       	cp	r1, r22
    4da0:	17 06       	cpc	r1, r23
    4da2:	e8 07       	cpc	r30, r24
    4da4:	f9 07       	cpc	r31, r25
    4da6:	c0 f0       	brcs	.+48     	; 0x4dd8 <__fp_cmp+0x46>
    4da8:	12 16       	cp	r1, r18
    4daa:	13 06       	cpc	r1, r19
    4dac:	e4 07       	cpc	r30, r20
    4dae:	f5 07       	cpc	r31, r21
    4db0:	98 f0       	brcs	.+38     	; 0x4dd8 <__fp_cmp+0x46>
    4db2:	62 1b       	sub	r22, r18
    4db4:	73 0b       	sbc	r23, r19
    4db6:	84 0b       	sbc	r24, r20
    4db8:	95 0b       	sbc	r25, r21
    4dba:	39 f4       	brne	.+14     	; 0x4dca <__fp_cmp+0x38>
    4dbc:	0a 26       	eor	r0, r26
    4dbe:	61 f0       	breq	.+24     	; 0x4dd8 <__fp_cmp+0x46>
    4dc0:	23 2b       	or	r18, r19
    4dc2:	24 2b       	or	r18, r20
    4dc4:	25 2b       	or	r18, r21
    4dc6:	21 f4       	brne	.+8      	; 0x4dd0 <__fp_cmp+0x3e>
    4dc8:	08 95       	ret
    4dca:	0a 26       	eor	r0, r26
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <__fp_cmp+0x3e>
    4dce:	a1 40       	sbci	r26, 0x01	; 1
    4dd0:	a6 95       	lsr	r26
    4dd2:	8f ef       	ldi	r24, 0xFF	; 255
    4dd4:	81 1d       	adc	r24, r1
    4dd6:	81 1d       	adc	r24, r1
    4dd8:	08 95       	ret

00004dda <__fp_inf>:
    4dda:	97 f9       	bld	r25, 7
    4ddc:	9f 67       	ori	r25, 0x7F	; 127
    4dde:	80 e8       	ldi	r24, 0x80	; 128
    4de0:	70 e0       	ldi	r23, 0x00	; 0
    4de2:	60 e0       	ldi	r22, 0x00	; 0
    4de4:	08 95       	ret

00004de6 <__fp_nan>:
    4de6:	9f ef       	ldi	r25, 0xFF	; 255
    4de8:	80 ec       	ldi	r24, 0xC0	; 192
    4dea:	08 95       	ret

00004dec <__fp_powser>:
    4dec:	df 93       	push	r29
    4dee:	cf 93       	push	r28
    4df0:	1f 93       	push	r17
    4df2:	0f 93       	push	r16
    4df4:	ff 92       	push	r15
    4df6:	ef 92       	push	r14
    4df8:	df 92       	push	r13
    4dfa:	7b 01       	movw	r14, r22
    4dfc:	8c 01       	movw	r16, r24
    4dfe:	68 94       	set
    4e00:	05 c0       	rjmp	.+10     	; 0x4e0c <__fp_powser+0x20>
    4e02:	da 2e       	mov	r13, r26
    4e04:	ef 01       	movw	r28, r30
    4e06:	c0 d0       	rcall	.+384    	; 0x4f88 <__mulsf3x>
    4e08:	fe 01       	movw	r30, r28
    4e0a:	e8 94       	clt
    4e0c:	a5 91       	lpm	r26, Z+
    4e0e:	25 91       	lpm	r18, Z+
    4e10:	35 91       	lpm	r19, Z+
    4e12:	45 91       	lpm	r20, Z+
    4e14:	55 91       	lpm	r21, Z+
    4e16:	ae f3       	brts	.-22     	; 0x4e02 <__fp_powser+0x16>
    4e18:	ef 01       	movw	r28, r30
    4e1a:	b9 dd       	rcall	.-1166   	; 0x498e <__addsf3x>
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	97 01       	movw	r18, r14
    4e20:	a8 01       	movw	r20, r16
    4e22:	da 94       	dec	r13
    4e24:	79 f7       	brne	.-34     	; 0x4e04 <__fp_powser+0x18>
    4e26:	df 90       	pop	r13
    4e28:	ef 90       	pop	r14
    4e2a:	ff 90       	pop	r15
    4e2c:	0f 91       	pop	r16
    4e2e:	1f 91       	pop	r17
    4e30:	cf 91       	pop	r28
    4e32:	df 91       	pop	r29
    4e34:	08 95       	ret

00004e36 <__fp_powsodd>:
    4e36:	9f 93       	push	r25
    4e38:	8f 93       	push	r24
    4e3a:	7f 93       	push	r23
    4e3c:	6f 93       	push	r22
    4e3e:	ff 93       	push	r31
    4e40:	ef 93       	push	r30
    4e42:	9b 01       	movw	r18, r22
    4e44:	ac 01       	movw	r20, r24
    4e46:	94 d0       	rcall	.+296    	; 0x4f70 <__mulsf3>
    4e48:	ef 91       	pop	r30
    4e4a:	ff 91       	pop	r31
    4e4c:	cf df       	rcall	.-98     	; 0x4dec <__fp_powser>
    4e4e:	2f 91       	pop	r18
    4e50:	3f 91       	pop	r19
    4e52:	4f 91       	pop	r20
    4e54:	5f 91       	pop	r21
    4e56:	8c c0       	rjmp	.+280    	; 0x4f70 <__mulsf3>

00004e58 <__fp_pscA>:
    4e58:	00 24       	eor	r0, r0
    4e5a:	0a 94       	dec	r0
    4e5c:	16 16       	cp	r1, r22
    4e5e:	17 06       	cpc	r1, r23
    4e60:	18 06       	cpc	r1, r24
    4e62:	09 06       	cpc	r0, r25
    4e64:	08 95       	ret

00004e66 <__fp_pscB>:
    4e66:	00 24       	eor	r0, r0
    4e68:	0a 94       	dec	r0
    4e6a:	12 16       	cp	r1, r18
    4e6c:	13 06       	cpc	r1, r19
    4e6e:	14 06       	cpc	r1, r20
    4e70:	05 06       	cpc	r0, r21
    4e72:	08 95       	ret
    4e74:	b8 cf       	rjmp	.-144    	; 0x4de6 <__fp_nan>

00004e76 <__fp_rempio2>:
    4e76:	50 d0       	rcall	.+160    	; 0x4f18 <__fp_splitA>
    4e78:	e8 f3       	brcs	.-6      	; 0x4e74 <__fp_pscB+0xe>
    4e7a:	e8 94       	clt
    4e7c:	e0 e0       	ldi	r30, 0x00	; 0
    4e7e:	bb 27       	eor	r27, r27
    4e80:	9f 57       	subi	r25, 0x7F	; 127
    4e82:	f0 f0       	brcs	.+60     	; 0x4ec0 <__fp_rempio2+0x4a>
    4e84:	2a ed       	ldi	r18, 0xDA	; 218
    4e86:	3f e0       	ldi	r19, 0x0F	; 15
    4e88:	49 ec       	ldi	r20, 0xC9	; 201
    4e8a:	06 c0       	rjmp	.+12     	; 0x4e98 <__fp_rempio2+0x22>
    4e8c:	ee 0f       	add	r30, r30
    4e8e:	bb 0f       	add	r27, r27
    4e90:	66 1f       	adc	r22, r22
    4e92:	77 1f       	adc	r23, r23
    4e94:	88 1f       	adc	r24, r24
    4e96:	28 f0       	brcs	.+10     	; 0x4ea2 <__fp_rempio2+0x2c>
    4e98:	b2 3a       	cpi	r27, 0xA2	; 162
    4e9a:	62 07       	cpc	r22, r18
    4e9c:	73 07       	cpc	r23, r19
    4e9e:	84 07       	cpc	r24, r20
    4ea0:	28 f0       	brcs	.+10     	; 0x4eac <__fp_rempio2+0x36>
    4ea2:	b2 5a       	subi	r27, 0xA2	; 162
    4ea4:	62 0b       	sbc	r22, r18
    4ea6:	73 0b       	sbc	r23, r19
    4ea8:	84 0b       	sbc	r24, r20
    4eaa:	e3 95       	inc	r30
    4eac:	9a 95       	dec	r25
    4eae:	72 f7       	brpl	.-36     	; 0x4e8c <__fp_rempio2+0x16>
    4eb0:	80 38       	cpi	r24, 0x80	; 128
    4eb2:	30 f4       	brcc	.+12     	; 0x4ec0 <__fp_rempio2+0x4a>
    4eb4:	9a 95       	dec	r25
    4eb6:	bb 0f       	add	r27, r27
    4eb8:	66 1f       	adc	r22, r22
    4eba:	77 1f       	adc	r23, r23
    4ebc:	88 1f       	adc	r24, r24
    4ebe:	d2 f7       	brpl	.-12     	; 0x4eb4 <__fp_rempio2+0x3e>
    4ec0:	90 48       	sbci	r25, 0x80	; 128
    4ec2:	83 c1       	rjmp	.+774    	; 0x51ca <__fp_mpack_finite>

00004ec4 <__fp_round>:
    4ec4:	09 2e       	mov	r0, r25
    4ec6:	03 94       	inc	r0
    4ec8:	00 0c       	add	r0, r0
    4eca:	11 f4       	brne	.+4      	; 0x4ed0 <__fp_round+0xc>
    4ecc:	88 23       	and	r24, r24
    4ece:	52 f0       	brmi	.+20     	; 0x4ee4 <__fp_round+0x20>
    4ed0:	bb 0f       	add	r27, r27
    4ed2:	40 f4       	brcc	.+16     	; 0x4ee4 <__fp_round+0x20>
    4ed4:	bf 2b       	or	r27, r31
    4ed6:	11 f4       	brne	.+4      	; 0x4edc <__fp_round+0x18>
    4ed8:	60 ff       	sbrs	r22, 0
    4eda:	04 c0       	rjmp	.+8      	; 0x4ee4 <__fp_round+0x20>
    4edc:	6f 5f       	subi	r22, 0xFF	; 255
    4ede:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee4:	08 95       	ret

00004ee6 <__fp_sinus>:
    4ee6:	ef 93       	push	r30
    4ee8:	e0 ff       	sbrs	r30, 0
    4eea:	06 c0       	rjmp	.+12     	; 0x4ef8 <__fp_sinus+0x12>
    4eec:	a2 ea       	ldi	r26, 0xA2	; 162
    4eee:	2a ed       	ldi	r18, 0xDA	; 218
    4ef0:	3f e0       	ldi	r19, 0x0F	; 15
    4ef2:	49 ec       	ldi	r20, 0xC9	; 201
    4ef4:	5f eb       	ldi	r21, 0xBF	; 191
    4ef6:	4b dd       	rcall	.-1386   	; 0x498e <__addsf3x>
    4ef8:	e5 df       	rcall	.-54     	; 0x4ec4 <__fp_round>
    4efa:	0f 90       	pop	r0
    4efc:	03 94       	inc	r0
    4efe:	01 fc       	sbrc	r0, 1
    4f00:	90 58       	subi	r25, 0x80	; 128
    4f02:	e5 ef       	ldi	r30, 0xF5	; 245
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	97 cf       	rjmp	.-210    	; 0x4e36 <__fp_powsodd>

00004f08 <__fp_split3>:
    4f08:	57 fd       	sbrc	r21, 7
    4f0a:	90 58       	subi	r25, 0x80	; 128
    4f0c:	44 0f       	add	r20, r20
    4f0e:	55 1f       	adc	r21, r21
    4f10:	59 f0       	breq	.+22     	; 0x4f28 <__fp_splitA+0x10>
    4f12:	5f 3f       	cpi	r21, 0xFF	; 255
    4f14:	71 f0       	breq	.+28     	; 0x4f32 <__fp_splitA+0x1a>
    4f16:	47 95       	ror	r20

00004f18 <__fp_splitA>:
    4f18:	88 0f       	add	r24, r24
    4f1a:	97 fb       	bst	r25, 7
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	61 f0       	breq	.+24     	; 0x4f38 <__fp_splitA+0x20>
    4f20:	9f 3f       	cpi	r25, 0xFF	; 255
    4f22:	79 f0       	breq	.+30     	; 0x4f42 <__fp_splitA+0x2a>
    4f24:	87 95       	ror	r24
    4f26:	08 95       	ret
    4f28:	12 16       	cp	r1, r18
    4f2a:	13 06       	cpc	r1, r19
    4f2c:	14 06       	cpc	r1, r20
    4f2e:	55 1f       	adc	r21, r21
    4f30:	f2 cf       	rjmp	.-28     	; 0x4f16 <__fp_split3+0xe>
    4f32:	46 95       	lsr	r20
    4f34:	f1 df       	rcall	.-30     	; 0x4f18 <__fp_splitA>
    4f36:	08 c0       	rjmp	.+16     	; 0x4f48 <__fp_splitA+0x30>
    4f38:	16 16       	cp	r1, r22
    4f3a:	17 06       	cpc	r1, r23
    4f3c:	18 06       	cpc	r1, r24
    4f3e:	99 1f       	adc	r25, r25
    4f40:	f1 cf       	rjmp	.-30     	; 0x4f24 <__fp_splitA+0xc>
    4f42:	86 95       	lsr	r24
    4f44:	71 05       	cpc	r23, r1
    4f46:	61 05       	cpc	r22, r1
    4f48:	08 94       	sec
    4f4a:	08 95       	ret

00004f4c <__fp_zero>:
    4f4c:	e8 94       	clt

00004f4e <__fp_szero>:
    4f4e:	bb 27       	eor	r27, r27
    4f50:	66 27       	eor	r22, r22
    4f52:	77 27       	eor	r23, r23
    4f54:	cb 01       	movw	r24, r22
    4f56:	97 f9       	bld	r25, 7
    4f58:	08 95       	ret

00004f5a <__gesf2>:
    4f5a:	1b df       	rcall	.-458    	; 0x4d92 <__fp_cmp>
    4f5c:	08 f4       	brcc	.+2      	; 0x4f60 <__gesf2+0x6>
    4f5e:	8f ef       	ldi	r24, 0xFF	; 255
    4f60:	08 95       	ret

00004f62 <inverse>:
    4f62:	9b 01       	movw	r18, r22
    4f64:	ac 01       	movw	r20, r24
    4f66:	60 e0       	ldi	r22, 0x00	; 0
    4f68:	70 e0       	ldi	r23, 0x00	; 0
    4f6a:	80 e8       	ldi	r24, 0x80	; 128
    4f6c:	9f e3       	ldi	r25, 0x3F	; 63
    4f6e:	e2 cd       	rjmp	.-1084   	; 0x4b34 <__divsf3>

00004f70 <__mulsf3>:
    4f70:	0b d0       	rcall	.+22     	; 0x4f88 <__mulsf3x>
    4f72:	a8 cf       	rjmp	.-176    	; 0x4ec4 <__fp_round>
    4f74:	71 df       	rcall	.-286    	; 0x4e58 <__fp_pscA>
    4f76:	28 f0       	brcs	.+10     	; 0x4f82 <__mulsf3+0x12>
    4f78:	76 df       	rcall	.-276    	; 0x4e66 <__fp_pscB>
    4f7a:	18 f0       	brcs	.+6      	; 0x4f82 <__mulsf3+0x12>
    4f7c:	95 23       	and	r25, r21
    4f7e:	09 f0       	breq	.+2      	; 0x4f82 <__mulsf3+0x12>
    4f80:	2c cf       	rjmp	.-424    	; 0x4dda <__fp_inf>
    4f82:	31 cf       	rjmp	.-414    	; 0x4de6 <__fp_nan>
    4f84:	11 24       	eor	r1, r1
    4f86:	e3 cf       	rjmp	.-58     	; 0x4f4e <__fp_szero>

00004f88 <__mulsf3x>:
    4f88:	bf df       	rcall	.-130    	; 0x4f08 <__fp_split3>
    4f8a:	a0 f3       	brcs	.-24     	; 0x4f74 <__mulsf3+0x4>

00004f8c <__mulsf3_pse>:
    4f8c:	95 9f       	mul	r25, r21
    4f8e:	d1 f3       	breq	.-12     	; 0x4f84 <__mulsf3+0x14>
    4f90:	95 0f       	add	r25, r21
    4f92:	50 e0       	ldi	r21, 0x00	; 0
    4f94:	55 1f       	adc	r21, r21
    4f96:	62 9f       	mul	r22, r18
    4f98:	f0 01       	movw	r30, r0
    4f9a:	72 9f       	mul	r23, r18
    4f9c:	bb 27       	eor	r27, r27
    4f9e:	f0 0d       	add	r31, r0
    4fa0:	b1 1d       	adc	r27, r1
    4fa2:	63 9f       	mul	r22, r19
    4fa4:	aa 27       	eor	r26, r26
    4fa6:	f0 0d       	add	r31, r0
    4fa8:	b1 1d       	adc	r27, r1
    4faa:	aa 1f       	adc	r26, r26
    4fac:	64 9f       	mul	r22, r20
    4fae:	66 27       	eor	r22, r22
    4fb0:	b0 0d       	add	r27, r0
    4fb2:	a1 1d       	adc	r26, r1
    4fb4:	66 1f       	adc	r22, r22
    4fb6:	82 9f       	mul	r24, r18
    4fb8:	22 27       	eor	r18, r18
    4fba:	b0 0d       	add	r27, r0
    4fbc:	a1 1d       	adc	r26, r1
    4fbe:	62 1f       	adc	r22, r18
    4fc0:	73 9f       	mul	r23, r19
    4fc2:	b0 0d       	add	r27, r0
    4fc4:	a1 1d       	adc	r26, r1
    4fc6:	62 1f       	adc	r22, r18
    4fc8:	83 9f       	mul	r24, r19
    4fca:	a0 0d       	add	r26, r0
    4fcc:	61 1d       	adc	r22, r1
    4fce:	22 1f       	adc	r18, r18
    4fd0:	74 9f       	mul	r23, r20
    4fd2:	33 27       	eor	r19, r19
    4fd4:	a0 0d       	add	r26, r0
    4fd6:	61 1d       	adc	r22, r1
    4fd8:	23 1f       	adc	r18, r19
    4fda:	84 9f       	mul	r24, r20
    4fdc:	60 0d       	add	r22, r0
    4fde:	21 1d       	adc	r18, r1
    4fe0:	82 2f       	mov	r24, r18
    4fe2:	76 2f       	mov	r23, r22
    4fe4:	6a 2f       	mov	r22, r26
    4fe6:	11 24       	eor	r1, r1
    4fe8:	9f 57       	subi	r25, 0x7F	; 127
    4fea:	50 40       	sbci	r21, 0x00	; 0
    4fec:	8a f0       	brmi	.+34     	; 0x5010 <__mulsf3_pse+0x84>
    4fee:	e1 f0       	breq	.+56     	; 0x5028 <__mulsf3_pse+0x9c>
    4ff0:	88 23       	and	r24, r24
    4ff2:	4a f0       	brmi	.+18     	; 0x5006 <__mulsf3_pse+0x7a>
    4ff4:	ee 0f       	add	r30, r30
    4ff6:	ff 1f       	adc	r31, r31
    4ff8:	bb 1f       	adc	r27, r27
    4ffa:	66 1f       	adc	r22, r22
    4ffc:	77 1f       	adc	r23, r23
    4ffe:	88 1f       	adc	r24, r24
    5000:	91 50       	subi	r25, 0x01	; 1
    5002:	50 40       	sbci	r21, 0x00	; 0
    5004:	a9 f7       	brne	.-22     	; 0x4ff0 <__mulsf3_pse+0x64>
    5006:	9e 3f       	cpi	r25, 0xFE	; 254
    5008:	51 05       	cpc	r21, r1
    500a:	70 f0       	brcs	.+28     	; 0x5028 <__mulsf3_pse+0x9c>
    500c:	e6 ce       	rjmp	.-564    	; 0x4dda <__fp_inf>
    500e:	9f cf       	rjmp	.-194    	; 0x4f4e <__fp_szero>
    5010:	5f 3f       	cpi	r21, 0xFF	; 255
    5012:	ec f3       	brlt	.-6      	; 0x500e <__mulsf3_pse+0x82>
    5014:	98 3e       	cpi	r25, 0xE8	; 232
    5016:	dc f3       	brlt	.-10     	; 0x500e <__mulsf3_pse+0x82>
    5018:	86 95       	lsr	r24
    501a:	77 95       	ror	r23
    501c:	67 95       	ror	r22
    501e:	b7 95       	ror	r27
    5020:	f7 95       	ror	r31
    5022:	e7 95       	ror	r30
    5024:	9f 5f       	subi	r25, 0xFF	; 255
    5026:	c1 f7       	brne	.-16     	; 0x5018 <__mulsf3_pse+0x8c>
    5028:	fe 2b       	or	r31, r30
    502a:	88 0f       	add	r24, r24
    502c:	91 1d       	adc	r25, r1
    502e:	96 95       	lsr	r25
    5030:	87 95       	ror	r24
    5032:	97 f9       	bld	r25, 7
    5034:	08 95       	ret

00005036 <pow>:
    5036:	fa 01       	movw	r30, r20
    5038:	ee 0f       	add	r30, r30
    503a:	ff 1f       	adc	r31, r31
    503c:	30 96       	adiw	r30, 0x00	; 0
    503e:	21 05       	cpc	r18, r1
    5040:	31 05       	cpc	r19, r1
    5042:	99 f1       	breq	.+102    	; 0x50aa <pow+0x74>
    5044:	61 15       	cp	r22, r1
    5046:	71 05       	cpc	r23, r1
    5048:	61 f4       	brne	.+24     	; 0x5062 <pow+0x2c>
    504a:	80 38       	cpi	r24, 0x80	; 128
    504c:	bf e3       	ldi	r27, 0x3F	; 63
    504e:	9b 07       	cpc	r25, r27
    5050:	49 f1       	breq	.+82     	; 0x50a4 <pow+0x6e>
    5052:	68 94       	set
    5054:	90 38       	cpi	r25, 0x80	; 128
    5056:	81 05       	cpc	r24, r1
    5058:	61 f0       	breq	.+24     	; 0x5072 <pow+0x3c>
    505a:	80 38       	cpi	r24, 0x80	; 128
    505c:	bf ef       	ldi	r27, 0xFF	; 255
    505e:	9b 07       	cpc	r25, r27
    5060:	41 f0       	breq	.+16     	; 0x5072 <pow+0x3c>
    5062:	99 23       	and	r25, r25
    5064:	42 f5       	brpl	.+80     	; 0x50b6 <pow+0x80>
    5066:	ff 3f       	cpi	r31, 0xFF	; 255
    5068:	e1 05       	cpc	r30, r1
    506a:	31 05       	cpc	r19, r1
    506c:	21 05       	cpc	r18, r1
    506e:	11 f1       	breq	.+68     	; 0x50b4 <pow+0x7e>
    5070:	e8 94       	clt
    5072:	08 94       	sec
    5074:	e7 95       	ror	r30
    5076:	d9 01       	movw	r26, r18
    5078:	aa 23       	and	r26, r26
    507a:	29 f4       	brne	.+10     	; 0x5086 <pow+0x50>
    507c:	ab 2f       	mov	r26, r27
    507e:	be 2f       	mov	r27, r30
    5080:	f8 5f       	subi	r31, 0xF8	; 248
    5082:	d0 f3       	brcs	.-12     	; 0x5078 <pow+0x42>
    5084:	10 c0       	rjmp	.+32     	; 0x50a6 <pow+0x70>
    5086:	ff 5f       	subi	r31, 0xFF	; 255
    5088:	70 f4       	brcc	.+28     	; 0x50a6 <pow+0x70>
    508a:	a6 95       	lsr	r26
    508c:	e0 f7       	brcc	.-8      	; 0x5086 <pow+0x50>
    508e:	f7 39       	cpi	r31, 0x97	; 151
    5090:	50 f0       	brcs	.+20     	; 0x50a6 <pow+0x70>
    5092:	19 f0       	breq	.+6      	; 0x509a <pow+0x64>
    5094:	ff 3a       	cpi	r31, 0xAF	; 175
    5096:	38 f4       	brcc	.+14     	; 0x50a6 <pow+0x70>
    5098:	9f 77       	andi	r25, 0x7F	; 127
    509a:	9f 93       	push	r25
    509c:	0c d0       	rcall	.+24     	; 0x50b6 <pow+0x80>
    509e:	0f 90       	pop	r0
    50a0:	07 fc       	sbrc	r0, 7
    50a2:	90 58       	subi	r25, 0x80	; 128
    50a4:	08 95       	ret
    50a6:	3e f0       	brts	.+14     	; 0x50b6 <pow+0x80>
    50a8:	9e ce       	rjmp	.-708    	; 0x4de6 <__fp_nan>
    50aa:	60 e0       	ldi	r22, 0x00	; 0
    50ac:	70 e0       	ldi	r23, 0x00	; 0
    50ae:	80 e8       	ldi	r24, 0x80	; 128
    50b0:	9f e3       	ldi	r25, 0x3F	; 63
    50b2:	08 95       	ret
    50b4:	4f e7       	ldi	r20, 0x7F	; 127
    50b6:	9f 77       	andi	r25, 0x7F	; 127
    50b8:	5f 93       	push	r21
    50ba:	4f 93       	push	r20
    50bc:	3f 93       	push	r19
    50be:	2f 93       	push	r18
    50c0:	d2 d0       	rcall	.+420    	; 0x5266 <log>
    50c2:	2f 91       	pop	r18
    50c4:	3f 91       	pop	r19
    50c6:	4f 91       	pop	r20
    50c8:	5f 91       	pop	r21
    50ca:	52 df       	rcall	.-348    	; 0x4f70 <__mulsf3>
    50cc:	50 c0       	rjmp	.+160    	; 0x516e <exp>

000050ce <sin>:
    50ce:	9f 93       	push	r25
    50d0:	d2 de       	rcall	.-604    	; 0x4e76 <__fp_rempio2>
    50d2:	0f 90       	pop	r0
    50d4:	07 fc       	sbrc	r0, 7
    50d6:	ee 5f       	subi	r30, 0xFE	; 254
    50d8:	06 cf       	rjmp	.-500    	; 0x4ee6 <__fp_sinus>
    50da:	11 f4       	brne	.+4      	; 0x50e0 <sin+0x12>
    50dc:	0e f4       	brtc	.+2      	; 0x50e0 <sin+0x12>
    50de:	83 ce       	rjmp	.-762    	; 0x4de6 <__fp_nan>
    50e0:	72 c0       	rjmp	.+228    	; 0x51c6 <__fp_mpack>

000050e2 <sqrt>:
    50e2:	1a df       	rcall	.-460    	; 0x4f18 <__fp_splitA>
    50e4:	d0 f3       	brcs	.-12     	; 0x50da <sin+0xc>
    50e6:	99 23       	and	r25, r25
    50e8:	d9 f3       	breq	.-10     	; 0x50e0 <sin+0x12>
    50ea:	ce f3       	brts	.-14     	; 0x50de <sin+0x10>
    50ec:	9f 57       	subi	r25, 0x7F	; 127
    50ee:	55 0b       	sbc	r21, r21
    50f0:	87 ff       	sbrs	r24, 7
    50f2:	77 d0       	rcall	.+238    	; 0x51e2 <__fp_norm2>
    50f4:	00 24       	eor	r0, r0
    50f6:	a0 e6       	ldi	r26, 0x60	; 96
    50f8:	40 ea       	ldi	r20, 0xA0	; 160
    50fa:	90 01       	movw	r18, r0
    50fc:	80 58       	subi	r24, 0x80	; 128
    50fe:	56 95       	lsr	r21
    5100:	97 95       	ror	r25
    5102:	28 f4       	brcc	.+10     	; 0x510e <sqrt+0x2c>
    5104:	80 5c       	subi	r24, 0xC0	; 192
    5106:	66 0f       	add	r22, r22
    5108:	77 1f       	adc	r23, r23
    510a:	88 1f       	adc	r24, r24
    510c:	20 f0       	brcs	.+8      	; 0x5116 <sqrt+0x34>
    510e:	26 17       	cp	r18, r22
    5110:	37 07       	cpc	r19, r23
    5112:	48 07       	cpc	r20, r24
    5114:	30 f4       	brcc	.+12     	; 0x5122 <sqrt+0x40>
    5116:	62 1b       	sub	r22, r18
    5118:	73 0b       	sbc	r23, r19
    511a:	84 0b       	sbc	r24, r20
    511c:	20 29       	or	r18, r0
    511e:	31 29       	or	r19, r1
    5120:	4a 2b       	or	r20, r26
    5122:	a6 95       	lsr	r26
    5124:	17 94       	ror	r1
    5126:	07 94       	ror	r0
    5128:	20 25       	eor	r18, r0
    512a:	31 25       	eor	r19, r1
    512c:	4a 27       	eor	r20, r26
    512e:	58 f7       	brcc	.-42     	; 0x5106 <sqrt+0x24>
    5130:	66 0f       	add	r22, r22
    5132:	77 1f       	adc	r23, r23
    5134:	88 1f       	adc	r24, r24
    5136:	20 f0       	brcs	.+8      	; 0x5140 <sqrt+0x5e>
    5138:	26 17       	cp	r18, r22
    513a:	37 07       	cpc	r19, r23
    513c:	48 07       	cpc	r20, r24
    513e:	30 f4       	brcc	.+12     	; 0x514c <sqrt+0x6a>
    5140:	62 0b       	sbc	r22, r18
    5142:	73 0b       	sbc	r23, r19
    5144:	84 0b       	sbc	r24, r20
    5146:	20 0d       	add	r18, r0
    5148:	31 1d       	adc	r19, r1
    514a:	41 1d       	adc	r20, r1
    514c:	a0 95       	com	r26
    514e:	81 f7       	brne	.-32     	; 0x5130 <sqrt+0x4e>
    5150:	b9 01       	movw	r22, r18
    5152:	84 2f       	mov	r24, r20
    5154:	91 58       	subi	r25, 0x81	; 129
    5156:	88 0f       	add	r24, r24
    5158:	96 95       	lsr	r25
    515a:	87 95       	ror	r24
    515c:	08 95       	ret

0000515e <square>:
    515e:	9b 01       	movw	r18, r22
    5160:	ac 01       	movw	r20, r24
    5162:	06 cf       	rjmp	.-500    	; 0x4f70 <__mulsf3>
    5164:	19 f4       	brne	.+6      	; 0x516c <square+0xe>
    5166:	0e f0       	brts	.+2      	; 0x516a <square+0xc>
    5168:	38 ce       	rjmp	.-912    	; 0x4dda <__fp_inf>
    516a:	f0 ce       	rjmp	.-544    	; 0x4f4c <__fp_zero>
    516c:	3c ce       	rjmp	.-904    	; 0x4de6 <__fp_nan>

0000516e <exp>:
    516e:	d4 de       	rcall	.-600    	; 0x4f18 <__fp_splitA>
    5170:	c8 f3       	brcs	.-14     	; 0x5164 <square+0x6>
    5172:	96 38       	cpi	r25, 0x86	; 134
    5174:	c0 f7       	brcc	.-16     	; 0x5166 <square+0x8>
    5176:	07 f8       	bld	r0, 7
    5178:	0f 92       	push	r0
    517a:	e8 94       	clt
    517c:	2b e3       	ldi	r18, 0x3B	; 59
    517e:	3a ea       	ldi	r19, 0xAA	; 170
    5180:	48 eb       	ldi	r20, 0xB8	; 184
    5182:	5f e7       	ldi	r21, 0x7F	; 127
    5184:	03 df       	rcall	.-506    	; 0x4f8c <__mulsf3_pse>
    5186:	0f 92       	push	r0
    5188:	0f 92       	push	r0
    518a:	0f 92       	push	r0
    518c:	4d b7       	in	r20, 0x3d	; 61
    518e:	5e b7       	in	r21, 0x3e	; 62
    5190:	0f 92       	push	r0
    5192:	a9 d0       	rcall	.+338    	; 0x52e6 <modf>
    5194:	e3 e1       	ldi	r30, 0x13	; 19
    5196:	f1 e0       	ldi	r31, 0x01	; 1
    5198:	29 de       	rcall	.-942    	; 0x4dec <__fp_powser>
    519a:	4f 91       	pop	r20
    519c:	5f 91       	pop	r21
    519e:	ef 91       	pop	r30
    51a0:	ff 91       	pop	r31
    51a2:	e5 95       	asr	r30
    51a4:	ee 1f       	adc	r30, r30
    51a6:	ff 1f       	adc	r31, r31
    51a8:	49 f0       	breq	.+18     	; 0x51bc <exp+0x4e>
    51aa:	fe 57       	subi	r31, 0x7E	; 126
    51ac:	e0 68       	ori	r30, 0x80	; 128
    51ae:	44 27       	eor	r20, r20
    51b0:	ee 0f       	add	r30, r30
    51b2:	44 1f       	adc	r20, r20
    51b4:	fa 95       	dec	r31
    51b6:	e1 f7       	brne	.-8      	; 0x51b0 <exp+0x42>
    51b8:	41 95       	neg	r20
    51ba:	55 0b       	sbc	r21, r21
    51bc:	1b d0       	rcall	.+54     	; 0x51f4 <ldexp>
    51be:	0f 90       	pop	r0
    51c0:	07 fe       	sbrs	r0, 7
    51c2:	cf ce       	rjmp	.-610    	; 0x4f62 <inverse>
    51c4:	08 95       	ret

000051c6 <__fp_mpack>:
    51c6:	9f 3f       	cpi	r25, 0xFF	; 255
    51c8:	31 f0       	breq	.+12     	; 0x51d6 <__fp_mpack_finite+0xc>

000051ca <__fp_mpack_finite>:
    51ca:	91 50       	subi	r25, 0x01	; 1
    51cc:	20 f4       	brcc	.+8      	; 0x51d6 <__fp_mpack_finite+0xc>
    51ce:	87 95       	ror	r24
    51d0:	77 95       	ror	r23
    51d2:	67 95       	ror	r22
    51d4:	b7 95       	ror	r27
    51d6:	88 0f       	add	r24, r24
    51d8:	91 1d       	adc	r25, r1
    51da:	96 95       	lsr	r25
    51dc:	87 95       	ror	r24
    51de:	97 f9       	bld	r25, 7
    51e0:	08 95       	ret

000051e2 <__fp_norm2>:
    51e2:	91 50       	subi	r25, 0x01	; 1
    51e4:	50 40       	sbci	r21, 0x00	; 0
    51e6:	66 0f       	add	r22, r22
    51e8:	77 1f       	adc	r23, r23
    51ea:	88 1f       	adc	r24, r24
    51ec:	d2 f7       	brpl	.-12     	; 0x51e2 <__fp_norm2>
    51ee:	08 95       	ret
    51f0:	f4 cd       	rjmp	.-1048   	; 0x4dda <__fp_inf>
    51f2:	e9 cf       	rjmp	.-46     	; 0x51c6 <__fp_mpack>

000051f4 <ldexp>:
    51f4:	91 de       	rcall	.-734    	; 0x4f18 <__fp_splitA>
    51f6:	e8 f3       	brcs	.-6      	; 0x51f2 <__fp_norm2+0x10>
    51f8:	99 23       	and	r25, r25
    51fa:	d9 f3       	breq	.-10     	; 0x51f2 <__fp_norm2+0x10>
    51fc:	94 0f       	add	r25, r20
    51fe:	51 1d       	adc	r21, r1
    5200:	bb f3       	brvs	.-18     	; 0x51f0 <__fp_norm2+0xe>
    5202:	91 50       	subi	r25, 0x01	; 1
    5204:	50 40       	sbci	r21, 0x00	; 0
    5206:	94 f0       	brlt	.+36     	; 0x522c <ldexp+0x38>
    5208:	59 f0       	breq	.+22     	; 0x5220 <ldexp+0x2c>
    520a:	88 23       	and	r24, r24
    520c:	32 f0       	brmi	.+12     	; 0x521a <ldexp+0x26>
    520e:	66 0f       	add	r22, r22
    5210:	77 1f       	adc	r23, r23
    5212:	88 1f       	adc	r24, r24
    5214:	91 50       	subi	r25, 0x01	; 1
    5216:	50 40       	sbci	r21, 0x00	; 0
    5218:	c1 f7       	brne	.-16     	; 0x520a <ldexp+0x16>
    521a:	9e 3f       	cpi	r25, 0xFE	; 254
    521c:	51 05       	cpc	r21, r1
    521e:	44 f7       	brge	.-48     	; 0x51f0 <__fp_norm2+0xe>
    5220:	88 0f       	add	r24, r24
    5222:	91 1d       	adc	r25, r1
    5224:	96 95       	lsr	r25
    5226:	87 95       	ror	r24
    5228:	97 f9       	bld	r25, 7
    522a:	08 95       	ret
    522c:	5f 3f       	cpi	r21, 0xFF	; 255
    522e:	ac f0       	brlt	.+42     	; 0x525a <ldexp+0x66>
    5230:	98 3e       	cpi	r25, 0xE8	; 232
    5232:	9c f0       	brlt	.+38     	; 0x525a <ldexp+0x66>
    5234:	bb 27       	eor	r27, r27
    5236:	86 95       	lsr	r24
    5238:	77 95       	ror	r23
    523a:	67 95       	ror	r22
    523c:	b7 95       	ror	r27
    523e:	08 f4       	brcc	.+2      	; 0x5242 <ldexp+0x4e>
    5240:	b1 60       	ori	r27, 0x01	; 1
    5242:	93 95       	inc	r25
    5244:	c1 f7       	brne	.-16     	; 0x5236 <ldexp+0x42>
    5246:	bb 0f       	add	r27, r27
    5248:	58 f7       	brcc	.-42     	; 0x5220 <ldexp+0x2c>
    524a:	11 f4       	brne	.+4      	; 0x5250 <ldexp+0x5c>
    524c:	60 ff       	sbrs	r22, 0
    524e:	e8 cf       	rjmp	.-48     	; 0x5220 <ldexp+0x2c>
    5250:	6f 5f       	subi	r22, 0xFF	; 255
    5252:	7f 4f       	sbci	r23, 0xFF	; 255
    5254:	8f 4f       	sbci	r24, 0xFF	; 255
    5256:	9f 4f       	sbci	r25, 0xFF	; 255
    5258:	e3 cf       	rjmp	.-58     	; 0x5220 <ldexp+0x2c>
    525a:	79 ce       	rjmp	.-782    	; 0x4f4e <__fp_szero>
    525c:	0e f0       	brts	.+2      	; 0x5260 <ldexp+0x6c>
    525e:	b3 cf       	rjmp	.-154    	; 0x51c6 <__fp_mpack>
    5260:	c2 cd       	rjmp	.-1148   	; 0x4de6 <__fp_nan>
    5262:	68 94       	set
    5264:	ba cd       	rjmp	.-1164   	; 0x4dda <__fp_inf>

00005266 <log>:
    5266:	58 de       	rcall	.-848    	; 0x4f18 <__fp_splitA>
    5268:	c8 f3       	brcs	.-14     	; 0x525c <ldexp+0x68>
    526a:	99 23       	and	r25, r25
    526c:	d1 f3       	breq	.-12     	; 0x5262 <ldexp+0x6e>
    526e:	c6 f3       	brts	.-16     	; 0x5260 <ldexp+0x6c>
    5270:	df 93       	push	r29
    5272:	cf 93       	push	r28
    5274:	1f 93       	push	r17
    5276:	0f 93       	push	r16
    5278:	ff 92       	push	r15
    527a:	c9 2f       	mov	r28, r25
    527c:	dd 27       	eor	r29, r29
    527e:	88 23       	and	r24, r24
    5280:	2a f0       	brmi	.+10     	; 0x528c <log+0x26>
    5282:	21 97       	sbiw	r28, 0x01	; 1
    5284:	66 0f       	add	r22, r22
    5286:	77 1f       	adc	r23, r23
    5288:	88 1f       	adc	r24, r24
    528a:	da f7       	brpl	.-10     	; 0x5282 <log+0x1c>
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	40 e8       	ldi	r20, 0x80	; 128
    5292:	5f eb       	ldi	r21, 0xBF	; 191
    5294:	9f e3       	ldi	r25, 0x3F	; 63
    5296:	88 39       	cpi	r24, 0x98	; 152
    5298:	20 f0       	brcs	.+8      	; 0x52a2 <log+0x3c>
    529a:	80 3e       	cpi	r24, 0xE0	; 224
    529c:	30 f0       	brcs	.+12     	; 0x52aa <log+0x44>
    529e:	21 96       	adiw	r28, 0x01	; 1
    52a0:	8f 77       	andi	r24, 0x7F	; 127
    52a2:	64 db       	rcall	.-2360   	; 0x496c <__addsf3>
    52a4:	eb e3       	ldi	r30, 0x3B	; 59
    52a6:	f1 e0       	ldi	r31, 0x01	; 1
    52a8:	03 c0       	rjmp	.+6      	; 0x52b0 <log+0x4a>
    52aa:	60 db       	rcall	.-2368   	; 0x496c <__addsf3>
    52ac:	e8 e6       	ldi	r30, 0x68	; 104
    52ae:	f1 e0       	ldi	r31, 0x01	; 1
    52b0:	9d dd       	rcall	.-1222   	; 0x4dec <__fp_powser>
    52b2:	8b 01       	movw	r16, r22
    52b4:	be 01       	movw	r22, r28
    52b6:	ec 01       	movw	r28, r24
    52b8:	fb 2e       	mov	r15, r27
    52ba:	6f 57       	subi	r22, 0x7F	; 127
    52bc:	71 09       	sbc	r23, r1
    52be:	75 95       	asr	r23
    52c0:	77 1f       	adc	r23, r23
    52c2:	88 0b       	sbc	r24, r24
    52c4:	99 0b       	sbc	r25, r25
    52c6:	d1 dc       	rcall	.-1630   	; 0x4c6a <__floatsisf>
    52c8:	28 e1       	ldi	r18, 0x18	; 24
    52ca:	32 e7       	ldi	r19, 0x72	; 114
    52cc:	41 e3       	ldi	r20, 0x31	; 49
    52ce:	5f e3       	ldi	r21, 0x3F	; 63
    52d0:	5b de       	rcall	.-842    	; 0x4f88 <__mulsf3x>
    52d2:	af 2d       	mov	r26, r15
    52d4:	98 01       	movw	r18, r16
    52d6:	ae 01       	movw	r20, r28
    52d8:	ff 90       	pop	r15
    52da:	0f 91       	pop	r16
    52dc:	1f 91       	pop	r17
    52de:	cf 91       	pop	r28
    52e0:	df 91       	pop	r29
    52e2:	55 db       	rcall	.-2390   	; 0x498e <__addsf3x>
    52e4:	ef cd       	rjmp	.-1058   	; 0x4ec4 <__fp_round>

000052e6 <modf>:
    52e6:	fa 01       	movw	r30, r20
    52e8:	dc 01       	movw	r26, r24
    52ea:	aa 0f       	add	r26, r26
    52ec:	bb 1f       	adc	r27, r27
    52ee:	9b 01       	movw	r18, r22
    52f0:	ac 01       	movw	r20, r24
    52f2:	bf 57       	subi	r27, 0x7F	; 127
    52f4:	28 f4       	brcc	.+10     	; 0x5300 <modf+0x1a>
    52f6:	22 27       	eor	r18, r18
    52f8:	33 27       	eor	r19, r19
    52fa:	44 27       	eor	r20, r20
    52fc:	50 78       	andi	r21, 0x80	; 128
    52fe:	1f c0       	rjmp	.+62     	; 0x533e <modf+0x58>
    5300:	b7 51       	subi	r27, 0x17	; 23
    5302:	88 f4       	brcc	.+34     	; 0x5326 <modf+0x40>
    5304:	ab 2f       	mov	r26, r27
    5306:	00 24       	eor	r0, r0
    5308:	46 95       	lsr	r20
    530a:	37 95       	ror	r19
    530c:	27 95       	ror	r18
    530e:	01 1c       	adc	r0, r1
    5310:	a3 95       	inc	r26
    5312:	d2 f3       	brmi	.-12     	; 0x5308 <modf+0x22>
    5314:	00 20       	and	r0, r0
    5316:	69 f0       	breq	.+26     	; 0x5332 <modf+0x4c>
    5318:	22 0f       	add	r18, r18
    531a:	33 1f       	adc	r19, r19
    531c:	44 1f       	adc	r20, r20
    531e:	b3 95       	inc	r27
    5320:	da f3       	brmi	.-10     	; 0x5318 <modf+0x32>
    5322:	0d d0       	rcall	.+26     	; 0x533e <modf+0x58>
    5324:	22 cb       	rjmp	.-2492   	; 0x496a <__subsf3>
    5326:	61 30       	cpi	r22, 0x01	; 1
    5328:	71 05       	cpc	r23, r1
    532a:	a0 e8       	ldi	r26, 0x80	; 128
    532c:	8a 07       	cpc	r24, r26
    532e:	b9 46       	sbci	r27, 0x69	; 105
    5330:	30 f4       	brcc	.+12     	; 0x533e <modf+0x58>
    5332:	9b 01       	movw	r18, r22
    5334:	ac 01       	movw	r20, r24
    5336:	66 27       	eor	r22, r22
    5338:	77 27       	eor	r23, r23
    533a:	88 27       	eor	r24, r24
    533c:	90 78       	andi	r25, 0x80	; 128
    533e:	30 96       	adiw	r30, 0x00	; 0
    5340:	21 f0       	breq	.+8      	; 0x534a <modf+0x64>
    5342:	20 83       	st	Z, r18
    5344:	31 83       	std	Z+1, r19	; 0x01
    5346:	42 83       	std	Z+2, r20	; 0x02
    5348:	53 83       	std	Z+3, r21	; 0x03
    534a:	08 95       	ret

0000534c <__umulsidi3>:
    534c:	e8 94       	clt

0000534e <__umulsidi3_helper>:
    534e:	df 93       	push	r29
    5350:	cf 93       	push	r28
    5352:	fc 01       	movw	r30, r24
    5354:	db 01       	movw	r26, r22
    5356:	58 d0       	rcall	.+176    	; 0x5408 <__umulhisi3>
    5358:	7f 93       	push	r23
    535a:	6f 93       	push	r22
    535c:	e9 01       	movw	r28, r18
    535e:	9a 01       	movw	r18, r20
    5360:	ac 01       	movw	r20, r24
    5362:	bf 93       	push	r27
    5364:	af 93       	push	r26
    5366:	3f 93       	push	r19
    5368:	2f 93       	push	r18
    536a:	df 01       	movw	r26, r30
    536c:	4d d0       	rcall	.+154    	; 0x5408 <__umulhisi3>
    536e:	26 f4       	brtc	.+8      	; 0x5378 <__umulsidi3_helper+0x2a>
    5370:	6c 1b       	sub	r22, r28
    5372:	7d 0b       	sbc	r23, r29
    5374:	82 0b       	sbc	r24, r18
    5376:	93 0b       	sbc	r25, r19
    5378:	9e 01       	movw	r18, r28
    537a:	eb 01       	movw	r28, r22
    537c:	fc 01       	movw	r30, r24
    537e:	53 d0       	rcall	.+166    	; 0x5426 <__muldi3_6>
    5380:	af 91       	pop	r26
    5382:	bf 91       	pop	r27
    5384:	2f 91       	pop	r18
    5386:	3f 91       	pop	r19
    5388:	4e d0       	rcall	.+156    	; 0x5426 <__muldi3_6>
    538a:	be 01       	movw	r22, r28
    538c:	cf 01       	movw	r24, r30
    538e:	f9 01       	movw	r30, r18
    5390:	2f 91       	pop	r18
    5392:	3f 91       	pop	r19
    5394:	cf 91       	pop	r28
    5396:	df 91       	pop	r29
    5398:	08 95       	ret

0000539a <__ashldi3>:
    539a:	0f 93       	push	r16
    539c:	08 30       	cpi	r16, 0x08	; 8
    539e:	90 f0       	brcs	.+36     	; 0x53c4 <__ashldi3+0x2a>
    53a0:	98 2f       	mov	r25, r24
    53a2:	87 2f       	mov	r24, r23
    53a4:	76 2f       	mov	r23, r22
    53a6:	65 2f       	mov	r22, r21
    53a8:	54 2f       	mov	r21, r20
    53aa:	43 2f       	mov	r20, r19
    53ac:	32 2f       	mov	r19, r18
    53ae:	22 27       	eor	r18, r18
    53b0:	08 50       	subi	r16, 0x08	; 8
    53b2:	f4 cf       	rjmp	.-24     	; 0x539c <__ashldi3+0x2>
    53b4:	22 0f       	add	r18, r18
    53b6:	33 1f       	adc	r19, r19
    53b8:	44 1f       	adc	r20, r20
    53ba:	55 1f       	adc	r21, r21
    53bc:	66 1f       	adc	r22, r22
    53be:	77 1f       	adc	r23, r23
    53c0:	88 1f       	adc	r24, r24
    53c2:	99 1f       	adc	r25, r25
    53c4:	0a 95       	dec	r16
    53c6:	b2 f7       	brpl	.-20     	; 0x53b4 <__ashldi3+0x1a>
    53c8:	0f 91       	pop	r16
    53ca:	08 95       	ret

000053cc <__adddi3>:
    53cc:	2a 0d       	add	r18, r10
    53ce:	3b 1d       	adc	r19, r11
    53d0:	4c 1d       	adc	r20, r12
    53d2:	5d 1d       	adc	r21, r13
    53d4:	6e 1d       	adc	r22, r14
    53d6:	7f 1d       	adc	r23, r15
    53d8:	80 1f       	adc	r24, r16
    53da:	91 1f       	adc	r25, r17
    53dc:	08 95       	ret

000053de <__adddi3_s8>:
    53de:	00 24       	eor	r0, r0
    53e0:	a7 fd       	sbrc	r26, 7
    53e2:	00 94       	com	r0
    53e4:	2a 0f       	add	r18, r26
    53e6:	30 1d       	adc	r19, r0
    53e8:	40 1d       	adc	r20, r0
    53ea:	50 1d       	adc	r21, r0
    53ec:	60 1d       	adc	r22, r0
    53ee:	70 1d       	adc	r23, r0
    53f0:	80 1d       	adc	r24, r0
    53f2:	90 1d       	adc	r25, r0
    53f4:	08 95       	ret

000053f6 <__subdi3>:
    53f6:	2a 19       	sub	r18, r10
    53f8:	3b 09       	sbc	r19, r11
    53fa:	4c 09       	sbc	r20, r12
    53fc:	5d 09       	sbc	r21, r13
    53fe:	6e 09       	sbc	r22, r14
    5400:	7f 09       	sbc	r23, r15
    5402:	80 0b       	sbc	r24, r16
    5404:	91 0b       	sbc	r25, r17
    5406:	08 95       	ret

00005408 <__umulhisi3>:
    5408:	a2 9f       	mul	r26, r18
    540a:	b0 01       	movw	r22, r0
    540c:	b3 9f       	mul	r27, r19
    540e:	c0 01       	movw	r24, r0
    5410:	a3 9f       	mul	r26, r19
    5412:	70 0d       	add	r23, r0
    5414:	81 1d       	adc	r24, r1
    5416:	11 24       	eor	r1, r1
    5418:	91 1d       	adc	r25, r1
    541a:	b2 9f       	mul	r27, r18
    541c:	70 0d       	add	r23, r0
    541e:	81 1d       	adc	r24, r1
    5420:	11 24       	eor	r1, r1
    5422:	91 1d       	adc	r25, r1
    5424:	08 95       	ret

00005426 <__muldi3_6>:
    5426:	f0 df       	rcall	.-32     	; 0x5408 <__umulhisi3>
    5428:	46 0f       	add	r20, r22
    542a:	57 1f       	adc	r21, r23
    542c:	c8 1f       	adc	r28, r24
    542e:	d9 1f       	adc	r29, r25
    5430:	08 f4       	brcc	.+2      	; 0x5434 <__muldi3_6+0xe>
    5432:	31 96       	adiw	r30, 0x01	; 1
    5434:	08 95       	ret

00005436 <_exit>:
    5436:	f8 94       	cli

00005438 <__stop_program>:
    5438:	ff cf       	rjmp	.-2      	; 0x5438 <__stop_program>
